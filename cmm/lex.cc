// Generated by Flexc++ V2.06.02 on Sat, 30 Nov 2019 22:43:39 +0300

#include <iostream>
#include <fstream>
#include <sstream>
#include <stdexcept>

// $insert class_ih
#include "Scanner.ih"


    // s_ranges__: use (unsigned) characters as index to obtain
    //           that character's range-number.
    //           The range for EOF is defined in a constant in the
    //           class header file
size_t const ScannerBase::s_ranges__[] =
{
     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,
    22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,37,37,37,37,37,38,38,38,38,
    38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,40,41,42,43,44,45,46,47,
    48,49,50,51,52,53,54,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,
    72,73,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,
    74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,
    74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,
    74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,
    74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,
    74,74,74,74,74,74,
};

// $insert startcondinfo
    // s_dfa__ contains the rows of *all* DFAs ordered by start state.  The
    // enum class StartCondition__is defined in the baseclass header.
    // StartCondition__::INITIAL is always 0.  Each entry defines the row to
    // transit to if the column's character range was sensed. Row numbers are
    // relative to the used DFA, and d_dfaBase__ is set to the first row of
    // the subset to use.  The row's final two values are respectively the
    // rule that may be matched at this state, and the rule's FINAL flag. If
    // the final value equals FINAL (= 1) then, if there's no continuation,
    // the rule is matched. If the BOL flag (8) is also set (so FINAL + BOL (=
    // 9) is set) then the rule only matches when d_atBOL is also true.
int const ScannerBase::s_dfa__[][78] =
{
    // INITIAL
    { 1, 2, 3, 1, 2, 4, 5, 6, 1, 7, 8, 9,10,11,12,13,14,15, 1,16,
         17,18,18,18,18,18,18,18,18,18,19,20,21,22,23,24, 1,25,25,26,
          1,27,28,25, 1,29,30,31,32,33,34,35,36,37,25,38,25,39,40,41,
         25,42,43,25,44,45,46,25,25,25,47,48,49,50, 1,51,    -1, -1},  // 0
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   142, -1},  // 1
    {-1, 2,-1,-1, 2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   140, -1},  // 2
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   141, -1},  // 3
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,52,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   100, -1},  // 4
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   135, -1},  // 5
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   119, -1},  // 6
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   118, -1},  // 7
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,53,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,54,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   115, -1},  // 8
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   131, -1},  // 9
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   102, -1},  // 10
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   103, -1},  // 11
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   109, -1},  // 12
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,55,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,56,-1,-1,57,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   110, -1},  // 13
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   114, -1},  // 14
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,58,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,59,-1,-1,60,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   111, -1},  // 15
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,61,-1,-1,-1,-1,62,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   112, -1},  // 16
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         18,18,18,18,18,18,18,18,18,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,63,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,64,-1,-1,-1,-1,-1,-1,-1,-1,    79, -1},  // 17
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         18,18,18,18,18,18,18,18,18,18,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    79, -1},  // 18
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   120, -1},  // 19
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   101, -1},  // 20
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,65,66,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    94, -1},  // 21
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,67,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   108, -1},  // 22
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,68,69,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    95, -1},  // 23
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    84, -1},  // 24
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 25
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   106, -1},  // 26
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   107, -1},  // 27
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,70,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   117, -1},  // 28
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,71,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    49, -1},  // 29
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,72,25,25,73,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    51, -1},  // 30
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,74,25,25,25,25,25,25,25,25,25,25,25,25,25,75,76,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    53, -1},  // 31
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,77,78,25,25,25,79,25,25,25,25,25,25,25,25,80,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    55, -1},  // 32
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,81,25,25,25,25,25,25,25,25,25,25,82,25,25,25,25,
         25,25,25,25,25,25,25,83,25,25,-1,-1,-1,-1,-1,-1,    57, -1},  // 33
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,84,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 34
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,85,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 35
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,86,87,25,25,25,25,25,25,25,25,25,88,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    59, -1},  // 36
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,89,25,25,25,25,25,25,90,25,25,
         25,25,25,25,25,25,25,91,92,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 37
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,93,25,25,25,94,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    61, -1},  // 38
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,95,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 39
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,96,97,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 40
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,98,25,
         25,25,25,25,99,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 41
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,100,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 42
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,101,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 43
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,102,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 44
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,103,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 45
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,104,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 46
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   104, -1},  // 47
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,105,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,106,-1,-1,-1,-1,   116, -1},  // 48
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   105, -1},  // 49
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   113, -1},  // 50
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   139, -1},  // 51
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    91, -1},  // 52
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    99, -1},  // 53
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    88, -1},  // 54
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    80, -1},  // 55
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    82, -1},  // 56
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,107,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    -1, -1},  // 57
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    81, -1},  // 58
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    85, -1},  // 59
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,108,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    -1, -1},  // 60
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   128, -1},  // 61
    {62,62,109,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
         62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
         62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,
         62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-1,    -1, -1},  // 62
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         110,110,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    -1, -1},  // 63
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         111,111,111,111,111,111,111,111,111,111,-1,-1,-1,-1,-1,-1,-1,111,-1,-1,
         -1,-1,-1,-1,-1,111,111,111,111,111,111,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    -1, -1},  // 64
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,112,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,113,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,114,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    96, -1},  // 65
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    92, -1},  // 66
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    90, -1},  // 67
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    93, -1},  // 68
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,115,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,116,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,117,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    97, -1},  // 69
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    89, -1},  // 70
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    50, -1},  // 71
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    52, -1},  // 72
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,118,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    68, -1},  // 73
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    54, -1},  // 74
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,119,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 75
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,120,25,25,25,25,121,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 76
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    56, -1},  // 77
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,122,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 78
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,123,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    70, -1},  // 79
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    41, -1},  // 80
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    58, -1},  // 81
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,124,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 82
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    42, -1},  // 83
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,125,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 84
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,126,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 85
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    60, -1},  // 86
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,127,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 87
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,128,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    72, -1},  // 88
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    39, -1},  // 89
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,129,25,25,25,25,130,25,25,25,25,25,25,
         25,25,25,131,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    36, -1},  // 90
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,132,25,25,133,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    73, -1},  // 91
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,134,25,25,135,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    74, -1},  // 92
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    62, -1},  // 93
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,136,25,25,25,25,137,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 94
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,138,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 95
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,139,25,25,25,25,140,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 96
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,141,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 97
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,142,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 98
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,143,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 99
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,144,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 100
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    75, -1},  // 101
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,145,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 102
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,146,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 103
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,147,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 104
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    87, -1},  // 105
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    98, -1},  // 106
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    83, -1},  // 107
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    86, -1},  // 108
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   127, -1},  // 109
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         110,110,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    78, -1},  // 110
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         111,111,111,111,111,111,111,111,111,111,-1,-1,-1,-1,-1,-1,-1,111,-1,-1,
         -1,-1,-1,-1,-1,111,111,111,111,111,111,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    77, -1},  // 111
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   121, -1},  // 112
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,148,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    -1, -1},  // 113
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,149,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    -1, -1},  // 114
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   122, -1},  // 115
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,150,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    -1, -1},  // 116
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,151,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    -1, -1},  // 117
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    67, -1},  // 118
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,152,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 119
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,153,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    25, -1},  // 120
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,154,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    21, -1},  // 121
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    19, -1},  // 122
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    69, -1},  // 123
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,155,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 124
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,156,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 125
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,157,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 126
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,158,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 127
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,    71, -1},  // 128
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,159,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    26, -1},  // 129
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,160,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    22, -1},  // 130
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,161,25,162,25,25,163,25,164,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,     1, -1},  // 131
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    64, -1},  // 132
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    63, -1},  // 133
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    66, -1},  // 134
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    65, -1},  // 135
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,165,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    24, -1},  // 136
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,166,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    20, -1},  // 137
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    18, -1},  // 138
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,167,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 139
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,168,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 140
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,169,25,25,25,25,170,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    37, -1},  // 141
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    44, -1},  // 142
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,171,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 143
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,172,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 144
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,173,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 145
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,174,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 146
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,175,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 147
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   125, -1},  // 148
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   123, -1},  // 149
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   126, -1},  // 150
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   124, -1},  // 151
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,176,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 152
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    33, -1},  // 153
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    29, -1},  // 154
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    47, -1},  // 155
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,177,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 156
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    48, -1},  // 157
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    38, -1},  // 158
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    34, -1},  // 159
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    30, -1},  // 160
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,178,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 161
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,179,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 162
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,180,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 163
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,181,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 164
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    32, -1},  // 165
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    28, -1},  // 166
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    35, -1},  // 167
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    31, -1},  // 168
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    27, -1},  // 169
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    23, -1},  // 170
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    43, -1},  // 171
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,182,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 172
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,183,25,184,25,25,185,25,186,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 173
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,     0, -1},  // 174
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,187,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 175
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    46, -1},  // 176
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,188,25,25,25,25,25,25,25,25,189,190,25,191,
         25,25,25,25,25,25,25,25,25,192,-1,-1,-1,-1,-1,-1,    76, -1},  // 177
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,193,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 178
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,194,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 179
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,195,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 180
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,196,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 181
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,197,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 182
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,198,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 183
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,199,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 184
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,200,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 185
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,201,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 186
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    40, -1},  // 187
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    12, -1},  // 188
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    17, -1},  // 189
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,202,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,203,-1,-1,-1,-1,-1,-1,    76, -1},  // 190
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,204,25,25,25,25,25,25,25,25,205,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    16, -1},  // 191
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    10, -1},  // 192
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,206,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 193
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,207,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 194
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,208,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 195
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,     2, -1},  // 196
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    45, -1},  // 197
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,209,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 198
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,210,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 199
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,211,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 200
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,212,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 201
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    13, -1},  // 202
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    11, -1},  // 203
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    15, -1},  // 204
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    14, -1},  // 205
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,     3, -1},  // 206
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,     4, -1},  // 207
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,     5, -1},  // 208
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,213,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 209
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,214,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 210
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,215,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,    76, -1},  // 211
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,     6, -1},  // 212
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,     7, -1},  // 213
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,     8, -1},  // 214
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,-1,25,25,-1,
         -1,-1,-1,25,-1,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,
         25,25,25,25,25,25,25,25,25,25,-1,-1,-1,-1,-1,-1,     9, -1},  // 215
    // COMMENT
    { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,-1,    -1, -1},  // 0
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   130, -1},  // 1
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 3,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   130, -1},  // 2
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   129, -1},  // 3
    // CHAR
    { 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,-1,    -1, -1},  // 0
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   133, -1},  // 1
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   134, -1},  // 2
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   132, -1},  // 3
    { 1, 1,-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,-1,   133, -1},  // 4
    // STRING
    { 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,-1,    -1, -1},  // 0
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   137, -1},  // 1
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   138, -1},  // 2
    {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
         -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,   136, -1},  // 3
    { 1, 1,-1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,-1,   137, -1},  // 4
};


int const (*ScannerBase::s_dfaBase__[])[78] =
{
    s_dfa__ + 0,
    s_dfa__ + 216,
    s_dfa__ + 220,
    s_dfa__ + 225,
};

size_t ScannerBase::s_istreamNr = 0;

// $insert inputImplementation
ScannerBase::Input::Input()
:
    d_in(0),
    d_lineNr(1)
{}

ScannerBase::Input::Input(std::istream *iStream, size_t lineNr)
:
    d_in(iStream),
    d_lineNr(lineNr)
{}

size_t ScannerBase::Input::get()
{
    switch (size_t ch = next())         // get the next input char
    {
        case '\n':
            ++d_lineNr;
        // FALLING THROUGH

        default:
        return ch;
    }
}

size_t ScannerBase::Input::next()
{
    size_t ch;

    if (d_deque.empty())                // deque empty: next char fm d_in
    {
        if (d_in == 0)
            return AT_EOF;
        ch = d_in->get();
        return *d_in ? ch : static_cast<size_t>(AT_EOF);
    }

    ch = d_deque.front();
    d_deque.pop_front();

    return ch;
}

void ScannerBase::Input::reRead(size_t ch)
{
    if (ch < 0x100)
    {
        if (ch == '\n')
            --d_lineNr;
        d_deque.push_front(ch);
    }
}

void ScannerBase::Input::reRead(std::string const &str, size_t fm)
{
    for (size_t idx = str.size(); idx-- > fm; )
        reRead(str[idx]);
}

ScannerBase::ScannerBase(std::istream &in, std::ostream &out)
:
    d_filename("-"),
    d_out(new std::ostream(out.rdbuf())),
// $insert interactiveInit
    d_in(0),
    d_input(new std::istream(in.rdbuf())),
    d_dfaBase__(s_dfa__)
{}

void ScannerBase::switchStream__(std::istream &in, size_t lineNr)
{
    d_input.close();
    d_input = Input(new std::istream(in.rdbuf()), lineNr);
}


ScannerBase::ScannerBase(std::string const &infilename, std::string const &outfilename)
:
    d_filename(infilename),
    d_out(outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
          outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                  new std::ofstream(outfilename)),
    d_input(new std::ifstream(infilename)),
    d_dfaBase__(s_dfa__)
{}

void ScannerBase::switchStreams(std::istream &in, std::ostream &out)
{
    switchStream__(in, 1);
    switchOstream(out);
}


void ScannerBase::switchOstream(std::ostream &out)
{
    *d_out << std::flush;
    d_out.reset(new std::ostream(out.rdbuf()));
}

// $insert debugFunctions
void ScannerBase::setDebug(bool onOff)
{}

bool ScannerBase::debug() const
{
    return false;
}

void ScannerBase::redo(size_t nChars)
{
    size_t from = nChars >= length() ? 0 : length() - nChars;
    d_input.reRead(d_matched, from);
    d_matched.resize(from);
}

void ScannerBase::switchOstream(std::string const &outfilename)
{
    *d_out << std::flush;
    d_out.reset(
            outfilename == "-"    ? new std::ostream(std::cout.rdbuf()) :
            outfilename == ""     ? new std::ostream(std::cerr.rdbuf()) :
                                    new std::ofstream(outfilename));
}


void ScannerBase::switchIstream(std::string const &infilename)
{
    d_input.close();
    d_filename = infilename;
    d_input = Input(new std::ifstream(infilename));
    d_atBOL = true;
}

void ScannerBase::switchStreams(std::string const &infilename,
                           std::string const &outfilename)
{
    switchOstream(outfilename);
    switchIstream(infilename);
}

void ScannerBase::pushStream(std::istream  &istr)
{
    std::istream *streamPtr = new std::istream(istr.rdbuf());
    p_pushStream("(istream)", streamPtr);
}

void ScannerBase::pushStream(std::string const &name)
{
    std::istream *streamPtr = new std::ifstream(name);
    if (!*streamPtr)
    {
        delete streamPtr;
        throw std::runtime_error("Cannot read " + name);
    }
    p_pushStream(name, streamPtr);
}


void ScannerBase::p_pushStream(std::string const &name, std::istream *streamPtr)
{
    if (d_streamStack.size() == s_maxSizeofStreamStack__)
    {
        delete streamPtr;
        throw std::length_error("Max stream stack size exceeded");
    }

    d_streamStack.push_back(StreamStruct{d_filename, d_input});
    d_filename = name;
    d_input = Input(streamPtr);
    d_atBOL = true;
}

bool ScannerBase::popStream()
{
    d_input.close();

    if (d_streamStack.empty())
        return false;

    StreamStruct &top = d_streamStack.back();

    d_input =   top.pushedInput;
    d_filename = top.pushedName;
    d_streamStack.pop_back();

    return true;
}

// $insert lopImplementation
void ScannerBase::lopf__(size_t tail)
{
    tail = length() - tail;
    push(d_matched.substr(tail, std::string::npos));
    d_matched.resize(tail);
    d_atBOL = length() && d_matched.back() == '\n';
}


  // See the manual's section `Run-time operations' section for an explanation
  // of this member.
ScannerBase::ActionType__ ScannerBase::actionType__(size_t range)
{
    d_nextState = d_dfaBase__[d_state][range];

    if (d_nextState != -1)                  // transition is possible
        return ActionType__::CONTINUE;

    if (knownFinalState())                  // FINAL state reached
        return ActionType__::MATCH;         

    if (d_matched.size())
        return ActionType__::ECHO_FIRST;    // no match, echo the 1st char

    return range != s_rangeOfEOF__ ? 
                ActionType__::ECHO_CH 
            : 
                ActionType__::RETURN;
}

void ScannerBase::accept(size_t nChars)          // old name: less
{
    if (nChars < d_matched.size())
    {
        d_input.reRead(d_matched, nChars);
        d_matched.resize(nChars);
    }
}

void ScannerBase::setMatchedSize(size_t length)
{
    d_input.reRead(d_matched, length);  // reread the tail section
    d_matched.resize(length);           // return what's left
}

  // At this point a rule has been matched.  The next character is not part of
  // the matched rule and is sent back to the input.  The final match length
  // is determined, the index of the matched rule is determined, and then
  // d_atBOL is updated. Finally the rule's index is returned.
  // The numbers behind the finalPtr assignments are explained in the 
  // manual's `Run-time operations' section.
size_t ScannerBase::matched__(size_t ch)
{
    d_input.reRead(ch);

    FinalData *finalPtr;
                            
    if (not d_atBOL)                    // not at BOL
        finalPtr = &d_final.std;        // then use the std rule (3, 4)

                                        // at BOL
    else if (not available(d_final.std.rule))   // only a BOL rule avail.
            finalPtr = &d_final.bol;            // use the BOL rule (6)

    else if (not available(d_final.bol.rule)) // only a std rule is avail.
        finalPtr = &d_final.std;        // use the std rule (7)
        
    else if (                           // Both are available (8)
        d_final.bol.length !=           // check lengths of matched texts
        d_final.std.length              // unequal lengths, use the rule
    )                                   // having the longer match length
        finalPtr =              
            d_final.bol.length > d_final.std.length ?
                &d_final.bol
            :
                &d_final.std;

    else                            // lengths are equal: use 1st rule
        finalPtr = 
            d_final.bol.rule < d_final.std.rule ?
                &d_final.bol
            :
                &d_final.std;

    setMatchedSize(finalPtr->length);

    d_atBOL = d_matched.back() == '\n';


    return finalPtr->rule;
}

size_t ScannerBase::getRange__(int ch)       // using int to prevent casts
{
    return ch == AT_EOF ? as<size_t>(s_rangeOfEOF__) : s_ranges__[ch];
}

  // At this point d_nextState contains the next state and continuation is
  // possible. The just read char. is appended to d_match
void ScannerBase::continue__(int ch)
{
    d_state = d_nextState;

    if (ch != AT_EOF)
        d_matched += ch;
}

void ScannerBase::echoCh__(size_t ch)
{
    *d_out << as<char>(ch);
    d_atBOL = ch == '\n';
}


   // At this point there is no continuation. The last character is
   // pushed back into the input stream as well as all but the first char. in
   // the buffer. The first char. in the buffer is echoed to stderr. 
   // If there isn't any 1st char yet then the current char doesn't fit any
   // rules and that char is then echoed
void ScannerBase::echoFirst__(size_t ch)
{
    d_input.reRead(ch);
    d_input.reRead(d_matched, 1);
    echoCh__(d_matched[0]);
}

    // Update the rules associated with the current state, do this separately
    // for BOL and std rules.
    // If a rule was set, update the rule index and the current d_matched
    // length. 
void ScannerBase::updateFinals__()
{
    size_t len = d_matched.size();

    int const *rf = d_dfaBase__[d_state] + s_finIdx__;

    if (rf[0] != -1)        // update to the latest std rule
    {
        d_final.std = FinalData { as<size_t>(rf[0]), len };
    }

    if (rf[1] != -1)        // update to the latest bol rule
    {
        d_final.bol = FinalData { as<size_t>(rf[1]), len };
    }
}

void ScannerBase::reset__()
{
    d_final = Final{ 
                    FinalData{s_unavailable, 0}, 
                    FinalData {s_unavailable, 0} 
                };

    d_state = 0;
    d_return = true;

    if (!d_more)
        d_matched.clear();

    d_more = false;
}

int Scanner::executeAction__(size_t ruleIdx)
try
{
    switch (ruleIdx)
    {
        // $insert actions
        case 0:
        {
#line 8 "cmm.l"
            { return Parser::VOID; }
        }
        break;
        case 1:
        {
#line 9 "cmm.l"
            { return Parser::INT; }
        }
        break;
        case 2:
        {
#line 10 "cmm.l"
            { return Parser::INT8; }
        }
        break;
        case 3:
        {
#line 11 "cmm.l"
            { return Parser::INT16; }
        }
        break;
        case 4:
        {
#line 12 "cmm.l"
            { return Parser::INT32; }
        }
        break;
        case 5:
        {
#line 13 "cmm.l"
            { return Parser::INT64; }
        }
        break;
        case 6:
        {
#line 14 "cmm.l"
            { return Parser::UINT8; }
        }
        break;
        case 7:
        {
#line 15 "cmm.l"
            { return Parser::UINT16; }
        }
        break;
        case 8:
        {
#line 16 "cmm.l"
            { return Parser::UINT32; }
        }
        break;
        case 9:
        {
#line 17 "cmm.l"
            { return Parser::UINT64; }
        }
        break;
        case 10:
        {
#line 20 "cmm.l"
            {return Parser::FLAG_Z; }
        }
        break;
        case 11:
        {
#line 21 "cmm.l"
            {return Parser::FLAG_NZ; }
        }
        break;
        case 12:
        {
#line 22 "cmm.l"
            {return Parser::FLAG_C; }
        }
        break;
        case 13:
        {
#line 23 "cmm.l"
            {return Parser::FLAG_NC; }
        }
        break;
        case 14:
        {
#line 24 "cmm.l"
            {return Parser::FLAG_PO; }
        }
        break;
        case 15:
        {
#line 25 "cmm.l"
            {return Parser::FLAG_PE; }
        }
        break;
        case 16:
        {
#line 26 "cmm.l"
            {return Parser::FLAG_P; }
        }
        break;
        case 17:
        {
#line 27 "cmm.l"
            {return Parser::FLAG_M; }
        }
        break;
        case 18:
        {
#line 30 "cmm.l"
            { return Parser::NOP; }
        }
        break;
        case 19:
        {
#line 31 "cmm.l"
            { return Parser::DAA; }
        }
        break;
        case 20:
        {
#line 32 "cmm.l"
            { return Parser::LDI; }
        }
        break;
        case 21:
        {
#line 33 "cmm.l"
            { return Parser::CPI; }
        }
        break;
        case 22:
        {
#line 34 "cmm.l"
            { return Parser::INI; }
        }
        break;
        case 23:
        {
#line 35 "cmm.l"
            { return Parser::OUTI; }
        }
        break;
        case 24:
        {
#line 36 "cmm.l"
            { return Parser::LDD; }
        }
        break;
        case 25:
        {
#line 37 "cmm.l"
            { return Parser::CPD; }
        }
        break;
        case 26:
        {
#line 38 "cmm.l"
            { return Parser::IND; }
        }
        break;
        case 27:
        {
#line 39 "cmm.l"
            { return Parser::OUTD; }
        }
        break;
        case 28:
        {
#line 40 "cmm.l"
            { return Parser::LDIR; }
        }
        break;
        case 29:
        {
#line 41 "cmm.l"
            { return Parser::CPIR; }
        }
        break;
        case 30:
        {
#line 42 "cmm.l"
            { return Parser::INIR; }
        }
        break;
        case 31:
        {
#line 43 "cmm.l"
            { return Parser::OTIR; }
        }
        break;
        case 32:
        {
#line 44 "cmm.l"
            { return Parser::LDDR; }
        }
        break;
        case 33:
        {
#line 45 "cmm.l"
            { return Parser::CPDR; }
        }
        break;
        case 34:
        {
#line 46 "cmm.l"
            { return Parser::INDR; }
        }
        break;
        case 35:
        {
#line 47 "cmm.l"
            { return Parser::OTDR; }
        }
        break;
        case 36:
        {
#line 48 "cmm.l"
            { return Parser::IN; }
        }
        break;
        case 37:
        {
#line 49 "cmm.l"
            { return Parser::OUT; }
        }
        break;
        case 38:
        {
#line 50 "cmm.l"
            { return Parser::HALT; }
        }
        break;
        case 39:
        {
#line 53 "cmm.l"
            { return Parser::IF; }
        }
        break;
        case 40:
        {
#line 54 "cmm.l"
            { return Parser::WHILE; }
        }
        break;
        case 41:
        {
#line 55 "cmm.l"
            { return Parser::DO; }
        }
        break;
        case 42:
        {
#line 56 "cmm.l"
            { return Parser::EX; }
        }
        break;
        case 43:
        {
#line 57 "cmm.l"
            { return Parser::PUSH; }
        }
        break;
        case 44:
        {
#line 58 "cmm.l"
            { return Parser::POP; }
        }
        break;
        case 45:
        {
#line 59 "cmm.l"
            { return Parser::RETURN; }
        }
        break;
        case 46:
        {
#line 60 "cmm.l"
            { return Parser::CONST; }
        }
        break;
        case 47:
        {
#line 61 "cmm.l"
            { return Parser::ELSE; }
        }
        break;
        case 48:
        {
#line 62 "cmm.l"
            { return Parser::GOTO; }
        }
        break;
        case 49:
        {
#line 65 "cmm.l"
            { return Parser::REG_A; }
        }
        break;
        case 50:
        {
#line 66 "cmm.l"
            { return Parser::REG_A; }
        }
        break;
        case 51:
        {
#line 67 "cmm.l"
            { return Parser::REG_B; }
        }
        break;
        case 52:
        {
#line 68 "cmm.l"
            { return Parser::REG_B; }
        }
        break;
        case 53:
        {
#line 69 "cmm.l"
            { return Parser::REG_C; }
        }
        break;
        case 54:
        {
#line 70 "cmm.l"
            { return Parser::REG_C; }
        }
        break;
        case 55:
        {
#line 71 "cmm.l"
            { return Parser::REG_D; }
        }
        break;
        case 56:
        {
#line 72 "cmm.l"
            { return Parser::REG_D; }
        }
        break;
        case 57:
        {
#line 73 "cmm.l"
            { return Parser::REG_E; }
        }
        break;
        case 58:
        {
#line 74 "cmm.l"
            { return Parser::REG_E; }
        }
        break;
        case 59:
        {
#line 75 "cmm.l"
            { return Parser::REG_H; }
        }
        break;
        case 60:
        {
#line 76 "cmm.l"
            { return Parser::REG_H; }
        }
        break;
        case 61:
        {
#line 77 "cmm.l"
            { return Parser::REG_L; }
        }
        break;
        case 62:
        {
#line 78 "cmm.l"
            { return Parser::REG_L; }
        }
        break;
        case 63:
        {
#line 79 "cmm.l"
            { return Parser::REG_IXL; }
        }
        break;
        case 64:
        {
#line 80 "cmm.l"
            { return Parser::REG_IXH; }
        }
        break;
        case 65:
        {
#line 81 "cmm.l"
            { return Parser::REG_IYL; }
        }
        break;
        case 66:
        {
#line 82 "cmm.l"
            { return Parser::REG_IYH; }
        }
        break;
        case 67:
        {
#line 83 "cmm.l"
            { return Parser::REG_BC; }
        }
        break;
        case 68:
        {
#line 84 "cmm.l"
            { return Parser::REG_BC; }
        }
        break;
        case 69:
        {
#line 85 "cmm.l"
            { return Parser::REG_DE; }
        }
        break;
        case 70:
        {
#line 86 "cmm.l"
            { return Parser::REG_DE; }
        }
        break;
        case 71:
        {
#line 87 "cmm.l"
            { return Parser::REG_HL; }
        }
        break;
        case 72:
        {
#line 88 "cmm.l"
            { return Parser::REG_HL; }
        }
        break;
        case 73:
        {
#line 89 "cmm.l"
            { return Parser::REG_IX; }
        }
        break;
        case 74:
        {
#line 90 "cmm.l"
            { return Parser::REG_IY; }
        }
        break;
        case 75:
        {
#line 91 "cmm.l"
            { return Parser::REG_SP; }
        }
        break;
        case 76:
        {
#line 94 "cmm.l"
            {
                std::string s = matched();
                if (preprocessor)
                {
                    if (s == "counter") return Parser::M_COUNTER;
                    *d_val = s;
                    return Parser::ID;
                }
                auto c = consts->find(s);
                if (c != consts->end())
                {
                    const Const& co = c->second;
                    switch(co.type)
                    {
                        case Const::ctNumber:
                        *d_val = co.n;
                        return Parser::NUMBER;
                        break;
                        case Const::ctString:
                        *d_val = co.s;
                        return Parser::CALC;
                        break;
                        default:
                        throw "Unkown constant type";
                    }
                }
                *d_val = s;
                return Parser::ID;
            }
        }
        break;
        case 77:
        case 78:
        case 79:
        {
#line 126 "cmm.l"
            {
                std::string str = matched();
                const char* end = "";
                *d_val = std::strtoll(str.c_str(), (char**)&end, 0);
                if (*end != 0) throw "Incorrect number";
                return Parser::NUMBER;
            }
        }
        break;
        case 80:
        {
#line 135 "cmm.l"
            { return Parser::OP_INC; }
        }
        break;
        case 81:
        {
#line 136 "cmm.l"
            { return Parser::OP_DEC; }
        }
        break;
        case 82:
        {
#line 137 "cmm.l"
            { return Parser::OP_SADD; }
        }
        break;
        case 83:
        {
#line 138 "cmm.l"
            { return Parser::OP_SADC; }
        }
        break;
        case 84:
        {
#line 139 "cmm.l"
            { return '?'; }
        }
        break;
        case 85:
        {
#line 140 "cmm.l"
            { return Parser::OP_SSUB; }
        }
        break;
        case 86:
        {
#line 141 "cmm.l"
            { return Parser::OP_SSBC; }
        }
        break;
        case 87:
        {
#line 142 "cmm.l"
            { return Parser::OP_SOR; }
        }
        break;
        case 88:
        {
#line 143 "cmm.l"
            { return Parser::OP_SAND; }
        }
        break;
        case 89:
        {
#line 144 "cmm.l"
            { return Parser::OP_SXOR; }
        }
        break;
        case 90:
        {
#line 145 "cmm.l"
            { return Parser::OP_EQ; }
        }
        break;
        case 91:
        {
#line 146 "cmm.l"
            { return Parser::OP_NE; }
        }
        break;
        case 92:
        {
#line 147 "cmm.l"
            { return Parser::OP_LE; }
        }
        break;
        case 93:
        {
#line 148 "cmm.l"
            { return Parser::OP_GE; }
        }
        break;
        case 94:
        {
#line 149 "cmm.l"
            { return '<'; }
        }
        break;
        case 95:
        {
#line 150 "cmm.l"
            { return '>'; }
        }
        break;
        case 96:
        {
#line 151 "cmm.l"
            { return Parser::OP_SHL; }
        }
        break;
        case 97:
        {
#line 152 "cmm.l"
            { return Parser::OP_SHR; }
        }
        break;
        case 98:
        {
#line 153 "cmm.l"
            { return Parser::OP_LOR; }
        }
        break;
        case 99:
        {
#line 154 "cmm.l"
            { return Parser::OP_LAND; }
        }
        break;
        case 100:
        {
#line 155 "cmm.l"
            { return '!'; }
        }
        break;
        case 101:
        {
#line 156 "cmm.l"
            { return ';'; }
        }
        break;
        case 102:
        {
#line 157 "cmm.l"
            { return '('; }
        }
        break;
        case 103:
        {
#line 158 "cmm.l"
            { return ')'; }
        }
        break;
        case 104:
        {
#line 159 "cmm.l"
            { return '{'; }
        }
        break;
        case 105:
        {
#line 160 "cmm.l"
            { return '}'; }
        }
        break;
        case 106:
        {
#line 161 "cmm.l"
            { return '['; }
        }
        break;
        case 107:
        {
#line 162 "cmm.l"
            { return ']'; }
        }
        break;
        case 108:
        {
#line 163 "cmm.l"
            { return '='; }
        }
        break;
        case 109:
        {
#line 164 "cmm.l"
            { return '*'; }
        }
        break;
        case 110:
        {
#line 165 "cmm.l"
            { return '+'; }
        }
        break;
        case 111:
        {
#line 166 "cmm.l"
            { return '-'; }
        }
        break;
        case 112:
        {
#line 167 "cmm.l"
            { return '/'; }
        }
        break;
        case 113:
        {
#line 168 "cmm.l"
            { return '~'; }
        }
        break;
        case 114:
        {
#line 169 "cmm.l"
            { return ','; }
        }
        break;
        case 115:
        {
#line 170 "cmm.l"
            { return '&'; }
        }
        break;
        case 116:
        {
#line 171 "cmm.l"
            { return '|'; }
        }
        break;
        case 117:
        {
#line 172 "cmm.l"
            { return '^'; }
        }
        break;
        case 118:
        {
#line 173 "cmm.l"
            { return '%'; }
        }
        break;
        case 119:
        {
#line 174 "cmm.l"
            { return '#'; }
        }
        break;
        case 120:
        {
#line 175 "cmm.l"
            { return ':'; }
        }
        break;
        case 121:
        {
#line 177 "cmm.l"
            { return Parser::OP_SSHL; }
        }
        break;
        case 122:
        {
#line 178 "cmm.l"
            { return Parser::OP_SSHR; }
        }
        break;
        case 123:
        {
#line 179 "cmm.l"
            { return Parser::OP_SROL; }
        }
        break;
        case 124:
        {
#line 180 "cmm.l"
            { return Parser::OP_SROR; }
        }
        break;
        case 125:
        {
#line 181 "cmm.l"
            { return Parser::OP_SCSHL; }
        }
        break;
        case 126:
        {
#line 182 "cmm.l"
            { return Parser::OP_SCSHR; }
        }
        break;
        case 128:
        {
#line 189 "cmm.l"
            {
                more();
                begin(StartCondition__::COMMENT);
            }
        }
        break;
        case 129:
        {
#line 194 "cmm.l"
            {
                
                begin(StartCondition__::INITIAL);
            }
        }
        break;
        case 130:
        {
#line 199 "cmm.l"
            {
                more();
            }
        }
        break;
        case 131:
        {
#line 206 "cmm.l"
            {
                more();
                begin(StartCondition__::CHAR);
            }
        }
        break;
        case 132:
        {
#line 211 "cmm.l"
            {
                begin(StartCondition__::INITIAL);
                std::string s = matched();
                if (s.size() != 3) throw "Некорректная константа";
                *d_val = (long long int)(uint8_t)s[1];
                return Parser::NUMBER;
            }
        }
        break;
        case 133:
        {
#line 219 "cmm.l"
            {
                more();
            }
        }
        break;
        case 134:
        {
#line 223 "cmm.l"
            {
                throw "Константа не закрыта по перевода строки";
            }
        }
        break;
        case 135:
        {
#line 230 "cmm.l"
            {
                more();
                begin(StartCondition__::STRING);
            }
        }
        break;
        case 136:
        {
#line 235 "cmm.l"
            {
                begin(StartCondition__::INITIAL);
                std::string str = matched();
                
                if (str.size() >= 2)
                {
                    char* s = (char*)str.data() + 1;
                    char* se = (char*)str.data() + (str.size() - 1);
                    char* d = (char*)str.data();
                    while(s != se)
                    {
                        char c = *s++;
                        if (c == '\\')
                        {
                            if (s == se) throw "Unterminated string";
                            c = *s++;
                            if (c == 'n') c = '\n';
                            else if(c == 'r') c = '\r';
                            else if(c == '\\') c = '\\';
                            else if(c == '\'') c = '\'';
                            else if(c == '"') c = '"';
                            else if(c == 'x')
                            {
                                if (s == se) throw "Unterminated string";
                                char c1 = *s++;
                                if (c1 >= '0' && c1 <= '9') c1 -= '0';
                                else if (c1 >= 'a' && c1 <= 'f') c1 -= 'a' - 10;
                                else if (c1 >= 'A' && c1 <= 'F') c1 -= 'A' - 10;
                                else throw "Unknown esc";
                                if (s == se) throw "Unterminated string";
                                char c2 = *s++;
                                if (c2>='0' && c2<='9') c2-='0';
                                else if (c2 >= 'a' && c2 <= 'f') c2 -= 'a' - 10;
                                else if (c2 >= 'A' && c2 <= 'F') c2 -= 'A' - 10;
                                else throw "Unknown esc";
                                c = (c1 << 4) + c2;
                            }
                            else
                            {
                                throw "Unknown esc";
                            }
                        }
                        *d++ = c;
                    }
                    str.resize(d - str.data());
                }
                *d_val = str;
                return Parser::STRING;
            }
        }
        break;
        case 137:
        {
#line 285 "cmm.l"
            {
                more();
            }
        }
        break;
        case 138:
        {
#line 289 "cmm.l"
            {
                throw "Строка не закрыта по перевода строки";
            }
        }
        break;
        case 139:
        {
#line 294 "cmm.l"
            { return 0; }
        }
        break;
        case 140:
        {
#line 295 "cmm.l"
            {}
        }
        break;
        case 141:
        {
#line 296 "cmm.l"
            {
                onNextLine(lineNr(), getLine(lineNr()));
                if (preprocessor) return Parser::M_EOL;
            }
        }
        break;
        case 142:
        {
#line 300 "cmm.l"
            { throw "Некорректный символ"; }
        }
        break;
        case 127:
        {
#line 185 "cmm.l"
            lopf__(1);
            {
                
            }
        }
        break;
    }
    noReturn__();
    return 0;
}
catch (Leave__ value)
{
    return static_cast<int>(value);
}

int Scanner::lex__()
{
    reset__();
    preCode();

    while (true)
    {
        size_t ch = get__();                // fetch next char
        size_t range = getRange__(ch);      // determine the range

        updateFinals__();                    // update the state's Final info

        switch (actionType__(range))        // determine the action
        {
            case ActionType__::CONTINUE:
                continue__(ch);
            continue;

            case ActionType__::MATCH:
            {
                d_token__ = executeAction__(matched__(ch));
                if (return__())
                {
                    print();
                    postCode(PostEnum__::RETURN);
                    return d_token__;
                }
                break;
            }

            case ActionType__::ECHO_FIRST:
                echoFirst__(ch);
            break;

            case ActionType__::ECHO_CH:
                echoCh__(ch);
            break;

            case ActionType__::RETURN:
                if (!popStream())
                {
                     postCode(PostEnum__::END);
                     return 0;
                }
                postCode(PostEnum__::POP);
             continue;
        } // switch

        postCode(PostEnum__::WIP);

        reset__();
        preCode();
    } // while
}

void ScannerBase::print__() const
{
}


