// Generated by Bisonc++ V6.01.00 on Tue, 12 Nov 2019 12:26:20 +0300

// base/comment

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token is Reserved__::UNDETERMINED__, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on errTok__
// which is applied. In this errTok__ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
//      }

// base/declarations
// $insert debugincludes
#include <iostream>
#include <sstream>
#include <string>
#include <iomanip>
#include <unordered_map>

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum Reserved__
    {
        UNDETERMINED__   = -2,
        EOF__            = -1,
        errTok__         = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    enum StateTransition
    {
        ACCEPT__   = 0,     // `ACCEPT' TRANSITION
    };

    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            StateType d_type;
            int       d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
        };
    };

    // $insert staticdata
    
    enum                        // size to expand the state-stack with when
    {                           // full
        STACK_EXPANSION__ = 10
    };

// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {330, 1}, // 1: startrule ->  stmts
     {331, 1}, // 2: stmts ->  anyeols
     {331, 3}, // 3: stmts ->  anyeols stmt stmts
     {331, 2}, // 4: stmts (errTok__) ->  errTok__ EOF__
     {333, 2}, // 5: stmt (EOL) ->  expr EOL
     {333, 2}, // 6: stmt (EOL) ->  identify EOL
     {333, 4}, // 7: stmt (OP_ASSIGN) ->  identify OP_ASSIGN expr EOL
     {333, 3}, // 8: stmt (RETURN) ->  RETURN expr EOL
     {333, 2}, // 9: stmt (BREAK) ->  BREAK EOL
     {333, 2}, // 10: stmt (CONTINUE) ->  CONTINUE EOL
     {333, 2}, // 11: stmt (PASS) ->  PASS EOL
     {333, 3}, // 12: stmt (CLASS) ->  CLASS name indented
     {333, 3}, // 13: stmt (CONCEPT) ->  CONCEPT name indented
     {333, 3}, // 14: stmt (DEF) ->  DEF signature indented
     {333, 2}, // 15: stmt (FOREVER) ->  FOREVER indented
     {333, 3}, // 16: stmt (WHILE) ->  WHILE expr indented
     {333, 5}, // 17: stmt (FOR) ->  FOR identify IN expr indented
     {333, 4}, // 18: stmt (IF) ->  IF expr indented elsestmts
     {333, 4}, // 19: stmt (SWITCH) ->  SWITCH expr EOL casestmts
     {333, 4}, // 20: stmt (MATCH) ->  MATCH expr EOL withstmts
     {334, 0}, // 21: elsestmts ->  <empty>
     {334, 2}, // 22: elsestmts (ELSE) ->  ELSE indented
     {334, 4}, // 23: elsestmts (ELIF) ->  ELIF expr indented elsestmts
     {335, 0}, // 24: casestmts ->  <empty>
     {335, 2}, // 25: casestmts (DEFAULT) ->  DEFAULT indented
     {335, 4}, // 26: casestmts (CASE) ->  CASE expr indented casestmts
     {336, 0}, // 27: withstmts ->  <empty>
     {336, 6}, // 28: withstmts (WITH) ->  WITH expr AS identifier indented withstmts
     {337, 4}, // 29: indented (INDENT) ->  eols INDENT stmts dedent
     {339, 2}, // 30: dedent (DEDENT) ->  DEDENT EOL
     {332, 0}, // 31: anyeols ->  <empty>
     {332, 2}, // 32: anyeols (EOL) ->  EOL anyeols
     {338, 1}, // 33: eols (EOL) ->  EOL
     {338, 2}, // 34: eols (EOL) ->  EOL eols
     {340, 0}, // 35: anylist ->  <empty>
     {340, 1}, // 36: anylist ->  list
     {341, 3}, // 37: list (COMMA) ->  list COMMA expr
     {341, 1}, // 38: list ->  expr
     {342, 0}, // 39: parameters ->  <empty>
     {342, 1}, // 40: parameters ->  paramlist
     {343, 3}, // 41: paramlist (COMMA) ->  paramlist COMMA identify
     {343, 1}, // 42: paramlist ->  identify
     {344, 1}, // 43: name ->  identifier
     {344, 4}, // 44: name (LEFT_BRACKET) ->  identifier LEFT_BRACKET parameters RIGHT_BRACKET
     {345, 3}, // 45: identify (COLON) ->  identifier COLON expr
     {346, 6}, // 46: signature (LEFT_PAR) ->  identifier LEFT_PAR parameters RIGHT_PAR COLON expr
     {347, 1}, // 47: expr ->  lexical_error
     {347, 1}, // 48: expr ->  identifier
     {347, 1}, // 49: expr ->  boolean
     {347, 1}, // 50: expr ->  number
     {347, 1}, // 51: expr ->  char
     {347, 1}, // 52: expr ->  string
     {347, 3}, // 53: expr (LEFT_PAR) ->  LEFT_PAR expr RIGHT_PAR
     {347, 3}, // 54: expr (DOT) ->  expr DOT identifier
     {347, 4}, // 55: expr (LEFT_BRACKET) ->  expr LEFT_BRACKET anylist RIGHT_BRACKET
     {347, 4}, // 56: expr (LEFT_PAR) ->  expr LEFT_PAR anylist RIGHT_PAR
     {347, 3}, // 57: expr (OP_ASSIGN) ->  expr OP_ASSIGN expr
     {347, 3}, // 58: expr (RANGE) ->  expr RANGE expr
     {347, 3}, // 59: expr (COND_OR) ->  expr COND_OR expr
     {347, 3}, // 60: expr (COND_AND) ->  expr COND_AND expr
     {347, 3}, // 61: expr (OP_COMPARE) ->  expr OP_COMPARE expr
     {347, 3}, // 62: expr (OR) ->  expr OR expr
     {347, 3}, // 63: expr (XOR) ->  expr XOR expr
     {347, 3}, // 64: expr (AND) ->  expr AND expr
     {347, 3}, // 65: expr (OP_SHIFT) ->  expr OP_SHIFT expr
     {347, 3}, // 66: expr (OP_TERM) ->  expr OP_TERM expr
     {347, 3}, // 67: expr (OP_FACTOR) ->  expr OP_FACTOR expr
     {347, 3}, // 68: expr (POW) ->  expr POW expr
     {347, 2}, // 69: expr (OP_UNARY) ->  OP_UNARY expr
     {347, 2}, // 70: expr (OP_UNARY) ->  OP_TERM expr
     {348, 1}, // 71: lexical_error (ERR_CHAR) ->  ERR_CHAR
     {348, 1}, // 72: lexical_error (ERR_STRING) ->  ERR_STRING
     {348, 1}, // 73: lexical_error (UNKNOWN_CHAR) ->  UNKNOWN_CHAR
     {349, 1}, // 74: identifier (IDENTIFIER) ->  IDENTIFIER
     {350, 1}, // 75: boolean (BOOLEAN) ->  BOOLEAN
     {351, 1}, // 76: number (NUMBER) ->  NUMBER
     {352, 1}, // 77: char (CHAR) ->  CHAR
     {353, 1}, // 78: string (STRING) ->  STRING
     {354, 1}, // 79: startrule_$ ->  startrule
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { ERR_REQ_DEF}, {   6} },             
    { {         330}, {   1} }, // startrule
    { {         331}, {   2} }, // stmts    
    { {         332}, {   3} }, // anyeols  
    { {    errTok__}, {   4} }, // errTok__ 
    { {         283}, {   5} }, // EOL      
    { {           0}, { -31} },             
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {        2} }, 
    { {     EOF__}, { ACCEPT__} }, 
    { {         0}, {        0} }, 
};

SR__ s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_3[] =
{
    { { REQ_DEF}, { 34} },                 
    { {     333}, {  6} }, // stmt         
    { {     347}, {  7} }, // expr         
    { {     345}, {  8} }, // identify     
    { {     293}, {  9} }, // RETURN       
    { {     294}, { 10} }, // BREAK        
    { {     295}, { 11} }, // CONTINUE     
    { {     296}, { 12} }, // PASS         
    { {     290}, { 13} }, // CLASS        
    { {     291}, { 14} }, // CONCEPT      
    { {     292}, { 15} }, // DEF          
    { {     297}, { 16} }, // FOREVER      
    { {     298}, { 17} }, // WHILE        
    { {     299}, { 18} }, // FOR          
    { {     301}, { 19} }, // IF           
    { {     304}, { 20} }, // SWITCH       
    { {     306}, { 21} }, // MATCH        
    { {     348}, { 22} }, // lexical_error
    { {     349}, { 23} }, // identifier   
    { {     350}, { 24} }, // boolean      
    { {     351}, { 25} }, // number       
    { {     352}, { 26} }, // char         
    { {     353}, { 27} }, // string       
    { {     324}, { 28} }, // LEFT_PAR     
    { {     323}, { 29} }, // OP_UNARY     
    { {     320}, { 30} }, // OP_TERM      
    { {     287}, { 31} }, // ERR_CHAR     
    { {     288}, { 32} }, // ERR_STRING   
    { {     289}, { 33} }, // UNKNOWN_CHAR 
    { {     278}, { 34} }, // IDENTIFIER   
    { {     279}, { 35} }, // BOOLEAN      
    { {     280}, { 36} }, // NUMBER       
    { {     281}, { 37} }, // CHAR         
    { {     282}, { 38} }, // STRING       
    { {       0}, { -2} },                 
};

SR__ s_4[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {     EOF__}, { 39} }, // EOF__
    { {         0}, {  0} },         
};

SR__ s_5[] =
{
    { { REQ_DEF}, {   3} },           
    { {     332}, {  40} }, // anyeols
    { {     283}, {   5} }, // EOL    
    { {       0}, { -31} },           
};

SR__ s_6[] =
{
    { { ERR_REQ_DEF}, {   5} },            
    { {         331}, {  41} }, // stmts   
    { {         332}, {   3} }, // anyeols 
    { {    errTok__}, {   4} }, // errTok__
    { {         283}, {   5} }, // EOL     
    { {           0}, { -31} },            
};

SR__ s_7[] =
{
    { { REQ_TOKEN}, { 17} },                
    { {       283}, { 42} }, // EOL         
    { {       329}, { 43} }, // DOT         
    { {       326}, { 44} }, // LEFT_BRACKET
    { {       324}, { 45} }, // LEFT_PAR    
    { {       310}, { 46} }, // OP_ASSIGN   
    { {       312}, { 47} }, // RANGE       
    { {       313}, { 48} }, // COND_OR     
    { {       314}, { 49} }, // COND_AND    
    { {       315}, { 50} }, // OP_COMPARE  
    { {       316}, { 51} }, // OR          
    { {       317}, { 52} }, // XOR         
    { {       318}, { 53} }, // AND         
    { {       319}, { 54} }, // OP_SHIFT    
    { {       320}, { 55} }, // OP_TERM     
    { {       321}, { 56} }, // OP_FACTOR   
    { {       322}, { 57} }, // POW         
    { {         0}, {  0} },                
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, {  3} },             
    { {       283}, { 58} }, // EOL      
    { {       310}, { 59} }, // OP_ASSIGN
    { {         0}, {  0} },             
};

SR__ s_9[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 60} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       283}, { 62} }, // EOL
    { {         0}, {  0} },       
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       283}, { 63} }, // EOL
    { {         0}, {  0} },       
};

SR__ s_12[] =
{
    { { REQ_TOKEN}, {  2} },       
    { {       283}, { 64} }, // EOL
    { {         0}, {  0} },       
};

SR__ s_13[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       344}, { 65} }, // name      
    { {       349}, { 66} }, // identifier
    { {       278}, { 34} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       344}, { 67} }, // name      
    { {       349}, { 66} }, // identifier
    { {       278}, { 34} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_15[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       346}, { 68} }, // signature 
    { {       349}, { 69} }, // identifier
    { {       278}, { 34} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {  4} },            
    { {       337}, { 70} }, // indented
    { {       338}, { 71} }, // eols    
    { {       283}, { 72} }, // EOL     
    { {         0}, {  0} },            
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 73} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_18[] =
{
    { { REQ_TOKEN}, {  4} },              
    { {       345}, { 74} }, // identify  
    { {       349}, { 75} }, // identifier
    { {       278}, { 34} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_19[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 76} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_20[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 77} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_21[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 78} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_23[] =
{
    { { REQ_DEF}, {   2} },         
    { {     311}, {  79} }, // COLON
    { {       0}, { -48} },         
};

SR__ s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_25[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_26[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_28[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 80} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_29[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 81} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_30[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 82} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_31[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_33[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_39[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ s_41[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_42[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_43[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       349}, { 83} }, // identifier
    { {       278}, { 34} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_44[] =
{
    { { REQ_DEF}, {  21} },                 
    { {     340}, {  84} }, // anylist      
    { {     341}, {  85} }, // list         
    { {     347}, {  86} }, // expr         
    { {     348}, {  22} }, // lexical_error
    { {     349}, {  61} }, // identifier   
    { {     350}, {  24} }, // boolean      
    { {     351}, {  25} }, // number       
    { {     352}, {  26} }, // char         
    { {     353}, {  27} }, // string       
    { {     324}, {  28} }, // LEFT_PAR     
    { {     323}, {  29} }, // OP_UNARY     
    { {     320}, {  30} }, // OP_TERM      
    { {     287}, {  31} }, // ERR_CHAR     
    { {     288}, {  32} }, // ERR_STRING   
    { {     289}, {  33} }, // UNKNOWN_CHAR 
    { {     278}, {  34} }, // IDENTIFIER   
    { {     279}, {  35} }, // BOOLEAN      
    { {     280}, {  36} }, // NUMBER       
    { {     281}, {  37} }, // CHAR         
    { {     282}, {  38} }, // STRING       
    { {       0}, { -35} },                 
};

SR__ s_45[] =
{
    { { REQ_DEF}, {  21} },                 
    { {     340}, {  87} }, // anylist      
    { {     341}, {  85} }, // list         
    { {     347}, {  86} }, // expr         
    { {     348}, {  22} }, // lexical_error
    { {     349}, {  61} }, // identifier   
    { {     350}, {  24} }, // boolean      
    { {     351}, {  25} }, // number       
    { {     352}, {  26} }, // char         
    { {     353}, {  27} }, // string       
    { {     324}, {  28} }, // LEFT_PAR     
    { {     323}, {  29} }, // OP_UNARY     
    { {     320}, {  30} }, // OP_TERM      
    { {     287}, {  31} }, // ERR_CHAR     
    { {     288}, {  32} }, // ERR_STRING   
    { {     289}, {  33} }, // UNKNOWN_CHAR 
    { {     278}, {  34} }, // IDENTIFIER   
    { {     279}, {  35} }, // BOOLEAN      
    { {     280}, {  36} }, // NUMBER       
    { {     281}, {  37} }, // CHAR         
    { {     282}, {  38} }, // STRING       
    { {       0}, { -35} },                 
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 88} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 89} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_48[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 90} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 91} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 92} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 93} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 94} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 95} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 96} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 97} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 98} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, { 19} },                 
    { {       347}, { 99} }, // expr         
    { {       348}, { 22} }, // lexical_error
    { {       349}, { 61} }, // identifier   
    { {       350}, { 24} }, // boolean      
    { {       351}, { 25} }, // number       
    { {       352}, { 26} }, // char         
    { {       353}, { 27} }, // string       
    { {       324}, { 28} }, // LEFT_PAR     
    { {       323}, { 29} }, // OP_UNARY     
    { {       320}, { 30} }, // OP_TERM      
    { {       287}, { 31} }, // ERR_CHAR     
    { {       288}, { 32} }, // ERR_STRING   
    { {       289}, { 33} }, // UNKNOWN_CHAR 
    { {       278}, { 34} }, // IDENTIFIER   
    { {       279}, { 35} }, // BOOLEAN      
    { {       280}, { 36} }, // NUMBER       
    { {       281}, { 37} }, // CHAR         
    { {       282}, { 38} }, // STRING       
    { {         0}, {  0} },                 
};

SR__ s_58[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_59[] =
{
    { { REQ_TOKEN}, {  19} },                 
    { {       347}, { 100} }, // expr         
    { {       348}, {  22} }, // lexical_error
    { {       349}, {  61} }, // identifier   
    { {       350}, {  24} }, // boolean      
    { {       351}, {  25} }, // number       
    { {       352}, {  26} }, // char         
    { {       353}, {  27} }, // string       
    { {       324}, {  28} }, // LEFT_PAR     
    { {       323}, {  29} }, // OP_UNARY     
    { {       320}, {  30} }, // OP_TERM      
    { {       287}, {  31} }, // ERR_CHAR     
    { {       288}, {  32} }, // ERR_STRING   
    { {       289}, {  33} }, // UNKNOWN_CHAR 
    { {       278}, {  34} }, // IDENTIFIER   
    { {       279}, {  35} }, // BOOLEAN      
    { {       280}, {  36} }, // NUMBER       
    { {       281}, {  37} }, // CHAR         
    { {       282}, {  38} }, // STRING       
    { {         0}, {   0} },                 
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, {  17} },                
    { {       283}, { 101} }, // EOL         
    { {       329}, {  43} }, // DOT         
    { {       326}, {  44} }, // LEFT_BRACKET
    { {       324}, {  45} }, // LEFT_PAR    
    { {       310}, {  46} }, // OP_ASSIGN   
    { {       312}, {  47} }, // RANGE       
    { {       313}, {  48} }, // COND_OR     
    { {       314}, {  49} }, // COND_AND    
    { {       315}, {  50} }, // OP_COMPARE  
    { {       316}, {  51} }, // OR          
    { {       317}, {  52} }, // XOR         
    { {       318}, {  53} }, // AND         
    { {       319}, {  54} }, // OP_SHIFT    
    { {       320}, {  55} }, // OP_TERM     
    { {       321}, {  56} }, // OP_FACTOR   
    { {       322}, {  57} }, // POW         
    { {         0}, {   0} },                
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_62[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_64[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_65[] =
{
    { { REQ_TOKEN}, {   4} },            
    { {       337}, { 102} }, // indented
    { {       338}, {  71} }, // eols    
    { {       283}, {  72} }, // EOL     
    { {         0}, {   0} },            
};

SR__ s_66[] =
{
    { { REQ_DEF}, {   2} },                
    { {     326}, { 103} }, // LEFT_BRACKET
    { {       0}, { -43} },                
};

SR__ s_67[] =
{
    { { REQ_TOKEN}, {   4} },            
    { {       337}, { 104} }, // indented
    { {       338}, {  71} }, // eols    
    { {       283}, {  72} }, // EOL     
    { {         0}, {   0} },            
};

SR__ s_68[] =
{
    { { REQ_TOKEN}, {   4} },            
    { {       337}, { 105} }, // indented
    { {       338}, {  71} }, // eols    
    { {       283}, {  72} }, // EOL     
    { {         0}, {   0} },            
};

SR__ s_69[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       324}, { 106} }, // LEFT_PAR
    { {         0}, {   0} },            
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_71[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       284}, { 107} }, // INDENT
    { {         0}, {   0} },          
};

SR__ s_72[] =
{
    { { REQ_DEF}, {   3} },        
    { {     338}, { 108} }, // eols
    { {     283}, {  72} }, // EOL 
    { {       0}, { -33} },        
};

SR__ s_73[] =
{
    { { REQ_TOKEN}, {  19} },                
    { {       337}, { 109} }, // indented    
    { {       329}, {  43} }, // DOT         
    { {       326}, {  44} }, // LEFT_BRACKET
    { {       324}, {  45} }, // LEFT_PAR    
    { {       310}, {  46} }, // OP_ASSIGN   
    { {       312}, {  47} }, // RANGE       
    { {       313}, {  48} }, // COND_OR     
    { {       314}, {  49} }, // COND_AND    
    { {       315}, {  50} }, // OP_COMPARE  
    { {       316}, {  51} }, // OR          
    { {       317}, {  52} }, // XOR         
    { {       318}, {  53} }, // AND         
    { {       319}, {  54} }, // OP_SHIFT    
    { {       320}, {  55} }, // OP_TERM     
    { {       321}, {  56} }, // OP_FACTOR   
    { {       322}, {  57} }, // POW         
    { {       338}, {  71} }, // eols        
    { {       283}, {  72} }, // EOL         
    { {         0}, {   0} },                
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, {   2} },      
    { {       300}, { 110} }, // IN
    { {         0}, {   0} },      
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       311}, { 79} }, // COLON
    { {         0}, {  0} },         
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {  19} },                
    { {       337}, { 111} }, // indented    
    { {       329}, {  43} }, // DOT         
    { {       326}, {  44} }, // LEFT_BRACKET
    { {       324}, {  45} }, // LEFT_PAR    
    { {       310}, {  46} }, // OP_ASSIGN   
    { {       312}, {  47} }, // RANGE       
    { {       313}, {  48} }, // COND_OR     
    { {       314}, {  49} }, // COND_AND    
    { {       315}, {  50} }, // OP_COMPARE  
    { {       316}, {  51} }, // OR          
    { {       317}, {  52} }, // XOR         
    { {       318}, {  53} }, // AND         
    { {       319}, {  54} }, // OP_SHIFT    
    { {       320}, {  55} }, // OP_TERM     
    { {       321}, {  56} }, // OP_FACTOR   
    { {       322}, {  57} }, // POW         
    { {       338}, {  71} }, // eols        
    { {       283}, {  72} }, // EOL         
    { {         0}, {   0} },                
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {  17} },                
    { {       283}, { 112} }, // EOL         
    { {       329}, {  43} }, // DOT         
    { {       326}, {  44} }, // LEFT_BRACKET
    { {       324}, {  45} }, // LEFT_PAR    
    { {       310}, {  46} }, // OP_ASSIGN   
    { {       312}, {  47} }, // RANGE       
    { {       313}, {  48} }, // COND_OR     
    { {       314}, {  49} }, // COND_AND    
    { {       315}, {  50} }, // OP_COMPARE  
    { {       316}, {  51} }, // OR          
    { {       317}, {  52} }, // XOR         
    { {       318}, {  53} }, // AND         
    { {       319}, {  54} }, // OP_SHIFT    
    { {       320}, {  55} }, // OP_TERM     
    { {       321}, {  56} }, // OP_FACTOR   
    { {       322}, {  57} }, // POW         
    { {         0}, {   0} },                
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, {  17} },                
    { {       283}, { 113} }, // EOL         
    { {       329}, {  43} }, // DOT         
    { {       326}, {  44} }, // LEFT_BRACKET
    { {       324}, {  45} }, // LEFT_PAR    
    { {       310}, {  46} }, // OP_ASSIGN   
    { {       312}, {  47} }, // RANGE       
    { {       313}, {  48} }, // COND_OR     
    { {       314}, {  49} }, // COND_AND    
    { {       315}, {  50} }, // OP_COMPARE  
    { {       316}, {  51} }, // OR          
    { {       317}, {  52} }, // XOR         
    { {       318}, {  53} }, // AND         
    { {       319}, {  54} }, // OP_SHIFT    
    { {       320}, {  55} }, // OP_TERM     
    { {       321}, {  56} }, // OP_FACTOR   
    { {       322}, {  57} }, // POW         
    { {         0}, {   0} },                
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, {  19} },                 
    { {       347}, { 114} }, // expr         
    { {       348}, {  22} }, // lexical_error
    { {       349}, {  61} }, // identifier   
    { {       350}, {  24} }, // boolean      
    { {       351}, {  25} }, // number       
    { {       352}, {  26} }, // char         
    { {       353}, {  27} }, // string       
    { {       324}, {  28} }, // LEFT_PAR     
    { {       323}, {  29} }, // OP_UNARY     
    { {       320}, {  30} }, // OP_TERM      
    { {       287}, {  31} }, // ERR_CHAR     
    { {       288}, {  32} }, // ERR_STRING   
    { {       289}, {  33} }, // UNKNOWN_CHAR 
    { {       278}, {  34} }, // IDENTIFIER   
    { {       279}, {  35} }, // BOOLEAN      
    { {       280}, {  36} }, // NUMBER       
    { {       281}, {  37} }, // CHAR         
    { {       282}, {  38} }, // STRING       
    { {         0}, {   0} },                 
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {  17} },                
    { {       325}, { 115} }, // RIGHT_PAR   
    { {       329}, {  43} }, // DOT         
    { {       326}, {  44} }, // LEFT_BRACKET
    { {       324}, {  45} }, // LEFT_PAR    
    { {       310}, {  46} }, // OP_ASSIGN   
    { {       312}, {  47} }, // RANGE       
    { {       313}, {  48} }, // COND_OR     
    { {       314}, {  49} }, // COND_AND    
    { {       315}, {  50} }, // OP_COMPARE  
    { {       316}, {  51} }, // OR          
    { {       317}, {  52} }, // XOR         
    { {       318}, {  53} }, // AND         
    { {       319}, {  54} }, // OP_SHIFT    
    { {       320}, {  55} }, // OP_TERM     
    { {       321}, {  56} }, // OP_FACTOR   
    { {       322}, {  57} }, // POW         
    { {         0}, {   0} },                
};

SR__ s_81[] =
{
    { { REQ_DEF}, {   4} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {       0}, { -69} },                
};

SR__ s_82[] =
{
    { { REQ_DEF}, {   4} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {       0}, { -70} },                
};

SR__ s_83[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_84[] =
{
    { { REQ_TOKEN}, {   2} },                 
    { {       327}, { 116} }, // RIGHT_BRACKET
    { {         0}, {   0} },                 
};

SR__ s_85[] =
{
    { { REQ_DEF}, {   2} },         
    { {     328}, { 117} }, // COMMA
    { {       0}, { -36} },         
};

SR__ s_86[] =
{
    { { REQ_DEF}, {  16} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     310}, {  46} }, // OP_ASSIGN   
    { {     312}, {  47} }, // RANGE       
    { {     313}, {  48} }, // COND_OR     
    { {     314}, {  49} }, // COND_AND    
    { {     315}, {  50} }, // OP_COMPARE  
    { {     316}, {  51} }, // OR          
    { {     317}, {  52} }, // XOR         
    { {     318}, {  53} }, // AND         
    { {     319}, {  54} }, // OP_SHIFT    
    { {     320}, {  55} }, // OP_TERM     
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -38} },                
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {   2} },             
    { {       325}, { 118} }, // RIGHT_PAR
    { {         0}, {   0} },             
};

SR__ s_88[] =
{
    { { REQ_DEF}, {  16} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     310}, {  46} }, // OP_ASSIGN   
    { {     312}, {  47} }, // RANGE       
    { {     313}, {  48} }, // COND_OR     
    { {     314}, {  49} }, // COND_AND    
    { {     315}, {  50} }, // OP_COMPARE  
    { {     316}, {  51} }, // OR          
    { {     317}, {  52} }, // XOR         
    { {     318}, {  53} }, // AND         
    { {     319}, {  54} }, // OP_SHIFT    
    { {     320}, {  55} }, // OP_TERM     
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -57} },                
};

SR__ s_89[] =
{
    { { REQ_DEF}, {  14} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     313}, {  48} }, // COND_OR     
    { {     314}, {  49} }, // COND_AND    
    { {     315}, {  50} }, // OP_COMPARE  
    { {     316}, {  51} }, // OR          
    { {     317}, {  52} }, // XOR         
    { {     318}, {  53} }, // AND         
    { {     319}, {  54} }, // OP_SHIFT    
    { {     320}, {  55} }, // OP_TERM     
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -58} },                
};

SR__ s_90[] =
{
    { { REQ_DEF}, {  13} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     314}, {  49} }, // COND_AND    
    { {     315}, {  50} }, // OP_COMPARE  
    { {     316}, {  51} }, // OR          
    { {     317}, {  52} }, // XOR         
    { {     318}, {  53} }, // AND         
    { {     319}, {  54} }, // OP_SHIFT    
    { {     320}, {  55} }, // OP_TERM     
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -59} },                
};

SR__ s_91[] =
{
    { { REQ_DEF}, {  12} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     315}, {  50} }, // OP_COMPARE  
    { {     316}, {  51} }, // OR          
    { {     317}, {  52} }, // XOR         
    { {     318}, {  53} }, // AND         
    { {     319}, {  54} }, // OP_SHIFT    
    { {     320}, {  55} }, // OP_TERM     
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -60} },                
};

SR__ s_92[] =
{
    { { REQ_DEF}, {  11} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     316}, {  51} }, // OR          
    { {     317}, {  52} }, // XOR         
    { {     318}, {  53} }, // AND         
    { {     319}, {  54} }, // OP_SHIFT    
    { {     320}, {  55} }, // OP_TERM     
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -61} },                
};

SR__ s_93[] =
{
    { { REQ_DEF}, {  10} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     317}, {  52} }, // XOR         
    { {     318}, {  53} }, // AND         
    { {     319}, {  54} }, // OP_SHIFT    
    { {     320}, {  55} }, // OP_TERM     
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -62} },                
};

SR__ s_94[] =
{
    { { REQ_DEF}, {   9} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     318}, {  53} }, // AND         
    { {     319}, {  54} }, // OP_SHIFT    
    { {     320}, {  55} }, // OP_TERM     
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -63} },                
};

SR__ s_95[] =
{
    { { REQ_DEF}, {   8} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     319}, {  54} }, // OP_SHIFT    
    { {     320}, {  55} }, // OP_TERM     
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -64} },                
};

SR__ s_96[] =
{
    { { REQ_DEF}, {   7} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     320}, {  55} }, // OP_TERM     
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -65} },                
};

SR__ s_97[] =
{
    { { REQ_DEF}, {   6} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -66} },                
};

SR__ s_98[] =
{
    { { REQ_DEF}, {   5} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     322}, {  57} }, // POW         
    { {       0}, { -67} },                
};

SR__ s_99[] =
{
    { { REQ_DEF}, {   5} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     322}, {  57} }, // POW         
    { {       0}, { -68} },                
};

SR__ s_100[] =
{
    { { REQ_TOKEN}, {  17} },                
    { {       283}, { 119} }, // EOL         
    { {       329}, {  43} }, // DOT         
    { {       326}, {  44} }, // LEFT_BRACKET
    { {       324}, {  45} }, // LEFT_PAR    
    { {       310}, {  46} }, // OP_ASSIGN   
    { {       312}, {  47} }, // RANGE       
    { {       313}, {  48} }, // COND_OR     
    { {       314}, {  49} }, // COND_AND    
    { {       315}, {  50} }, // OP_COMPARE  
    { {       316}, {  51} }, // OR          
    { {       317}, {  52} }, // XOR         
    { {       318}, {  53} }, // AND         
    { {       319}, {  54} }, // OP_SHIFT    
    { {       320}, {  55} }, // OP_TERM     
    { {       321}, {  56} }, // OP_FACTOR   
    { {       322}, {  57} }, // POW         
    { {         0}, {   0} },                
};

SR__ s_101[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_102[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ s_103[] =
{
    { { REQ_DEF}, {   6} },              
    { {     342}, { 120} }, // parameters
    { {     343}, { 121} }, // paramlist 
    { {     345}, { 122} }, // identify  
    { {     349}, {  75} }, // identifier
    { {     278}, {  34} }, // IDENTIFIER
    { {       0}, { -39} },              
};

SR__ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -13} }, 
};

SR__ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_106[] =
{
    { { REQ_DEF}, {   6} },              
    { {     342}, { 123} }, // parameters
    { {     343}, { 121} }, // paramlist 
    { {     345}, { 122} }, // identify  
    { {     349}, {  75} }, // identifier
    { {     278}, {  34} }, // IDENTIFIER
    { {       0}, { -39} },              
};

SR__ s_107[] =
{
    { { ERR_REQ_DEF}, {   5} },            
    { {         331}, { 124} }, // stmts   
    { {         332}, {   3} }, // anyeols 
    { {    errTok__}, {   4} }, // errTok__
    { {         283}, {   5} }, // EOL     
    { {           0}, { -31} },            
};

SR__ s_108[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_109[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_110[] =
{
    { { REQ_TOKEN}, {  19} },                 
    { {       347}, { 125} }, // expr         
    { {       348}, {  22} }, // lexical_error
    { {       349}, {  61} }, // identifier   
    { {       350}, {  24} }, // boolean      
    { {       351}, {  25} }, // number       
    { {       352}, {  26} }, // char         
    { {       353}, {  27} }, // string       
    { {       324}, {  28} }, // LEFT_PAR     
    { {       323}, {  29} }, // OP_UNARY     
    { {       320}, {  30} }, // OP_TERM      
    { {       287}, {  31} }, // ERR_CHAR     
    { {       288}, {  32} }, // ERR_STRING   
    { {       289}, {  33} }, // UNKNOWN_CHAR 
    { {       278}, {  34} }, // IDENTIFIER   
    { {       279}, {  35} }, // BOOLEAN      
    { {       280}, {  36} }, // NUMBER       
    { {       281}, {  37} }, // CHAR         
    { {       282}, {  38} }, // STRING       
    { {         0}, {   0} },                 
};

SR__ s_111[] =
{
    { { REQ_DEF}, {   4} },             
    { {     334}, { 126} }, // elsestmts
    { {     302}, { 127} }, // ELSE     
    { {     303}, { 128} }, // ELIF     
    { {       0}, { -21} },             
};

SR__ s_112[] =
{
    { { REQ_DEF}, {   4} },             
    { {     335}, { 129} }, // casestmts
    { {     309}, { 130} }, // DEFAULT  
    { {     305}, { 131} }, // CASE     
    { {       0}, { -24} },             
};

SR__ s_113[] =
{
    { { REQ_DEF}, {   3} },             
    { {     336}, { 132} }, // withstmts
    { {     307}, { 133} }, // WITH     
    { {       0}, { -27} },             
};

SR__ s_114[] =
{
    { { REQ_DEF}, {  15} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     312}, {  47} }, // RANGE       
    { {     313}, {  48} }, // COND_OR     
    { {     314}, {  49} }, // COND_AND    
    { {     315}, {  50} }, // OP_COMPARE  
    { {     316}, {  51} }, // OR          
    { {     317}, {  52} }, // XOR         
    { {     318}, {  53} }, // AND         
    { {     319}, {  54} }, // OP_SHIFT    
    { {     320}, {  55} }, // OP_TERM     
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -45} },                
};

SR__ s_115[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_117[] =
{
    { { REQ_TOKEN}, {  19} },                 
    { {       347}, { 134} }, // expr         
    { {       348}, {  22} }, // lexical_error
    { {       349}, {  61} }, // identifier   
    { {       350}, {  24} }, // boolean      
    { {       351}, {  25} }, // number       
    { {       352}, {  26} }, // char         
    { {       353}, {  27} }, // string       
    { {       324}, {  28} }, // LEFT_PAR     
    { {       323}, {  29} }, // OP_UNARY     
    { {       320}, {  30} }, // OP_TERM      
    { {       287}, {  31} }, // ERR_CHAR     
    { {       288}, {  32} }, // ERR_STRING   
    { {       289}, {  33} }, // UNKNOWN_CHAR 
    { {       278}, {  34} }, // IDENTIFIER   
    { {       279}, {  35} }, // BOOLEAN      
    { {       280}, {  36} }, // NUMBER       
    { {       281}, {  37} }, // CHAR         
    { {       282}, {  38} }, // STRING       
    { {         0}, {   0} },                 
};

SR__ s_118[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_119[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_120[] =
{
    { { REQ_TOKEN}, {   2} },                 
    { {       327}, { 135} }, // RIGHT_BRACKET
    { {         0}, {   0} },                 
};

SR__ s_121[] =
{
    { { REQ_DEF}, {   2} },         
    { {     328}, { 136} }, // COMMA
    { {       0}, { -40} },         
};

SR__ s_122[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_123[] =
{
    { { REQ_TOKEN}, {   2} },             
    { {       325}, { 137} }, // RIGHT_PAR
    { {         0}, {   0} },             
};

SR__ s_124[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       339}, { 138} }, // dedent
    { {       285}, { 139} }, // DEDENT
    { {         0}, {   0} },          
};

SR__ s_125[] =
{
    { { REQ_TOKEN}, {  19} },                
    { {       337}, { 140} }, // indented    
    { {       329}, {  43} }, // DOT         
    { {       326}, {  44} }, // LEFT_BRACKET
    { {       324}, {  45} }, // LEFT_PAR    
    { {       310}, {  46} }, // OP_ASSIGN   
    { {       312}, {  47} }, // RANGE       
    { {       313}, {  48} }, // COND_OR     
    { {       314}, {  49} }, // COND_AND    
    { {       315}, {  50} }, // OP_COMPARE  
    { {       316}, {  51} }, // OR          
    { {       317}, {  52} }, // XOR         
    { {       318}, {  53} }, // AND         
    { {       319}, {  54} }, // OP_SHIFT    
    { {       320}, {  55} }, // OP_TERM     
    { {       321}, {  56} }, // OP_FACTOR   
    { {       322}, {  57} }, // POW         
    { {       338}, {  71} }, // eols        
    { {       283}, {  72} }, // EOL         
    { {         0}, {   0} },                
};

SR__ s_126[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ s_127[] =
{
    { { REQ_TOKEN}, {   4} },            
    { {       337}, { 141} }, // indented
    { {       338}, {  71} }, // eols    
    { {       283}, {  72} }, // EOL     
    { {         0}, {   0} },            
};

SR__ s_128[] =
{
    { { REQ_TOKEN}, {  19} },                 
    { {       347}, { 142} }, // expr         
    { {       348}, {  22} }, // lexical_error
    { {       349}, {  61} }, // identifier   
    { {       350}, {  24} }, // boolean      
    { {       351}, {  25} }, // number       
    { {       352}, {  26} }, // char         
    { {       353}, {  27} }, // string       
    { {       324}, {  28} }, // LEFT_PAR     
    { {       323}, {  29} }, // OP_UNARY     
    { {       320}, {  30} }, // OP_TERM      
    { {       287}, {  31} }, // ERR_CHAR     
    { {       288}, {  32} }, // ERR_STRING   
    { {       289}, {  33} }, // UNKNOWN_CHAR 
    { {       278}, {  34} }, // IDENTIFIER   
    { {       279}, {  35} }, // BOOLEAN      
    { {       280}, {  36} }, // NUMBER       
    { {       281}, {  37} }, // CHAR         
    { {       282}, {  38} }, // STRING       
    { {         0}, {   0} },                 
};

SR__ s_129[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_130[] =
{
    { { REQ_TOKEN}, {   4} },            
    { {       337}, { 143} }, // indented
    { {       338}, {  71} }, // eols    
    { {       283}, {  72} }, // EOL     
    { {         0}, {   0} },            
};

SR__ s_131[] =
{
    { { REQ_TOKEN}, {  19} },                 
    { {       347}, { 144} }, // expr         
    { {       348}, {  22} }, // lexical_error
    { {       349}, {  61} }, // identifier   
    { {       350}, {  24} }, // boolean      
    { {       351}, {  25} }, // number       
    { {       352}, {  26} }, // char         
    { {       353}, {  27} }, // string       
    { {       324}, {  28} }, // LEFT_PAR     
    { {       323}, {  29} }, // OP_UNARY     
    { {       320}, {  30} }, // OP_TERM      
    { {       287}, {  31} }, // ERR_CHAR     
    { {       288}, {  32} }, // ERR_STRING   
    { {       289}, {  33} }, // UNKNOWN_CHAR 
    { {       278}, {  34} }, // IDENTIFIER   
    { {       279}, {  35} }, // BOOLEAN      
    { {       280}, {  36} }, // NUMBER       
    { {       281}, {  37} }, // CHAR         
    { {       282}, {  38} }, // STRING       
    { {         0}, {   0} },                 
};

SR__ s_132[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ s_133[] =
{
    { { REQ_TOKEN}, {  19} },                 
    { {       347}, { 145} }, // expr         
    { {       348}, {  22} }, // lexical_error
    { {       349}, {  61} }, // identifier   
    { {       350}, {  24} }, // boolean      
    { {       351}, {  25} }, // number       
    { {       352}, {  26} }, // char         
    { {       353}, {  27} }, // string       
    { {       324}, {  28} }, // LEFT_PAR     
    { {       323}, {  29} }, // OP_UNARY     
    { {       320}, {  30} }, // OP_TERM      
    { {       287}, {  31} }, // ERR_CHAR     
    { {       288}, {  32} }, // ERR_STRING   
    { {       289}, {  33} }, // UNKNOWN_CHAR 
    { {       278}, {  34} }, // IDENTIFIER   
    { {       279}, {  35} }, // BOOLEAN      
    { {       280}, {  36} }, // NUMBER       
    { {       281}, {  37} }, // CHAR         
    { {       282}, {  38} }, // STRING       
    { {         0}, {   0} },                 
};

SR__ s_134[] =
{
    { { REQ_DEF}, {  16} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     310}, {  46} }, // OP_ASSIGN   
    { {     312}, {  47} }, // RANGE       
    { {     313}, {  48} }, // COND_OR     
    { {     314}, {  49} }, // COND_AND    
    { {     315}, {  50} }, // OP_COMPARE  
    { {     316}, {  51} }, // OR          
    { {     317}, {  52} }, // XOR         
    { {     318}, {  53} }, // AND         
    { {     319}, {  54} }, // OP_SHIFT    
    { {     320}, {  55} }, // OP_TERM     
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -37} },                
};

SR__ s_135[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_136[] =
{
    { { REQ_TOKEN}, {   4} },              
    { {       345}, { 146} }, // identify  
    { {       349}, {  75} }, // identifier
    { {       278}, {  34} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_137[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       311}, { 147} }, // COLON
    { {         0}, {   0} },         
};

SR__ s_138[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_139[] =
{
    { { REQ_TOKEN}, {   2} },       
    { {       283}, { 148} }, // EOL
    { {         0}, {   0} },       
};

SR__ s_140[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_141[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_142[] =
{
    { { REQ_TOKEN}, {  19} },                
    { {       337}, { 149} }, // indented    
    { {       329}, {  43} }, // DOT         
    { {       326}, {  44} }, // LEFT_BRACKET
    { {       324}, {  45} }, // LEFT_PAR    
    { {       310}, {  46} }, // OP_ASSIGN   
    { {       312}, {  47} }, // RANGE       
    { {       313}, {  48} }, // COND_OR     
    { {       314}, {  49} }, // COND_AND    
    { {       315}, {  50} }, // OP_COMPARE  
    { {       316}, {  51} }, // OR          
    { {       317}, {  52} }, // XOR         
    { {       318}, {  53} }, // AND         
    { {       319}, {  54} }, // OP_SHIFT    
    { {       320}, {  55} }, // OP_TERM     
    { {       321}, {  56} }, // OP_FACTOR   
    { {       322}, {  57} }, // POW         
    { {       338}, {  71} }, // eols        
    { {       283}, {  72} }, // EOL         
    { {         0}, {   0} },                
};

SR__ s_143[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_144[] =
{
    { { REQ_TOKEN}, {  19} },                
    { {       337}, { 150} }, // indented    
    { {       329}, {  43} }, // DOT         
    { {       326}, {  44} }, // LEFT_BRACKET
    { {       324}, {  45} }, // LEFT_PAR    
    { {       310}, {  46} }, // OP_ASSIGN   
    { {       312}, {  47} }, // RANGE       
    { {       313}, {  48} }, // COND_OR     
    { {       314}, {  49} }, // COND_AND    
    { {       315}, {  50} }, // OP_COMPARE  
    { {       316}, {  51} }, // OR          
    { {       317}, {  52} }, // XOR         
    { {       318}, {  53} }, // AND         
    { {       319}, {  54} }, // OP_SHIFT    
    { {       320}, {  55} }, // OP_TERM     
    { {       321}, {  56} }, // OP_FACTOR   
    { {       322}, {  57} }, // POW         
    { {       338}, {  71} }, // eols        
    { {       283}, {  72} }, // EOL         
    { {         0}, {   0} },                
};

SR__ s_145[] =
{
    { { REQ_TOKEN}, {  17} },                
    { {       308}, { 151} }, // AS          
    { {       329}, {  43} }, // DOT         
    { {       326}, {  44} }, // LEFT_BRACKET
    { {       324}, {  45} }, // LEFT_PAR    
    { {       310}, {  46} }, // OP_ASSIGN   
    { {       312}, {  47} }, // RANGE       
    { {       313}, {  48} }, // COND_OR     
    { {       314}, {  49} }, // COND_AND    
    { {       315}, {  50} }, // OP_COMPARE  
    { {       316}, {  51} }, // OR          
    { {       317}, {  52} }, // XOR         
    { {       318}, {  53} }, // AND         
    { {       319}, {  54} }, // OP_SHIFT    
    { {       320}, {  55} }, // OP_TERM     
    { {       321}, {  56} }, // OP_FACTOR   
    { {       322}, {  57} }, // POW         
    { {         0}, {   0} },                
};

SR__ s_146[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_147[] =
{
    { { REQ_TOKEN}, {  19} },                 
    { {       347}, { 152} }, // expr         
    { {       348}, {  22} }, // lexical_error
    { {       349}, {  61} }, // identifier   
    { {       350}, {  24} }, // boolean      
    { {       351}, {  25} }, // number       
    { {       352}, {  26} }, // char         
    { {       353}, {  27} }, // string       
    { {       324}, {  28} }, // LEFT_PAR     
    { {       323}, {  29} }, // OP_UNARY     
    { {       320}, {  30} }, // OP_TERM      
    { {       287}, {  31} }, // ERR_CHAR     
    { {       288}, {  32} }, // ERR_STRING   
    { {       289}, {  33} }, // UNKNOWN_CHAR 
    { {       278}, {  34} }, // IDENTIFIER   
    { {       279}, {  35} }, // BOOLEAN      
    { {       280}, {  36} }, // NUMBER       
    { {       281}, {  37} }, // CHAR         
    { {       282}, {  38} }, // STRING       
    { {         0}, {   0} },                 
};

SR__ s_148[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ s_149[] =
{
    { { REQ_DEF}, {   4} },             
    { {     334}, { 153} }, // elsestmts
    { {     302}, { 127} }, // ELSE     
    { {     303}, { 128} }, // ELIF     
    { {       0}, { -21} },             
};

SR__ s_150[] =
{
    { { REQ_DEF}, {   4} },             
    { {     335}, { 154} }, // casestmts
    { {     309}, { 130} }, // DEFAULT  
    { {     305}, { 131} }, // CASE     
    { {       0}, { -24} },             
};

SR__ s_151[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       349}, { 155} }, // identifier
    { {       278}, {  34} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_152[] =
{
    { { REQ_DEF}, {  16} },                
    { {     329}, {  43} }, // DOT         
    { {     326}, {  44} }, // LEFT_BRACKET
    { {     324}, {  45} }, // LEFT_PAR    
    { {     310}, {  46} }, // OP_ASSIGN   
    { {     312}, {  47} }, // RANGE       
    { {     313}, {  48} }, // COND_OR     
    { {     314}, {  49} }, // COND_AND    
    { {     315}, {  50} }, // OP_COMPARE  
    { {     316}, {  51} }, // OR          
    { {     317}, {  52} }, // XOR         
    { {     318}, {  53} }, // AND         
    { {     319}, {  54} }, // OP_SHIFT    
    { {     320}, {  55} }, // OP_TERM     
    { {     321}, {  56} }, // OP_FACTOR   
    { {     322}, {  57} }, // POW         
    { {       0}, { -46} },                
};

SR__ s_153[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ s_154[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_155[] =
{
    { { REQ_TOKEN}, {   4} },            
    { {       337}, { 156} }, // indented
    { {       338}, {  71} }, // eols    
    { {       283}, {  72} }, // EOL     
    { {         0}, {   0} },            
};

SR__ s_156[] =
{
    { { REQ_DEF}, {   3} },             
    { {     336}, { 157} }, // withstmts
    { {     307}, { 133} }, // WITH     
    { {       0}, { -27} },             
};

SR__ s_157[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,
};

typedef std::unordered_map<int, char const *> SMap;
typedef SMap::value_type SMapVal;

SMapVal s_symArr[] =
{
    SMapVal(-2, "Reserved__::UNDETERMINED__"),  // predefined symbols
    SMapVal(-1, "Reserved__::EOF__"),
    SMapVal(256, "errTok__"),

    SMapVal(278, "IDENTIFIER"),
    SMapVal(279, "BOOLEAN"),
    SMapVal(280, "NUMBER"),
    SMapVal(281, "CHAR"),
    SMapVal(282, "STRING"),
    SMapVal(283, "EOL"),
    SMapVal(284, "INDENT"),
    SMapVal(285, "DEDENT"),
    SMapVal(286, "ERR_INDENT"),
    SMapVal(287, "ERR_CHAR"),
    SMapVal(288, "ERR_STRING"),
    SMapVal(289, "UNKNOWN_CHAR"),
    SMapVal(290, "CLASS"),
    SMapVal(291, "CONCEPT"),
    SMapVal(292, "DEF"),
    SMapVal(293, "RETURN"),
    SMapVal(294, "BREAK"),
    SMapVal(295, "CONTINUE"),
    SMapVal(296, "PASS"),
    SMapVal(297, "FOREVER"),
    SMapVal(298, "WHILE"),
    SMapVal(299, "FOR"),
    SMapVal(300, "IN"),
    SMapVal(301, "IF"),
    SMapVal(302, "ELSE"),
    SMapVal(303, "ELIF"),
    SMapVal(304, "SWITCH"),
    SMapVal(305, "CASE"),
    SMapVal(306, "MATCH"),
    SMapVal(307, "WITH"),
    SMapVal(308, "AS"),
    SMapVal(309, "DEFAULT"),
    SMapVal(310, "OP_ASSIGN"),
    SMapVal(311, "COLON"),
    SMapVal(312, "RANGE"),
    SMapVal(313, "COND_OR"),
    SMapVal(314, "COND_AND"),
    SMapVal(315, "OP_COMPARE"),
    SMapVal(316, "OR"),
    SMapVal(317, "XOR"),
    SMapVal(318, "AND"),
    SMapVal(319, "OP_SHIFT"),
    SMapVal(320, "OP_TERM"),
    SMapVal(321, "OP_FACTOR"),
    SMapVal(322, "POW"),
    SMapVal(323, "OP_UNARY"),
    SMapVal(324, "LEFT_PAR"),
    SMapVal(325, "RIGHT_PAR"),
    SMapVal(326, "LEFT_BRACKET"),
    SMapVal(327, "RIGHT_BRACKET"),
    SMapVal(328, "COMMA"),
    SMapVal(329, "DOT"),
    SMapVal(330, "startrule"),
    SMapVal(331, "stmts"),
    SMapVal(332, "anyeols"),
    SMapVal(333, "stmt"),
    SMapVal(334, "elsestmts"),
    SMapVal(335, "casestmts"),
    SMapVal(336, "withstmts"),
    SMapVal(337, "indented"),
    SMapVal(338, "eols"),
    SMapVal(339, "dedent"),
    SMapVal(340, "anylist"),
    SMapVal(341, "list"),
    SMapVal(342, "parameters"),
    SMapVal(343, "paramlist"),
    SMapVal(344, "name"),
    SMapVal(345, "identify"),
    SMapVal(346, "signature"),
    SMapVal(347, "expr"),
    SMapVal(348, "lexical_error"),
    SMapVal(349, "identifier"),
    SMapVal(350, "boolean"),
    SMapVal(351, "number"),
    SMapVal(352, "char"),
    SMapVal(353, "string"),
    SMapVal(354, "startrule_$"),
};

SMap s_symbol
(
    s_symArr, s_symArr + sizeof(s_symArr) / sizeof(SMapVal)
);

} // anonymous namespace ends



// $insert polymorphicCode
namespace Meta__
{

size_t const *t_nErrors;
// $insert idoftag
char const *idOfTag__[] = {
    "SWITCH",
    "IF",
    "BLOCK",
    "MATCH",
    "STMT",
    "EXPLIST",
    "EXP",
    "TOK",
    "PARAMETERS",
    "SIGNATURE",
    "IDENT",
    "IDENTIFY",
    "NAME",
    "<undefined>"
};

size_t const *s_nErrors__;

Base::~Base()
{}

}   // namespace Meta__

// If the parsing function call (i.e., parse()' needs arguments, then provide
// an overloaded function.  The code below doesn't rely on parameters, so no
// arguments are required.  Furthermore, parse uses a function try block to
// allow us to do ACCEPT and ABORT from anywhere, even from within members
// called by actions, simply throwing the appropriate exceptions.


// base/base1
ParserBase::ParserBase()
:
    d_token(Reserved__::UNDETERMINED__),
    // $insert baseclasscode
    d_requiredTokens__(0)
{
    Meta__::t_nErrors = &d_nErrors__;
}

// base/clearin
void ParserBase::clearin__()
{
    d_nErrors__ = 0;
    d_stackIdx = -1;
    d_stateStack.clear();
    d_token = Reserved__::UNDETERMINED__;
    d_next = TokenPair{ Reserved__::UNDETERMINED__, STYPE__{} };
    d_recovery = false;
    d_acceptedTokens__ = d_requiredTokens__;
    d_val__ = STYPE__{};

    push__(0);
}

// base/debugfunctions
// $insert debugfunctions
std::string ParserBase::symbol__(int value) const
{
    using namespace std;
    ostringstream ostr;
    SMap::const_iterator it = s_symbol.find(value);
    if (it != s_symbol.end())
        ostr << '\'' << it->second << '\'';
    else if (isprint(value))
        ostr << '`' << static_cast<char>(value) << "' (" << value << ')';
    else
        ostr << "'\\x" << setfill('0') << hex << setw(2) << value << '\'';
    return ostr.str();
}



void ParserBase::setDebug(bool mode)
{
    d_actionCases__ = false;
    d_debug__ = mode;
}

void ParserBase::setDebug(DebugMode__ mode)
{
    d_actionCases__ = mode & ACTIONCASES;
    d_debug__ =       mode & ON;
}

// base/lex
void ParserBase::lex__(int token)
{
    d_token = token;

    if (d_token <= 0)
        d_token = Reserved__::EOF__;

    d_terminalToken = true;
}

// base/lookup
int ParserBase::lookup__() const
{
    // if the final transition is negative, then we should reduce by the rule
    // given by its positive value.

    SR__ const *sr = s_state[d_state];
    SR__ const *last = sr + sr->d_lastIdx;

    for ( ; ++sr != last; )           // visit all but the last SR entries
    {
        if (sr->d_token == d_token)
            return sr->d_action;
    }

    if (sr == last)   // reached the last element
    {
        if (sr->d_action < 0)   // default reduction
        {
            return sr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = sr->d_action;


    return action;
}

// base/pop
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx -= count;
    d_state = d_stateStack[d_stackIdx].first;
    d_vsp = &d_stateStack[d_stackIdx];

}

// base/poptoken
void ParserBase::popToken__()
{
    d_token = d_next.first;
    d_val__ = std::move(d_next.second);

    d_next.first = Reserved__::UNDETERMINED__;
}

// base/push
void ParserBase::push__(size_t state)
{
    size_t currentSize = d_stateStack.size();
    if (stackSize__() == currentSize)
    {
        size_t newSize = currentSize + STACK_EXPANSION__;
        d_stateStack.resize(newSize);
    }

    ++d_stackIdx;
    d_stateStack[d_stackIdx] = 
                    StatePair{ d_state = state, std::move(d_val__) };

    d_vsp = &d_stateStack[d_stackIdx];

    if (d_stackIdx == 0)
    {
    }
    else
    {
    }
}

// base/pushtoken
void ParserBase::pushToken__(int token)
{
    d_next = TokenPair{ d_token, std::move(d_val__) };
    d_token = token;
}

// base/redotoken
void ParserBase::redoToken__()
{
    if (d_token != Reserved__::UNDETERMINED__)
        pushToken__(d_token);
}

// base/reduce
void ParserBase::reduce__(int rule)
{
    PI__ const &pi = s_productionInfo[rule];

    d_token = pi.d_nonTerm;
    pop__(pi.d_size);

    d_terminalToken = false;
}

// base/shift
void ParserBase::shift__(int action)
{
    push__(action);
    popToken__();               // token processed

    if (d_recovery and d_terminalToken)
    {
        d_recovery = false;
        d_acceptedTokens__ = 0;
    }
}

// base/startrecovery
void ParserBase::startRecovery__()
{
    int lastToken = d_token;                // give the unexpected token a
                                            // chance to be processed
                                            // again.

    pushToken__(Reserved__::errTok__);      // specify errTok__ as next token
    push__(lookup__());                     // push the error state

    d_token = lastToken;                    // reactivate the unexpected
                                            // token (we're now in an
                                            // ERROR state).

    d_recovery = true;
}

// base/top
inline size_t ParserBase::top__() const
{
    return d_stateStack[d_stackIdx].first;
}

// derived/errorrecovery
void Parser::errorRecovery__()
{
    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)



    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error();                                // simply skip input
    }

    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, looking up a token allows us to proceed.
    // Continuation may be require multiple reductions, but eventually a
    // terminal-token shift is used. See nextCycle__ for details.

    startRecovery__();
}

// derived/executeaction
void Parser::executeAction__(int production)
try
{
    if (token__() != Reserved__::UNDETERMINED__)
        pushToken__(token__());     // save an already available token
    switch (production)
    {
        // $insert actioncases
        
        case 1:
#line 67 "model.y"
        {
         vs__(0).get<Tag__::BLOCK>()->reverse();
         d_val__ = vs__(0).get<Tag__::BLOCK>();
         mAst = AST(vs__(0).get<Tag__::BLOCK>());
         }
        break;

        case 2:
#line 75 "model.y"
        {
         d_val__ = std::make_shared<Block>();
         }
        break;

        case 3:
#line 78 "model.y"
        {
         d_val__ = vs__(0).get<Tag__::BLOCK>();
         
         if (vs__(-1).get<Tag__::STMT>())
         d_val__.get<Tag__::BLOCK>()->append(vs__(-1).get<Tag__::STMT>());
         }
        break;

        case 4:
#line 84 "model.y"
        {
         mAst.setErrorSymbol(symbol__(d_token_lastError));
         SR__* begin = s_state[d_state_lastError];
         SR__* end = begin + begin->d_lastIdx;
         for (SR__* iter = begin + 1 ; iter != end ; ++iter)
         mAst.addErrorExpectedSymbol(symbol__(iter->d_token));
         ABORT();
         }
        break;

        case 5:
#line 98 "model.y"
        {
         d_val__ = std::make_shared<ExprStmt>(vs__(-1).get<Tag__::EXP>());
         }
        break;

        case 6:
#line 101 "model.y"
        {
         d_val__ = std::make_shared<ExprStmt>(vs__(-1).get<Tag__::IDENTIFY>());
         }
        break;

        case 7:
#line 104 "model.y"
        {
         d_val__ = std::make_shared<ExprStmt>(std::make_shared<Binary>(vs__(-3).get<Tag__::IDENTIFY>(), vs__(-2).get<Tag__::TOK>(), vs__(-1).get<Tag__::EXP>()));
         }
        break;

        case 8:
#line 107 "model.y"
        {
         d_val__ = std::make_shared<Return>(vs__(-1).get<Tag__::EXP>());
         }
        break;

        case 9:
#line 110 "model.y"
        {
         d_val__ = std::make_shared<Break>();
         }
        break;

        case 10:
#line 113 "model.y"
        {
         d_val__ = std::make_shared<Continue>();
         }
        break;

        case 11:
#line 116 "model.y"
        {
         d_val__ = std::make_shared<Pass>();
         }
        break;

        case 12:
#line 119 "model.y"
        {
         d_val__ = std::make_shared<Class>(vs__(-1).get<Tag__::NAME>(), vs__(0).get<Tag__::BLOCK>());
         }
        break;

        case 13:
#line 122 "model.y"
        {
         d_val__ = std::make_shared<Concept>(vs__(-1).get<Tag__::NAME>(), vs__(0).get<Tag__::BLOCK>());
         }
        break;

        case 14:
#line 125 "model.y"
        {
         d_val__ = std::make_shared<Function>(vs__(-1).get<Tag__::SIGNATURE>(), vs__(0).get<Tag__::BLOCK>());
         }
        break;

        case 15:
#line 128 "model.y"
        {
         d_val__ = std::make_shared<Forever>(vs__(0).get<Tag__::BLOCK>());
         }
        break;

        case 16:
#line 131 "model.y"
        {
         d_val__ = std::make_shared<While>(vs__(-1).get<Tag__::EXP>(), vs__(0).get<Tag__::BLOCK>());
         }
        break;

        case 17:
#line 134 "model.y"
        {
         d_val__ = std::make_shared<For>(vs__(-3).get<Tag__::IDENTIFY>(), vs__(-1).get<Tag__::EXP>(), vs__(0).get<Tag__::BLOCK>());
         }
        break;

        case 18:
#line 137 "model.y"
        {
         vs__(0).get<Tag__::IF>()->append(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::BLOCK>());
         vs__(0).get<Tag__::IF>()->reverse();
         d_val__ = vs__(0).get<Tag__::IF>();
         }
        break;

        case 19:
#line 142 "model.y"
        {
         vs__(0).get<Tag__::SWITCH>()->setExpr(vs__(-2).get<Tag__::EXP>());
         vs__(0).get<Tag__::SWITCH>()->reverse();
         d_val__ = vs__(0).get<Tag__::SWITCH>();
         }
        break;

        case 20:
#line 147 "model.y"
        {
         vs__(0).get<Tag__::MATCH>()->setExpr(vs__(-2).get<Tag__::EXP>());
         vs__(0).get<Tag__::MATCH>()->reverse();
         d_val__ = vs__(0).get<Tag__::MATCH>();
         }
        break;

        case 21:
#line 156 "model.y"
        {
         d_val__ = std::make_shared<If>();
         }
        break;

        case 22:
#line 159 "model.y"
        {
         d_val__ = std::make_shared<If>(vs__(0).get<Tag__::BLOCK>());
         }
        break;

        case 23:
#line 162 "model.y"
        {
         d_val__ = vs__(0).get<Tag__::IF>();
         d_val__.get<Tag__::IF>()->append(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::BLOCK>());
         }
        break;

        case 24:
#line 169 "model.y"
        {
         d_val__ = std::make_shared<Switch>();
         }
        break;

        case 25:
#line 172 "model.y"
        {
         d_val__ = std::make_shared<Switch>(vs__(0).get<Tag__::BLOCK>());
         }
        break;

        case 26:
#line 175 "model.y"
        {
         d_val__ = vs__(0).get<Tag__::SWITCH>();
         d_val__.get<Tag__::SWITCH>()->append(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::BLOCK>());
         }
        break;

        case 27:
#line 182 "model.y"
        {
         d_val__ = std::make_shared<Match>();
         }
        break;

        case 28:
#line 185 "model.y"
        {
         d_val__ = vs__(0).get<Tag__::MATCH>();
         d_val__.get<Tag__::MATCH>()->append(vs__(-4).get<Tag__::EXP>(), vs__(-2).get<Tag__::IDENT>(), vs__(-1).get<Tag__::BLOCK>());
         }
        break;

        case 29:
#line 193 "model.y"
        {
         vs__(-1).get<Tag__::BLOCK>()->reverse();
         d_val__ = vs__(-1).get<Tag__::BLOCK>();
         }
        break;

        case 30:
#line 201 "model.y"
        {
            d_val__ = std::move(vs__(-1));
        }
        break;

        case 32:
#line 205 "model.y"
        {
            d_val__ = std::move(vs__(-1));
        }
        break;

        case 33:
#line 209 "model.y"
        {
            d_val__ = std::move(vs__(0));
        }
        break;

        case 34:
#line 210 "model.y"
        {
            d_val__ = std::move(vs__(-1));
        }
        break;

        case 35:
#line 214 "model.y"
        {
         d_val__ = std::make_shared<ExprList>();
         }
        break;

        case 36:
#line 217 "model.y"
        {
         d_val__ = vs__(0).get<Tag__::EXPLIST>();
         }
        break;

        case 37:
#line 223 "model.y"
        {
         d_val__ = vs__(-2).get<Tag__::EXPLIST>();
         d_val__.get<Tag__::EXPLIST>()->append(vs__(0).get<Tag__::EXP>());
         }
        break;

        case 38:
#line 227 "model.y"
        {
         d_val__ = std::make_shared<ExprList>(vs__(0).get<Tag__::EXP>());
         }
        break;

        case 39:
#line 234 "model.y"
        {
         d_val__ = std::make_shared<Parameters>();
         }
        break;

        case 40:
#line 237 "model.y"
        {
         d_val__ = vs__(0).get<Tag__::PARAMETERS>();
         }
        break;

        case 41:
#line 243 "model.y"
        {
         d_val__ = vs__(-2).get<Tag__::PARAMETERS>();
         d_val__.get<Tag__::PARAMETERS>()->append(vs__(0).get<Tag__::IDENTIFY>());
         }
        break;

        case 42:
#line 247 "model.y"
        {
         d_val__ = std::make_shared<Parameters>(vs__(0).get<Tag__::IDENTIFY>());
         }
        break;

        case 43:
#line 254 "model.y"
        {
         d_val__ = std::make_shared<Name>(vs__(0).get<Tag__::IDENT>());
         }
        break;

        case 44:
#line 257 "model.y"
        {
         d_val__ = std::make_shared<Name>(vs__(-3).get<Tag__::IDENT>(), vs__(-1).get<Tag__::PARAMETERS>());
         }
        break;

        case 45:
#line 264 "model.y"
        {
         d_val__ = std::make_shared<Identify>(vs__(-2).get<Tag__::IDENT>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 46:
#line 270 "model.y"
        {
         d_val__ = std::make_shared<Signature>(vs__(-5).get<Tag__::IDENT>(), vs__(-3).get<Tag__::PARAMETERS>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 47:
#line 276 "model.y"
        {
         d_val__ = vs__(0).get<Tag__::EXP>();
         }
        break;

        case 48:
#line 279 "model.y"
        {
         d_val__ = vs__(0).get<Tag__::IDENT>();
         }
        break;

        case 49:
#line 282 "model.y"
        {
         d_val__ = vs__(0).get<Tag__::EXP>();
         }
        break;

        case 50:
#line 285 "model.y"
        {
         d_val__ = vs__(0).get<Tag__::EXP>();
         }
        break;

        case 51:
#line 288 "model.y"
        {
         d_val__ = vs__(0).get<Tag__::EXP>();
         }
        break;

        case 52:
#line 291 "model.y"
        {
         d_val__ = vs__(0).get<Tag__::EXP>();
         }
        break;

        case 53:
#line 295 "model.y"
        {
         d_val__ = vs__(-1).get<Tag__::EXP>();
         }
        break;

        case 54:
#line 299 "model.y"
        {
         d_val__ = std::make_shared<Member>(vs__(-2).get<Tag__::EXP>(), vs__(0).get<Tag__::IDENT>());
         }
        break;

        case 55:
#line 302 "model.y"
        {
         d_val__ = std::make_shared<Index>(vs__(-3).get<Tag__::EXP>(), vs__(-1).get<Tag__::EXPLIST>());
         }
        break;

        case 56:
#line 305 "model.y"
        {
         d_val__ = std::make_shared<Call>(vs__(-3).get<Tag__::EXP>(), vs__(-1).get<Tag__::EXPLIST>());
         }
        break;

        case 57:
#line 309 "model.y"
        {
         d_val__ = std::make_shared<Binary>(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 58:
#line 312 "model.y"
        {
         d_val__ = std::make_shared<Binary>(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 59:
#line 315 "model.y"
        {
         d_val__ = std::make_shared<Binary>(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 60:
#line 318 "model.y"
        {
         d_val__ = std::make_shared<Binary>(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 61:
#line 321 "model.y"
        {
         d_val__ = std::make_shared<Binary>(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 62:
#line 324 "model.y"
        {
         d_val__ = std::make_shared<Binary>(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 63:
#line 327 "model.y"
        {
         d_val__ = std::make_shared<Binary>(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 64:
#line 330 "model.y"
        {
         d_val__ = std::make_shared<Binary>(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 65:
#line 333 "model.y"
        {
         d_val__ = std::make_shared<Binary>(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 66:
#line 336 "model.y"
        {
         d_val__ = std::make_shared<Binary>(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 67:
#line 339 "model.y"
        {
         d_val__ = std::make_shared<Binary>(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 68:
#line 342 "model.y"
        {
         d_val__ = std::make_shared<Binary>(vs__(-2).get<Tag__::EXP>(), vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 69:
#line 345 "model.y"
        {
         d_val__ = std::make_shared<Unary>(vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 70:
#line 348 "model.y"
        {
         d_val__ = std::make_shared<Unary>(vs__(-1).get<Tag__::TOK>(), vs__(0).get<Tag__::EXP>());
         }
        break;

        case 71:
#line 355 "model.y"
        {
         std::cerr << "Error inside char :" << vs__(0).get<Tag__::TOK>() << std::endl;
         d_val__ = std::make_shared<LexicalError>(vs__(0).get<Tag__::TOK>());
         }
        break;

        case 72:
#line 359 "model.y"
        {
         std::cerr << "Error inside string :" << vs__(0).get<Tag__::TOK>() << std::endl;
         d_val__ = std::make_shared<LexicalError>(vs__(0).get<Tag__::TOK>());
         }
        break;

        case 73:
#line 363 "model.y"
        {
         std::cerr << "Unknown char :" << vs__(0).get<Tag__::TOK>() << std::endl;
         d_val__ = std::make_shared<LexicalError>(vs__(0).get<Tag__::TOK>());
         }
        break;

        case 74:
#line 371 "model.y"
        {
         d_val__ = std::make_shared<Identifier>(vs__(0).get<Tag__::TOK>());
         }
        break;

        case 75:
#line 376 "model.y"
        {
         d_val__ = std::make_shared<DataBoolean>(vs__(0).get<Tag__::TOK>());
         }
        break;

        case 76:
#line 381 "model.y"
        {
         d_val__ = std::make_shared<DataNumber>(vs__(0).get<Tag__::TOK>());
         }
        break;

        case 77:
#line 386 "model.y"
        {
         d_val__ = std::make_shared<DataChar>(vs__(0).get<Tag__::TOK>());
         }
        break;

        case 78:
#line 391 "model.y"
        {
         d_val__ = std::make_shared<DataString>(vs__(0).get<Tag__::TOK>());
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler(exc);
}

// derived/nextcycle
void Parser::nextCycle__()
try
{
    if (s_state[state__()]->d_type & REQ_TOKEN)
        nextToken__();              // obtain next token


    int action = lookup__();        // lookup d_token in d_state

    if (action > 0)                 // SHIFT: push a new state
    {
        shift__(action);
        return;
    }

    if (action < 0)            // REDUCE: execute and pop.
    {

        if (recovery__())
            redoToken__();
        else
            executeAction__(-action);
                                            // next token is the rule's LHS
        reduce__(-action); 
        return;
    }

    if (recovery__())
        ABORT();
    else 
        ACCEPT();
}
catch (ErrorRecovery__)
{
    if (not recovery__())
        errorRecovery__();
    else
    {
        if (token__() == Reserved__::EOF__)
            ABORT();
        popToken__();               // skip the failing token
    }
}


// derived/nexttoken
void Parser::nextToken__()
{ 
    // If d_token is Reserved__::UNDETERMINED__ then if savedToken__() is
    // Reserved__::UNDETERMINED__ another token is obtained from lex(). Then
    // savedToken__() is assigned to d_token.

                                    // no need for a token: got one already
    if (token__() != Reserved__::UNDETERMINED__) 
    {
        return;                             
    }

    if (savedToken__() != Reserved__::UNDETERMINED__)
    {
        popToken__();               // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;       // accept another token (see
                                    // errorRecover())
        lex__(lex());
        print__();
    }
    print();
}

// derived/print
void Parser::print__()
{
// $insert print
    std::cout << "Token: " << symbol__(token__()) << ", text: `";
    if (token__() == Reserved__::UNDETERMINED__)
        std::cout << "'\n";
    else
        std::cout << d_scanner.matched() << "'\n";
}

// derived/parse
int Parser::parse()
try 
{
    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and all relevant variables
    // are initialized by Base::clearin__.
    //
    // Then, in an eternal loop:
    //
    //  1. If a state is a REQ_TOKEN type, then the next token is obtained
    //     from nextToken().  This may very well be the currently available
    //     token. When retrieving a terminal token d_terminal is set to true.
    //
    //  2. lookup() is called, d_token is looked up in the current state's
    //     SR_ array.
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token is not found, and the state has no
    //     default reduction.

    clearin__();                            // initialize, push(0)

    while (true)
    {
// $insert prompt
        nextCycle__();
    }
}
catch (Return__ retValue)
{
    return retValue or d_nErrors__;
}


// derived/tail


