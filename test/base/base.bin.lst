001   0000             ; ZX Spectrum test (c) 30-10-2019 Alemorf aleksey.f.morozov@gmail.com
002   0000             
003   0000                 DEVICE ZXSPECTRUM128
004   0000             
005   0000                 include "../module.inc"
001+  0000             ;romAddr        = 0
002+  0000             ;screenAddr     = 4000h
003+  0000             ;cacheAddr      = 5B00h
004+  0000             
005+  0000             gPanelChanged1  = 0x5D80
006+  0000             gPanelChanged2  = 0x5D80 | 0x8000
007+  0000             
008+  0000             irqTableAddr      = 5F00h
009+  0000             irqAddr           = 6060h
010+  0000             stackBeginAddr    = 6001h
011+  0000             stackEndAddr      = 605Fh
012+  0000             baseAddr          = 6063h
013+  0000             moduleLoadAddr    = 7000h
014+  0000             moverAddr         = 8000h
015+  0000             
016+  0000             gEnd = baseAddr
017+  0000             
018+  0000             ; Функции
019+  0000             gDrawText         = gEnd
020+  0000             gEnd = gEnd + 3
021+  0000             gDrawTextCenter   = gEnd
022+  0000             gEnd = gEnd + 3
023+  0000             gDrawTextEx       = gEnd
024+  0000             gEnd = gEnd + 3
025+  0000             gClearScreen      = gEnd
026+  0000             gEnd = gEnd + 3
027+  0000             gDrawImage        = gEnd
028+  0000             gEnd = gEnd + 3
029+  0000             gMeasureText      = gEnd
030+  0000             gEnd = gEnd + 3
031+  0000             gCalcCoords       = gEnd
032+  0000             gEnd = gEnd + 3
033+  0000             gDrawCharSub      = gEnd
034+  0000             gEnd = gEnd + 3
035+  0000             gExec             = gEnd
036+  0000             gEnd = gEnd + 3
037+  0000             gIrqHandler       = gEnd
038+  0000             gEnd = gEnd + 3
039+  0000             gDrawPanel        = gEnd
040+  0000             gEnd = gEnd + 3
041+  0000             
042+  0000             ; Переменные
043+  0000             gFrame            = gEnd
044+  0000             gEnd = gEnd + 1
045+  0000             gVideoPage        = gEnd
046+  0000             gEnd = gEnd + 1
047+  0000             gSystemPage       = gEnd
048+  0000             gEnd = gEnd + 1
049+  0000             gKeyTrigger       = gEnd
050+  0000             gEnd = gEnd + 1
051+  0000             gKeyPressed       = gEnd
052+  0000             gEnd = gEnd + 1
053+  0000             gPlayerMoney      = gEnd
054+  0000             gEnd = gEnd + 2
055+  0000             
006   0000             
007   0000             ;-------------------------------------------------------------------------------
008   0000             ; Точки входа
009   0000             
010   0000                 org baseAddr
011   6063             
012   6063             begin: 
013   6063 C3 43 68    iDrawText:        jp drawText
014   6066 C3 FA 67    iDrawTextCenter:  jp drawTextCenter
015   6069 C3 3A 68    iDrawTextEx:      jp drawTextEx
016   606C C3 F9 66    iClearScreen:     jp clearScreen
017   606F C3 3C 67    iDrawImage:       jp drawImage
018   6072 C3 CC 67    iMeasureText:     jp measureText
019   6075 C3 0E 68    iCalcCoords:      jp calcCoords
020   6078 C3 E6 68    iDrawCharSub:     jp drawCharSub
021   607B C3 BA 60    iExec:            jp exec
022   607E C3 8B 60    iIrqHandler:      jp irqHandler
023   6081 C3 47 61    iDrawPanel:       jp drawPanel
024   6084             
025   6084             ;-------------------------------------------------------------------------------
026   6084             
027   6084                 org gEnd
028   608B             
029   608B             irqHandler: 
030   608B F5              PUSH  AF
031   608C C5              PUSH  BC
032   608D E5              PUSH  HL
033   608E             
034   608E                 ; Переключение видеостраницы
035   608E 3A 85 60        LD    A, (gVideoPage)
036   6091 CB 47           BIT   0, A
037   6093 CA AA 60        JP    Z, irqHandler_1
038   6096 E6 FE           AND   ~1
039   6098 32 85 60        LD    (gVideoPage), A
040   609B 47              LD    B, A
041   609C 3A 86 60        LD    A, (gSystemPage)
042   609F E6 F7           AND   ~8
043   60A1 B0              OR    B
044   60A2 32 86 60        LD    (gSystemPage), A
045   60A5 01 FD 7F        LD    BC, 7FFDh
046   60A8 ED 79           OUT   (C), A
047   60AA             irqHandler_1: 
048   60AA             
049   60AA 3A 84 60        LD    A, (gFrame)
050   60AD 3C              INC   A
051   60AE 32 84 60        LD    (gFrame), A
052   60B1             
053   60B1 CD 87 67        call  readKey
054   60B4             
055   60B4 E1              POP   HL
056   60B5 C1              POP   BC
057   60B6 F1              POP   AF
058   60B7 FB              EI
059   60B8 ED 4D           RETI
060   60BA             
061   60BA             ;-------------------------------------------------------------------------------
062   60BA             
063   60BA             exec: 
064   60BA 31 5F 60        LD    SP, stackEndAddr
065   60BD             
066   60BD E5              PUSH  HL
067   60BE                 ; Установка черной рамки
068   60BE 3E 00           LD    A, 0
069   60C0 D3 FE           OUT   (-2), A
070   60C2                 ; Очистка всех экранов
071   60C2 3E 42           LD    A, 42h
072   60C4 CD F9 66        CALL  clearScreen
073   60C7 E1              POP   HL
074   60C8             
075   60C8 11 00 70        LD    DE, moduleLoadAddr
076   60CB CD F6 60        CALL  loadFile
077   60CE C3 00 70        JP    moduleLoadAddr
078   60D1             
079   60D1             ;-------------------------------------------------------------------------------
080   60D1             
081   60D1             fileNotFound: 
082   60D1 21 00 00        ld   hl, 0
083   60D4 11 E4 60        ld   de, aFileNotFound
084   60D7 CD 3A 68        call drawTextEx
085   60DA 21 00 0A        ld   hl, 10 << 8
086   60DD D1              pop  de
087   60DE CD 3A 68        call drawTextEx
088   60E1             
089   60E1 C3 E1 60        jp $
090   60E4             
091   60E4             ;-------------------------------------------------------------------------------
092   60E4             
093   60E4             aFileNotFound db "Не найден файл ", 0
093   60E4 CDE520EDE0E9E4E5ED20F4E0E9EB2000
094   60F4             aSpace = $ - 2
095   60F4 43 00       aExt db "C",0
096   60F6             
097   60F6             ;-------------------------------------------------------------------------------
098   60F6             
099   60F6             loadFile: 
100   60F6                 ; Сохраняем адрес загрузки
101   60F6 D5              push de
102   60F7             
103   60F7                 ; Преобразование имени файла
104   60F7 01 08 08        ld   bc, 808h
105   60FA             loadFile_0: 
106   60FA 7E              ld   a, (hl)
107   60FB B7              or   a
108   60FC C2 02 61        jp   nz, loadFile_1
109   60FF 21 F2 60        ld   hl, aSpace
110   6102             loadFile_1: 
111   6102 ED A0           ldi
112   6104 10 F4           djnz loadFile_0
113   6106 21 F4 60        ld   hl, aExt
114   6109 ED A0           ldi
115   610B ED A0           ldi
116   610D E1              pop  hl
117   610E             
118   610E                 ; Установка прерываний по умолчанию
119   610E F3              di
120   610F ED 57           ld   a, i
121   6111 F5              push af
122   6112 ED 56           im   1
123   6114             
124   6114                 ; Передача имени файла
125   6114 E5              push hl
126   6115 0E 13           ld   c, 13h
127   6117 CD 13 3D        call 3D13h
128   611A             
129   611A                 ; Поиск файла
130   611A 0E 0A           ld   c, 0Ah
131   611C CD 13 3D        call 3D13h
132   611F 79              ld   a, c
133   6120 FE FF           cp   0FFh
134   6122 CA D1 60        jp   z, fileNotFound ; Файл не найден
135   6125             
136   6125                 ; Загрузка заголовка
137   6125 0E 08           ld   c, 8
138   6127 CD 13 3D        call 3D13h
139   612A             
140   612A                 ; Надо перенести имя
141   612A             
142   612A                 ; Загрузка файла
143   612A ED 5B EB 5C     ld   de, (5CEBh)
144   612E 3A EA 5C        ld   a, (5CEAh)
145   6131 47              ld   b, a
146   6132 E1              pop  hl
147   6133 0E 05           ld   c, 5
148   6135 CD 13 3D        call 3D13h
149   6138             
150   6138                 ; Восстановление страницы
151   6138 3A 86 60        LD    A, (gSystemPage)
152   613B 01 FD 7F        LD    BC, 7FFDh
153   613E ED 79           OUT   (C), A
154   6140             
155   6140                 ; Восстановление прерываний
156   6140 F1              pop  af
157   6141 ED 47           LD   i, a
158   6143 ED 5E           im   2
159   6145 FB              ei
160   6146             
161   6146 C9              ret
162   6147             
163   6147             ;-------------------------------------------------------------------------------
164   6147             
165   6147             panelX = 0
166   6147             panelY = 20
167   6147             
168   6147             drawPanel: 
169   6147 21 46 69        ld   hl, image_panel
170   614A 11 80 5A        ld   de, 5800h + panelX + (panelY << 5)
171   614D CD 3C 67        call drawImage
172   6150 21 46 69        ld   hl, image_panel
173   6153 11 80 DA        ld   de, 8000h + 5800h + panelX + (panelY << 5)
174   6156 C3 3C 67        jp   drawImage
175   6159             
001   6159             image_font: 
002   6159                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 4 ; 0
002   6159 000000000000000004
003   6162                 db 020h, 020h, 020h, 020h, 020h, 000h, 020h, 000h, 6 ; 1
003   6162 202020202000200006
004   616B                 db 050h, 050h, 050h, 000h, 000h, 000h, 000h, 000h, 6 ; 2
004   616B 505050000000000006
005   6174                 db 050h, 050h, 0F8h, 050h, 0F8h, 050h, 050h, 000h, 6 ; 3
005   6174 5050F850F850500006
006   617D                 db 088h, 070h, 088h, 088h, 088h, 070h, 088h, 000h, 6 ; 4
006   617D 887088888870880006
007   6186                 db 0C0h, 0C8h, 010h, 020h, 040h, 098h, 018h, 000h, 6 ; 5
007   6186 C0C810204098180006
008   618F                 db 040h, 0A0h, 0A0h, 040h, 0A8h, 090h, 068h, 000h, 6 ; 6
008   618F 40A0A040A890680006
009   6198                 db 020h, 020h, 020h, 000h, 000h, 000h, 000h, 000h, 6 ; 7
009   6198 202020000000000006
010   61A1                 db 020h, 040h, 080h, 080h, 080h, 040h, 020h, 000h, 4 ; 8
010   61A1 204080808040200004
011   61AA                 db 080h, 040h, 020h, 020h, 020h, 040h, 080h, 000h, 4 ; 9
011   61AA 804020202040800004
012   61B3                 db 000h, 000h, 000h, 050h, 020h, 050h, 000h, 000h, 6 ; 10
012   61B3 000000502050000006
013   61BC                 db 000h, 020h, 020h, 0F8h, 020h, 020h, 000h, 000h, 6 ; 11
013   61BC 002020F82020000006
014   61C5                 db 000h, 000h, 000h, 000h, 000h, 000h, 040h, 080h, 3 ; 12
014   61C5 000000000000408003
015   61CE                 db 000h, 000h, 000h, 0F0h, 000h, 000h, 000h, 000h, 5 ; 13
015   61CE 000000F00000000005
016   61D7                 db 000h, 000h, 000h, 000h, 000h, 000h, 040h, 000h, 4 ; 14
016   61D7 000000000000400004
017   61E0                 db 000h, 008h, 010h, 020h, 040h, 080h, 000h, 000h, 6 ; 15
017   61E0 000810204080000006
018   61E9                 db 060h, 090h, 090h, 090h, 090h, 090h, 060h, 000h, 5 ; 16
018   61E9 609090909090600005
019   61F2                 db 040h, 0C0h, 040h, 040h, 040h, 040h, 0E0h, 000h, 4 ; 17
019   61F2 40C040404040E00004
020   61FB                 db 060h, 090h, 010h, 020h, 040h, 080h, 0F0h, 000h, 5 ; 18
020   61FB 609010204080F00005
021   6204                 db 060h, 090h, 010h, 020h, 010h, 090h, 060h, 000h, 5 ; 19
021   6204 609010201090600005
022   620D                 db 010h, 030h, 050h, 090h, 0F0h, 010h, 010h, 000h, 5 ; 20
022   620D 10305090F010100005
023   6216                 db 0F0h, 080h, 0E0h, 010h, 010h, 010h, 0E0h, 000h, 5 ; 21
023   6216 F080E0101010E00005
024   621F                 db 060h, 080h, 0E0h, 090h, 090h, 090h, 060h, 000h, 5 ; 22
024   621F 6080E0909090600005
025   6228                 db 0F0h, 010h, 020h, 020h, 040h, 040h, 040h, 000h, 5 ; 23
025   6228 F01020204040400005
026   6231                 db 060h, 090h, 090h, 060h, 090h, 090h, 060h, 000h, 5 ; 24
026   6231 609090609090600005
027   623A                 db 060h, 090h, 090h, 070h, 010h, 010h, 060h, 000h, 5 ; 25
027   623A 609090701010600005
028   6243                 db 000h, 000h, 040h, 000h, 000h, 040h, 000h, 000h, 4 ; 26
028   6243 000040000040000004
029   624C                 db 000h, 000h, 040h, 000h, 000h, 040h, 040h, 000h, 4 ; 27
029   624C 000040000040400004
030   6255                 db 010h, 020h, 040h, 080h, 040h, 020h, 010h, 000h, 5 ; 28
030   6255 102040804020100005
031   625E                 db 000h, 000h, 0F8h, 000h, 0F8h, 000h, 000h, 000h, 6 ; 29
031   625E 0000F800F800000006
032   6267                 db 040h, 020h, 010h, 008h, 010h, 020h, 040h, 000h, 7 ; 30
032   6267 402010081020400007
033   6270                 db 060h, 090h, 010h, 020h, 020h, 000h, 020h, 000h, 5 ; 31
033   6270 609010202000200005
034   6279                 db 000h, 040h, 060h, 070h, 060h, 040h, 000h, 000h, 6 ; 32
034   6279 004060706040000006
035   6282                 db 020h, 050h, 088h, 088h, 0F8h, 088h, 088h, 000h, 6 ; 33
035   6282 20508888F888880006
036   628B                 db 0F0h, 088h, 088h, 0F0h, 088h, 088h, 0F0h, 000h, 6 ; 34
036   628B F08888F08888F00006
037   6294                 db 070h, 088h, 080h, 080h, 080h, 088h, 070h, 000h, 6 ; 35
037   6294 708880808088700006
038   629D                 db 0F0h, 088h, 088h, 088h, 088h, 088h, 0F0h, 000h, 6 ; 36
038   629D F08888888888F00006
039   62A6                 db 0F8h, 080h, 080h, 0F0h, 080h, 080h, 0F8h, 000h, 6 ; 37
039   62A6 F88080F08080F80006
040   62AF                 db 0F8h, 080h, 080h, 0F0h, 080h, 080h, 080h, 000h, 6 ; 38
040   62AF F88080F08080800006
041   62B8                 db 078h, 080h, 080h, 080h, 098h, 088h, 078h, 000h, 6 ; 39
041   62B8 788080809888780006
042   62C1                 db 088h, 088h, 088h, 0F8h, 088h, 088h, 088h, 000h, 6 ; 40
042   62C1 888888F88888880006
043   62CA                 db 070h, 020h, 020h, 020h, 020h, 020h, 070h, 000h, 6 ; 41
043   62CA 702020202020700006
044   62D3                 db 008h, 008h, 008h, 008h, 008h, 088h, 070h, 000h, 6 ; 42
044   62D3 080808080888700006
045   62DC                 db 088h, 090h, 0A0h, 0C0h, 0A0h, 090h, 088h, 000h, 6 ; 43
045   62DC 8890A0C0A090880006
046   62E5                 db 080h, 080h, 080h, 080h, 080h, 080h, 0F8h, 000h, 6 ; 44
046   62E5 808080808080F80006
047   62EE                 db 088h, 0D8h, 0A8h, 0A8h, 088h, 088h, 088h, 000h, 6 ; 45
047   62EE 88D8A8A88888880006
048   62F7                 db 088h, 088h, 0C8h, 0A8h, 098h, 088h, 088h, 000h, 6 ; 46
048   62F7 8888C8A89888880006
049   6300                 db 070h, 088h, 088h, 088h, 088h, 088h, 070h, 000h, 6 ; 47
049   6300 708888888888700006
050   6309                 db 0F0h, 088h, 088h, 0F0h, 080h, 080h, 080h, 000h, 6 ; 48
050   6309 F08888F08080800006
051   6312                 db 070h, 088h, 088h, 088h, 0A8h, 090h, 068h, 000h, 6 ; 49
051   6312 70888888A890680006
052   631B                 db 0F0h, 088h, 088h, 0F0h, 0A0h, 090h, 088h, 000h, 6 ; 50
052   631B F08888F0A090880006
053   6324                 db 070h, 088h, 080h, 070h, 008h, 088h, 070h, 000h, 6 ; 51
053   6324 708880700888700006
054   632D                 db 0F8h, 020h, 020h, 020h, 020h, 020h, 020h, 000h, 6 ; 52
054   632D F82020202020200006
055   6336                 db 088h, 088h, 088h, 088h, 088h, 088h, 070h, 000h, 6 ; 53
055   6336 888888888888700006
056   633F                 db 088h, 088h, 088h, 088h, 088h, 050h, 020h, 000h, 6 ; 54
056   633F 888888888850200006
057   6348                 db 088h, 088h, 088h, 0A8h, 0A8h, 0D8h, 088h, 000h, 6 ; 55
057   6348 888888A8A8D8880006
058   6351                 db 088h, 088h, 050h, 020h, 050h, 088h, 088h, 000h, 6 ; 56
058   6351 888850205088880006
059   635A                 db 088h, 088h, 050h, 020h, 020h, 020h, 020h, 000h, 6 ; 57
059   635A 888850202020200006
060   6363                 db 0F8h, 008h, 010h, 020h, 040h, 080h, 0F8h, 000h, 6 ; 58
060   6363 F80810204080F80006
061   636C                 db 078h, 040h, 040h, 040h, 040h, 040h, 078h, 000h, 7 ; 59
061   636C 784040404040780007
062   6375                 db 000h, 080h, 040h, 020h, 010h, 008h, 000h, 000h, 6 ; 60
062   6375 008040201008000006
063   637E                 db 0F0h, 010h, 010h, 010h, 010h, 010h, 0F0h, 000h, 5 ; 61
063   637E F01010101010F00005
064   6387                 db 000h, 020h, 050h, 088h, 000h, 000h, 000h, 000h, 6 ; 62
064   6387 002050880000000006
065   6390                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 0FCh, 7 ; 63
065   6390 00000000000000FC07
066   6399                 db 040h, 020h, 010h, 000h, 000h, 000h, 000h, 000h, 6 ; 64
066   6399 402010000000000006
067   63A2                 db 000h, 000h, 060h, 010h, 070h, 090h, 070h, 000h, 5 ; 65
067   63A2 000060107090700005
068   63AB                 db 080h, 080h, 0E0h, 090h, 090h, 090h, 0E0h, 000h, 5 ; 66
068   63AB 8080E0909090E00005
069   63B4                 db 000h, 000h, 070h, 080h, 080h, 080h, 070h, 000h, 5 ; 67
069   63B4 000070808080700005
070   63BD                 db 010h, 010h, 070h, 090h, 090h, 090h, 070h, 000h, 5 ; 68
070   63BD 101070909090700005
071   63C6                 db 000h, 000h, 060h, 090h, 0F0h, 080h, 060h, 000h, 5 ; 69
071   63C6 00006090F080600005
072   63CF                 db 030h, 048h, 040h, 0F0h, 040h, 040h, 040h, 000h, 6 ; 70
072   63CF 304840F04040400006
073   63D8                 db 000h, 000h, 070h, 090h, 090h, 070h, 010h, 060h, 5 ; 71
073   63D8 000070909070106005
074   63E1                 db 080h, 080h, 0E0h, 090h, 090h, 090h, 090h, 000h, 5 ; 72
074   63E1 8080E0909090900005
075   63EA                 db 080h, 000h, 080h, 080h, 080h, 080h, 080h, 000h, 2 ; 73
075   63EA 800080808080800002
076   63F3                 db 010h, 000h, 030h, 010h, 010h, 010h, 090h, 060h, 5 ; 74
076   63F3 100030101010906005
077   63FC                 db 080h, 080h, 090h, 0A0h, 0C0h, 0A0h, 090h, 000h, 5 ; 75
077   63FC 808090A0C0A0900005
078   6405                 db 080h, 080h, 080h, 080h, 080h, 080h, 080h, 000h, 2 ; 76
078   6405 808080808080800002
079   640E                 db 000h, 000h, 0D8h, 0A8h, 0A8h, 0A8h, 0A8h, 000h, 6 ; 77
079   640E 0000D8A8A8A8A80006
080   6417                 db 000h, 000h, 0A0h, 0D0h, 090h, 090h, 090h, 000h, 5 ; 78
080   6417 0000A0D09090900005
081   6420                 db 000h, 000h, 060h, 090h, 090h, 090h, 060h, 000h, 5 ; 79
081   6420 000060909090600005
082   6429                 db 000h, 000h, 0E0h, 090h, 090h, 0E0h, 080h, 080h, 5 ; 80
082   6429 0000E09090E0808005
083   6432                 db 000h, 000h, 070h, 090h, 090h, 070h, 010h, 010h, 5 ; 81
083   6432 000070909070101005
084   643B                 db 000h, 000h, 0B0h, 0C0h, 080h, 080h, 080h, 000h, 5 ; 82
084   643B 0000B0C08080800005
085   6444                 db 000h, 000h, 060h, 080h, 060h, 010h, 060h, 000h, 5 ; 83
085   6444 000060806010600005
086   644D                 db 040h, 040h, 0E0h, 040h, 040h, 040h, 030h, 000h, 5 ; 84
086   644D 4040E0404040300005
087   6456                 db 000h, 000h, 090h, 090h, 090h, 0B0h, 050h, 000h, 5 ; 85
087   6456 0000909090B0500005
088   645F                 db 000h, 000h, 088h, 088h, 050h, 050h, 020h, 000h, 6 ; 86
088   645F 000088885050200006
089   6468                 db 000h, 000h, 088h, 088h, 0A8h, 0A8h, 050h, 000h, 6 ; 87
089   6468 00008888A8A8500006
090   6471                 db 000h, 000h, 088h, 050h, 020h, 050h, 088h, 000h, 6 ; 88
090   6471 000088502050880006
091   647A                 db 000h, 000h, 090h, 090h, 090h, 070h, 010h, 060h, 5 ; 89
091   647A 000090909070106005
092   6483                 db 000h, 000h, 0F0h, 020h, 040h, 080h, 0F0h, 000h, 5 ; 90
092   6483 0000F0204080F00005
093   648C                 db 000h, 000h, 048h, 090h, 048h, 000h, 000h, 000h, 6 ; 91
093   648C 000048904800000006
094   6495                 db 078h, 084h, 0B4h, 0A4h, 0B4h, 084h, 078h, 000h, 7 ; 92
094   6495 7884B4A4B484780007
095   649E                 db 000h, 000h, 090h, 048h, 090h, 000h, 000h, 000h, 6 ; 93
095   649E 000090489000000006
096   64A7                 db 0FCh, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 7 ; 94
096   64A7 FC0000000000000007
097   64B0                 db 050h, 000h, 070h, 088h, 0F8h, 080h, 078h, 000h, 6 ; 95
097   64B0 50007088F880780006
098   64B9                 db 070h, 088h, 088h, 088h, 0F8h, 088h, 088h, 000h, 6 ; 96
098   64B9 70888888F888880006
099   64C2                 db 0F8h, 080h, 080h, 0F0h, 088h, 088h, 0F0h, 000h, 6 ; 97
099   64C2 F88080F08888F00006
100   64CB                 db 0F0h, 088h, 088h, 0F0h, 088h, 088h, 0F0h, 000h, 6 ; 98
100   64CB F08888F08888F00006
101   64D4                 db 0F8h, 080h, 080h, 080h, 080h, 080h, 080h, 000h, 6 ; 99
101   64D4 F88080808080800006
102   64DD                 db 038h, 048h, 048h, 048h, 048h, 048h, 0FCh, 084h, 7 ; 100
102   64DD 384848484848FC8407
103   64E6                 db 0F8h, 080h, 080h, 0F0h, 080h, 080h, 0F8h, 000h, 6 ; 101
103   64E6 F88080F08080F80006
104   64EF                 db 0A8h, 0A8h, 0A8h, 070h, 0A8h, 0A8h, 0A8h, 000h, 6 ; 102
104   64EF A8A8A870A8A8A80006
105   64F8                 db 070h, 088h, 008h, 030h, 008h, 088h, 070h, 000h, 6 ; 103
105   64F8 708808300888700006
106   6501                 db 088h, 088h, 098h, 0A8h, 0C8h, 088h, 088h, 000h, 6 ; 104
106   6501 888898A8C888880006
107   650A                 db 088h, 088h, 098h, 0A8h, 0C8h, 088h, 088h, 000h, 6 ; 105
107   650A 888898A8C888880006
108   6513                 db 088h, 090h, 0A0h, 0C0h, 0A0h, 090h, 088h, 000h, 6 ; 106
108   6513 8890A0C0A090880006
109   651C                 db 018h, 028h, 048h, 088h, 088h, 088h, 088h, 000h, 6 ; 107
109   651C 182848888888880006
110   6525                 db 088h, 0D8h, 0A8h, 088h, 088h, 088h, 088h, 000h, 6 ; 108
110   6525 88D8A8888888880006
111   652E                 db 088h, 088h, 088h, 0F8h, 088h, 088h, 088h, 000h, 6 ; 109
111   652E 888888F88888880006
112   6537                 db 070h, 088h, 088h, 088h, 088h, 088h, 070h, 000h, 6 ; 110
112   6537 708888888888700006
113   6540                 db 0F8h, 088h, 088h, 088h, 088h, 088h, 088h, 000h, 6 ; 111
113   6540 F88888888888880006
114   6549                 db 0F0h, 088h, 088h, 088h, 0F0h, 080h, 080h, 000h, 6 ; 112
114   6549 F0888888F080800006
115   6552                 db 070h, 088h, 080h, 080h, 080h, 088h, 070h, 000h, 6 ; 113
115   6552 708880808088700006
116   655B                 db 0F8h, 020h, 020h, 020h, 020h, 020h, 020h, 000h, 6 ; 114
116   655B F82020202020200006
117   6564                 db 088h, 088h, 088h, 078h, 008h, 088h, 070h, 000h, 6 ; 115
117   6564 888888780888700006
118   656D                 db 020h, 070h, 0A8h, 0A8h, 0A8h, 070h, 020h, 000h, 6 ; 116
118   656D 2070A8A8A870200006
119   6576                 db 088h, 088h, 050h, 020h, 050h, 088h, 088h, 000h, 6 ; 117
119   6576 888850205088880006
120   657F                 db 090h, 090h, 090h, 090h, 090h, 090h, 0F8h, 008h, 6 ; 118
120   657F 909090909090F80806
121   6588                 db 088h, 088h, 088h, 078h, 008h, 008h, 008h, 000h, 6 ; 119
121   6588 888888780808080006
122   6591                 db 0A8h, 0A8h, 0A8h, 0A8h, 0A8h, 0A8h, 0F8h, 000h, 6 ; 120
122   6591 A8A8A8A8A8A8F80006
123   659A                 db 0A8h, 0A8h, 0A8h, 0A8h, 0A8h, 0A8h, 0FCh, 004h, 7 ; 121
123   659A A8A8A8A8A8A8FC0407
124   65A3                 db 0C0h, 040h, 070h, 048h, 048h, 048h, 070h, 000h, 6 ; 122
124   65A3 C04070484848700006
125   65AC                 db 084h, 084h, 0E4h, 094h, 094h, 094h, 0E4h, 000h, 7 ; 123
125   65AC 8484E4949494E40007
126   65B5                 db 080h, 080h, 0F0h, 088h, 088h, 088h, 0F0h, 000h, 6 ; 124
126   65B5 8080F0888888F00006
127   65BE                 db 070h, 088h, 008h, 078h, 008h, 088h, 070h, 000h, 6 ; 125
127   65BE 708808780888700006
128   65C7                 db 090h, 0A8h, 0A8h, 0E8h, 0A8h, 0A8h, 090h, 000h, 6 ; 126
128   65C7 90A8A8E8A8A8900006
129   65D0                 db 078h, 088h, 088h, 088h, 078h, 048h, 088h, 000h, 6 ; 127
129   65D0 788888887848880006
130   65D9                 db 000h, 000h, 060h, 010h, 070h, 090h, 070h, 000h, 5 ; 128
130   65D9 000060107090700005
131   65E2                 db 000h, 000h, 0E0h, 080h, 0E0h, 090h, 0E0h, 000h, 5 ; 129
131   65E2 0000E080E090E00005
132   65EB                 db 000h, 000h, 0E0h, 090h, 0E0h, 090h, 0E0h, 000h, 5 ; 130
132   65EB 0000E090E090E00005
133   65F4                 db 000h, 000h, 0E0h, 080h, 080h, 080h, 080h, 000h, 4 ; 131
133   65F4 0000E0808080800004
134   65FD                 db 000h, 000h, 030h, 050h, 050h, 050h, 0F8h, 088h, 6 ; 132
134   65FD 000030505050F88806
135   6606                 db 000h, 000h, 060h, 090h, 0F0h, 080h, 060h, 000h, 5 ; 133
135   6606 00006090F080600005
136   660F                 db 000h, 000h, 0A8h, 0A8h, 070h, 0A8h, 0A8h, 000h, 6 ; 134
136   660F 0000A8A870A8A80006
137   6618                 db 000h, 000h, 060h, 090h, 020h, 090h, 060h, 000h, 5 ; 135
137   6618 000060902090600005
138   6621                 db 000h, 000h, 090h, 090h, 0B0h, 0D0h, 090h, 000h, 5 ; 136
138   6621 00009090B0D0900005
139   662A                 db 060h, 000h, 090h, 090h, 0B0h, 0D0h, 090h, 000h, 5 ; 137
139   662A 60009090B0D0900005
140   6633                 db 000h, 000h, 090h, 0A0h, 0C0h, 0A0h, 090h, 000h, 5 ; 138
140   6633 000090A0C0A0900005
141   663C                 db 000h, 000h, 030h, 050h, 090h, 090h, 090h, 000h, 5 ; 139
141   663C 000030509090900005
142   6645                 db 000h, 000h, 088h, 0D8h, 0A8h, 088h, 088h, 000h, 6 ; 140
142   6645 000088D8A888880006
143   664E                 db 000h, 000h, 090h, 090h, 0F0h, 090h, 090h, 000h, 5 ; 141
143   664E 00009090F090900005
144   6657                 db 000h, 000h, 060h, 090h, 090h, 090h, 060h, 000h, 5 ; 142
144   6657 000060909090600005
145   6660                 db 000h, 000h, 0F0h, 090h, 090h, 090h, 090h, 000h, 5 ; 143
145   6660 0000F0909090900005
146   6669                 db 000h, 000h, 0E0h, 090h, 090h, 0E0h, 080h, 000h, 5 ; 144
146   6669 0000E09090E0800005
147   6672                 db 000h, 000h, 060h, 090h, 080h, 090h, 060h, 000h, 5 ; 145
147   6672 000060908090600005
148   667B                 db 000h, 000h, 0E0h, 040h, 040h, 040h, 040h, 000h, 4 ; 146
148   667B 0000E0404040400004
149   6684                 db 000h, 000h, 090h, 090h, 070h, 010h, 060h, 000h, 5 ; 147
149   6684 000090907010600005
150   668D                 db 000h, 020h, 070h, 0A8h, 0A8h, 0A8h, 070h, 020h, 6 ; 148
150   668D 002070A8A8A8702006
151   6696                 db 000h, 000h, 090h, 090h, 060h, 090h, 090h, 000h, 5 ; 149
151   6696 000090906090900005
152   669F                 db 000h, 000h, 090h, 090h, 090h, 090h, 0F8h, 008h, 6 ; 150
152   669F 000090909090F80806
153   66A8                 db 000h, 000h, 090h, 090h, 070h, 010h, 010h, 000h, 5 ; 151
153   66A8 000090907010100005
154   66B1                 db 000h, 000h, 0A8h, 0A8h, 0A8h, 0A8h, 0F8h, 000h, 6 ; 152
154   66B1 0000A8A8A8A8F80006
155   66BA                 db 000h, 000h, 0A8h, 0A8h, 0A8h, 0A8h, 0FCh, 004h, 7 ; 153
155   66BA 0000A8A8A8A8FC0407
156   66C3                 db 000h, 000h, 0C0h, 070h, 048h, 048h, 070h, 000h, 6 ; 154
156   66C3 0000C0704848700006
157   66CC                 db 000h, 000h, 084h, 0E4h, 094h, 094h, 0E4h, 000h, 7 ; 155
157   66CC 000084E49494E40007
158   66D5                 db 000h, 000h, 080h, 0E0h, 090h, 090h, 0E0h, 000h, 5 ; 156
158   66D5 000080E09090E00005
159   66DE                 db 000h, 000h, 0E0h, 010h, 070h, 010h, 0E0h, 000h, 5 ; 157
159   66DE 0000E0107010E00005
160   66E7                 db 000h, 000h, 098h, 0A4h, 0E4h, 0A4h, 098h, 000h, 7 ; 158
160   66E7 000098A4E4A4980007
161   66F0                 db 000h, 000h, 070h, 090h, 090h, 070h, 090h, 000h, 5 ; 159
161   66F0 000070909070900005
162   66F9             
001   66F9                 ; 3 // Очистить оба экрана
002   66F9                 ; 4 // Вход: A - атрбут
003   66F9                 ; 5 // Сохраняет: A', BC', DE', HL', IY, IX
004   66F9                 ; 7 void clearScreen(a)
005   66F9             clearScreen: 
006   66F9                 ; 8 {
007   66F9                 ; 9 push(a)
008   66F9                 ; 10 {
009   66F9 F5              push af
010   66FA                 ; 11 // В прерывании не выбирать видеостраницу
011   66FA                 ; 12 gVideoPage = a = 0;
012   66FA 3E 00           ld   a, 0
013   66FC 32 85 60        ld   (gVideoPage), a
014   66FF                 ; 14 // Выбрать вторую видеостраницу для записи
015   66FF                 ; 15 a = gSystemPage;
016   66FF 3A 86 60        ld   a, (gSystemPage)
017   6702                 ; 16 a |= 7;
018   6702 F6 07           or   7
019   6704                 ; 17 gSystemPage = a;
020   6704 32 86 60        ld   (gSystemPage), a
021   6707                 ; 18 out(bc = 0x7FFD, a);
022   6707 01 FD 7F        ld   bc, 32765
023   670A ED 79           out  (c), a
024   670C                 ; 19 }
025   670C F1              pop  af
026   670D                 ; 21 clearScreen1(hl = [0x5B00 - 1], a);
027   670D 21 FF 5A        ld   hl, 23295
028   6710 CD 27 67        call clearScreen1
029   6713                 ; 22 clearScreen1(hl = [0xDB00 - 1], a);
030   6713 21 FF DA        ld   hl, 56063
031   6716 CD 27 67        call clearScreen1
032   6719                 ; 24 // Выбрать первую видеостраницу для отображения
033   6719                 ; 25 a = gSystemPage;
034   6719 3A 86 60        ld   a, (gSystemPage)
035   671C                 ; 26 a &= [~8];
036   671C E6 F7           and  ~(8)
037   671E                 ; 27 gSystemPage = a;
038   671E 32 86 60        ld   (gSystemPage), a
039   6721                 ; 28 out(bc = 0x7FFD, a);
040   6721 01 FD 7F        ld   bc, 32765
041   6724 ED 79           out  (c), a
042   6726                 ; 29 }
043   6726 C9              ret
044   6727                 ; 31 void clearScreen1(hl, a)
045   6727             clearScreen1: 
046   6727                 ; 32 {
047   6727                 ; 33 d = h;
048   6727 54              ld   d, h
049   6728                 ; 34 e = l;
050   6728 5D              ld   e, l
051   6729                 ; 35 de--;
052   6729 1B              dec  de
053   672A                 ; 36 push(de, hl)
054   672A                 ; 37 {
055   672A D5              push de
056   672B E5              push hl
057   672C                 ; 38 *hl = 0;
058   672C 36 00           ld   (hl), 0
059   672E                 ; 39 lddr(bc = [0x1B00 - 1]);
060   672E 01 FF 1A        ld   bc, 6911
061   6731 ED B8           lddr
062   6733                 ; 40 }
063   6733 E1              pop  hl
064   6734 D1              pop  de
065   6735                 ; 41 *hl = a;
066   6735 77              ld   (hl), a
067   6736                 ; 42 lddr(bc = [0x300 - 1]);
068   6736 01 FF 02        ld   bc, 767
069   6739 ED B8           lddr
070   673B                 ; 43 }
071   673B C9              ret
072   673C             
001   673C             ; ZX Spectrum test (c) 30-10-2019 Alemorf aleksey.f.morozov@gmail.com
002   673C             
003   673C             ;-------------------------------------------------------------------------------
004   673C             ; Вывести изображение
005   673C             ; HL - адрес изображения
006   673C             ; DE - адрес в видеопамяти (5800 - 5CFFh)
007   673C             
008   673C             drawImage: 
009   673C                     ; Преобразование адреса в DE из формата X + Y * 32 в формат YY000 YYYXXXXX
010   673C D5                  PUSH   DE
011   673D 7A                  LD     A, D
012   673E E6 80               AND    80h
013   6740 47                  LD     B, A
014   6741 7A                  LD     A, D
015   6742 87                  ADD    A
016   6743 87                  ADD    A
017   6744 87                  ADD    A
018   6745 C6 80               ADD    40h - 0C0h
019   6747 B0                  OR     B
020   6748 57                  LD     D, A
021   6749             
022   6749                     ; Чтение высоты и ширины. Сохранение  её в стеке
023   6749 4E                  LD     C, (HL)
024   674A 23                  INC    HL
025   674B 46                  LD     B, (HL)
026   674C 23                  INC    HL
027   674D C5                  PUSH   BC
028   674E             
029   674E                     ; Вывод чернобелой графики
030   674E             drawImage_1: 
031   674E C5                  PUSH   BC
032   674F             
033   674F                     ; Копирование строки
034   674F 3E 08               LD     A, 8
035   6751             drawImage_3: 
036   6751 C5                  PUSH   BC
037   6752 D5                  PUSH   DE
038   6753 06 00               LD     B, 0
039   6755 ED B0               LDIR
040   6757 D1                  POP    DE
041   6758 C1                  POP    BC
042   6759 14                  INC    D
043   675A 3D                  DEC    A
044   675B C2 51 67            JP     NZ, drawImage_3
045   675E             
046   675E                     ; Адрес следующей строки
047   675E 01 20 F8            LD     BC, 0x20 - 0x800
048   6761 EB                  EX     DE, HL
049   6762 09                  ADD    HL, BC
050   6763 EB                  EX     DE, HL
051   6764 7A                  LD     A, D
052   6765 E6 07               AND    7
053   6767 C4 80 67            CALL   NZ, drawImage_4
054   676A             
055   676A                     ; Следующая строка
056   676A C1                  POP    BC
057   676B 10 E1               DJNZ   drawImage_1
058   676D             
059   676D                     ; Восстановление координат вывода и размера
060   676D C1                  POP    BC
061   676E D1                  POP    DE
062   676F             
063   676F                     ; Цикл для каждой строки
064   676F             drawImage_2: 
065   676F C5                  PUSH   BC
066   6770             
067   6770                     ; Копирование строки
068   6770 D5                  PUSH   DE
069   6771 06 00               LD     B, 0
070   6773 ED B0               LDIR
071   6775 D1                  POP    DE
072   6776             
073   6776                     ; Адрес следующей строки
074   6776 EB                  EX     DE, HL
075   6777 01 20 00            LD     BC, 32
076   677A 09                  ADD    HL, BC
077   677B EB                  EX     DE, HL
078   677C             
079   677C                     ; Следующая строка
080   677C C1                  POP    BC
081   677D 10 F0               DJNZ   drawImage_2
082   677F             
083   677F C9                  RET
084   6780             
085   6780             ;-------------------------------------------------------------------------------
086   6780             
087   6780             drawImage_4: 
088   6780 01 00 07            LD     BC, 0x800 - 0x100
089   6783 EB                  EX     DE, HL
090   6784 09                  ADD    HL, BC
091   6785 EB                  EX     DE, HL
092   6786 C9                  RET
093   6787             
001   6787                 ; 3 const int KEY_UP = 1;
002   6787                 ; 4 const int KEY_DOWN = 2;
003   6787                 ; 5 const int KEY_LEFT = 4;
004   6787                 ; 6 const int KEY_RIGHT = 8;
005   6787                 ; 7 const int KEY_FIRE = 16;
006   6787                 ; 9 // Использует A, BC, HL
007   6787                 ; 10 void readKey()
008   6787             readKey: 
009   6787                 ; 11 {
010   6787                 ; 12 c = in(bc = 0xEFFE);
011   6787 01 FE EF        ld   bc, 61438
012   678A ED 48           in   c, (c)
013   678C                 ; 13 a ^= a;
014   678C AF              xor  a
015   678D                 ; 14 if (c & 0x04) a |= KEY_RIGHT;
016   678D CB 51           bit  2, c
017   678F CA 94 67        jp   z, l1000
018   6792 F6 08           or   8
019   6794                 ; 15 if (c & 0x08) a |= KEY_UP;
020   6794             l1000: 
021   6794 CB 59           bit  3, c
022   6796 CA 9B 67        jp   z, l1001
023   6799 F6 01           or   1
024   679B                 ; 16 if (c & 0x10) a |= KEY_DOWN;
025   679B             l1001: 
026   679B CB 61           bit  4, c
027   679D CA A2 67        jp   z, l1002
028   67A0 F6 02           or   2
029   67A2                 ; 17 c = in(bc = 0xF7FE);
030   67A2             l1002: 
031   67A2 01 FE F7        ld   bc, 63486
032   67A5 ED 48           in   c, (c)
033   67A7                 ; 18 if (c & 0x10) a |= KEY_LEFT;
034   67A7 CB 61           bit  4, c
035   67A9 CA AE 67        jp   z, l1003
036   67AC F6 04           or   4
037   67AE                 ; 19 c = in(bc = 0x7FFE);
038   67AE             l1003: 
039   67AE 01 FE 7F        ld   bc, 32766
040   67B1 ED 48           in   c, (c)
041   67B3                 ; 20 if (c & 0x01) a |= KEY_FIRE;
042   67B3 CB 41           bit  0, c
043   67B5 CA BA 67        jp   z, l1004
044   67B8 F6 10           or   16
045   67BA                 ; 21 a ^= 0xFF;
046   67BA             l1004: 
047   67BA EE FF           xor  255
048   67BC                 ; 23 // Чтение прошлого значения и сохранение нового
049   67BC                 ; 24 b = a;
050   67BC 47              ld   b, a
051   67BD                 ; 25 hl = &gKeyPressed;
052   67BD 21 88 60        ld   hl, gKeyPressed
053   67C0                 ; 26 a = *hl;
054   67C0 7E              ld   a, (hl)
055   67C1                 ; 27 *hl = b;
056   67C1 70              ld   (hl), b
057   67C2                 ; 29 // Выделение события нажатия
058   67C2                 ; 30 a ^= 0xFF;
059   67C2 EE FF           xor  255
060   67C4                 ; 31 a &= b;
061   67C4 A0              and  b
062   67C5                 ; 32 hl = &gKeyTrigger;
063   67C5 21 87 60        ld   hl, gKeyTrigger
064   67C8                 ; 33 a |= *hl;
065   67C8 B6              or   (hl)
066   67C9                 ; 34 *hl = a;
067   67C9 77              ld   (hl), a
068   67CA                 ; 36 return;
069   67CA C9              ret
070   67CB                 ; 37 }
071   67CB C9              ret
072   67CC             
001   67CC                 ; 2 // Вход: DE - текст
002   67CC                 ; 3 // Выход: С - результат, A - последний символ, DE - адрес символа за последним символом
003   67CC                 ; 4 // Портит: HL
004   67CC                 ; 6 void measureText()
005   67CC             measureText: 
006   67CC                 ; 7 {
007   67CC                 ; 8 c = 0;
008   67CC 0E 00           ld   c, 0
009   67CE                 ; 9 while()
010   67CE             l0: 
011   67CE                 ; 10 {
012   67CE                 ; 11 a = *de; de++;
013   67CE 1A              ld   a, (de)
014   67CF 13              inc  de
015   67D0                 ; 12 if (a < ' ') return;
016   67D0 FE 20           cp   32
017   67D2 D8              ret  c
018   67D3                 ; 14 // Вычисление адреса символа (de = image_font + a * 9)
019   67D3                 ; 15 push(de)
020   67D3                 ; 16 {
021   67D3 D5              push de
022   67D4                 ; 17 calcCharAddr(); //  HL - адрес символа в знакогенераторе, DE - мусор
023   67D4 CD E3 67        call calcCharAddr
024   67D7                 ; 18 hl += (de = 8);
025   67D7 11 08 00        ld   de, 8
026   67DA 19              add  hl, de
027   67DB                 ; 19 a = *hl;
028   67DB 7E              ld   a, (hl)
029   67DC                 ; 20 c = (a += c);
030   67DC 81              add  c
031   67DD 4F              ld   c, a
032   67DE                 ; 21 }
033   67DE D1              pop  de
034   67DF                 ; 22 }
035   67DF C3 CE 67        jp   l0
036   67E2                 ; 23 }
037   67E2 C9              ret
038   67E3                 ; 25 // Вычисление адреса символа
039   67E3                 ; 26 // Вход: A - символ
040   67E3                 ; 27 // Выход: HL - адрес символа в знакогенераторе
041   67E3                 ; 28 // Портит: DE
042   67E3                 ; 30 void calcCharAddr()
043   67E3             calcCharAddr: 
044   67E3                 ; 31 {
045   67E3                 ; 32 a -= ' ';
046   67E3 D6 20           sub  32
047   67E5                 ; 33 if (a >= 96) a -= 64;
048   67E5 FE 60           cp   96
049   67E7 DA EC 67        jp   c, l2
050   67EA D6 40           sub  64
051   67EC                 ; 34 h = 0; l = a;
052   67EC             l2: 
053   67EC 26 00           ld   h, 0
054   67EE 6F              ld   l, a
055   67EF                 ; 35 d = h; e = l;
056   67EF 54              ld   d, h
057   67F0 5D              ld   e, l
058   67F1                 ; 36 (((hl += hl) += hl) += hl) += de;
059   67F1 29              add  hl, hl
060   67F2 29              add  hl, hl
061   67F3 29              add  hl, hl
062   67F4 19              add  hl, de
063   67F5                 ; 37 hl += (de = &image_font);
064   67F5 11 59 61        ld   de, image_font
065   67F8 19              add  hl, de
066   67F9                 ; 38 }
067   67F9 C9              ret
068   67FA                 ; 40 // Вывод текста по центру экрана
069   67FA                 ; 41 // Вход: DE - текст, H - строка
070   67FA                 ; 43 void drawTextCenter()
071   67FA             drawTextCenter: 
072   67FA                 ; 44 {
073   67FA                 ; 45 ex(a, a);
074   67FA 08              ex   af, af
075   67FB                 ; 46 push(hl, de)
076   67FB                 ; 47 {
077   67FB E5              push hl
078   67FC D5              push de
079   67FD                 ; 48 measureText();
080   67FD CD CC 67        call measureText
081   6800                 ; 49 a = (((a = 256) -= c) >>= 1);
082   6800 3E 00           ld   a, 256
083   6802 91              sub  c
084   6803 CB 3F           srl  a
085   6805 7F              ld   a, a
086   6806                 ; 50 }
087   6806 D1              pop  de
088   6807 E1              pop  hl
089   6808                 ; 51 l = a;
090   6808 6F              ld   l, a
091   6809                 ; 52 ex(a, a);
092   6809 08              ex   af, af
093   680A                 ; 53 drawTextEx();
094   680A CD 3A 68        call drawTextEx
095   680D                 ; 54 }
096   680D C9              ret
097   680E                 ; 56 // Вычисление адреса в видеопамяти и смещения в битах.
098   680E                 ; 57 // Вход: H - коодината y, L - коодината x
099   680E                 ; 58 // Выход: HL - адрес, C - смещение в битах
100   680E                 ; 59 // Портит: A, B
101   680E                 ; 61 void calcCoords()
102   680E             calcCoords: 
103   680E                 ; 62 {
104   680E                 ; 63 // Необходимо разместить Y в регистре HL следующим образом
105   680E                 ; 64 // ...76210 543.....
106   680E                 ; 66 c = ((a = l) &= 7); // Из координаты X получаем смещение в битах
107   680E 7D              ld   a, l
108   680F E6 07           and  7
109   6811 4F              ld   c, a
110   6812                 ; 67 l >>= 3; //  Из координаты X смещение в байтах
111   6812 CB 3D           srl  l
112   6814 CB 3D           srl  l
113   6816 CB 3D           srl  l
114   6818                 ; 68 l = ((((a = h) <<= 2) &= 0xE0) |= l);
115   6818 7C              ld   a, h
116   6819 CB 27           sla  a
117   681B CB 27           sla  a
118   681D E6 E0           and  224
119   681F B5              or   l
120   6820 6F              ld   l, a
121   6821                 ; 69 b = (((a = h) >>= 3) &= 0x18);
122   6821 7C              ld   a, h
123   6822 CB 3F           srl  a
124   6824 CB 3F           srl  a
125   6826 CB 3F           srl  a
126   6828 E6 18           and  24
127   682A 47              ld   b, a
128   682B                 ; 70 h = ((((a = h) &= 7) |= 0x40) |= b);
129   682B 7C              ld   a, h
130   682C E6 07           and  7
131   682E F6 40           or   64
132   6830 B0              or   b
133   6831 67              ld   h, a
134   6832                 ; 71 h = (((a = gVideoPage) &= 0x80) |= h);
135   6832 3A 85 60        ld   a, (gVideoPage)
136   6835 E6 80           and  128
137   6837 B4              or   h
138   6838 67              ld   h, a
139   6839                 ; 72 }
140   6839 C9              ret
141   683A                 ; 74 void drawTextEx()
142   683A             drawTextEx: 
143   683A                 ; 75 {
144   683A                 ; 76 ex(a, a);
145   683A 08              ex   af, af
146   683B                 ; 77 calcCoords();
147   683B CD 0E 68        call calcCoords
148   683E                 ; 78 ex(a, a);
149   683E 08              ex   af, af
150   683F                 ; 79 return drawTextSub();
151   683F C3 45 68        jp   drawTextSub
152   6842                 ; 80 }
153   6842 C9              ret
154   6843                 ; 82 void drawText()
155   6843             drawText: 
156   6843                 ; 83 {
157   6843                 ; 84 c = 0;
158   6843 0E 00           ld   c, 0
159   6845                 ; 85 drawTextSub:
160   6845             drawTextSub: 
161   6845                 ; 86 ex(a, a);
162   6845 08              ex   af, af
163   6846                 ; 87 *[&drawTextS + 1] = hl;
164   6846 22 5C 68        ld   ((drawTextS) + (1)), hl
165   6849                 ; 88 while ()
166   6849             l3: 
167   6849                 ; 89 {
168   6849                 ; 90 a = *de; de++;
169   6849 1A              ld   a, (de)
170   684A 13              inc  de
171   684B                 ; 91 if (a < ' ') goto drawTextN;
172   684B FE 20           cp   32
173   684D DA 56 68        jp   c, drawTextN
174   6850                 ; 92 drawCharSub();
175   6850 CD E6 68        call drawCharSub
176   6853                 ; 93 }
177   6853 C3 49 68        jp   l3
178   6856                 ; 94 drawTextN:
179   6856             drawTextN: 
180   6856                 ; 95 push(a, bc, de, hl)
181   6856                 ; 96 {
182   6856 F5              push af
183   6857 C5              push bc
184   6858 D5              push de
185   6859 E5              push hl
186   685A                 ; 97 ex(hl, de);
187   685A EB              ex de, hl
188   685B                 ; 98 drawTextS:
189   685B             drawTextS: 
190   685B                 ; 99 hl = 0;
191   685B 21 00 00        ld   hl, 0
192   685E                 ; 101 // Две строки?
193   685E                 ; 102 if (flag_nz (a = h) &= 7) a = 1;
194   685E 7C              ld   a, h
195   685F E6 07           and  7
196   6861 CA 66 68        jp   z, l5
197   6864 3E 01           ld   a, 1
198   6866                 ; 103 b = a;
199   6866             l5: 
200   6866 47              ld   b, a
201   6867                 ; 105 // Преобразование адреса из чб в цвет
202   6867                 ; 106 d = (((a = h) >>= 3) &= 3);
203   6867 7C              ld   a, h
204   6868 CB 3F           srl  a
205   686A CB 3F           srl  a
206   686C CB 3F           srl  a
207   686E E6 03           and  3
208   6870 57              ld   d, a
209   6871                 ; 107 h = ((((a = h) &= 0xC0) |= 0x18) |= d);
210   6871 7C              ld   a, h
211   6872 E6 C0           and  192
212   6874 F6 18           or   24
213   6876 B2              or   d
214   6877 67              ld   h, a
215   6878                 ; 109 // Ширина
216   6878                 ; 110 (((a = e) -= l) &= 31);
217   6878 7B              ld   a, e
218   6879 95              sub  l
219   687A E6 1F           and  31
220   687C                 ; 111 c++; if (flag_nz c--) a++;
221   687C 0C              inc  c
222   687D 0D              dec  c
223   687E CA 82 68        jp   z, l6
224   6881 3C              inc  a
225   6882                 ; 112 if (flag_nz a |= a)
226   6882             l6: 
227   6882 B7              or   a
228   6883                 ; 113 {
229   6883 CA A1 68        jp   z, l7
230   6886                 ; 114 c = a;
231   6886 4F              ld   c, a
232   6887                 ; 116 // Цвет
233   6887                 ; 117 ex(a, a);
234   6887 08              ex   af, af
235   6888                 ; 119 // Первая строка
236   6888                 ; 120 push (bc, hl)
237   6888                 ; 121 {
238   6888 C5              push bc
239   6889 E5              push hl
240   688A                 ; 122 do
241   688A             l8: 
242   688A                 ; 123 {
243   688A                 ; 124 *hl = a;
244   688A 77              ld   (hl), a
245   688B                 ; 125 hl++;
246   688B 23              inc  hl
247   688C                 ; 126 } while(flag_nz --c);
248   688C 0D              dec  c
249   688D C2 8A 68        jp   nz, l8
250   6890                 ; 127 }
251   6890 E1              pop  hl
252   6891 C1              pop  bc
253   6892                 ; 129 // Вторая строка
254   6892                 ; 130 if (flag_nz b & 1)
255   6892 CB 40           bit  0, b
256   6894                 ; 131 {
257   6894 CA A1 68        jp   z, l9
258   6897                 ; 132 hl += (de = 32);
259   6897 11 20 00        ld   de, 32
260   689A 19              add  hl, de
261   689B                 ; 133 do
262   689B             l10: 
263   689B                 ; 134 {
264   689B                 ; 135 *hl = a;
265   689B 77              ld   (hl), a
266   689C                 ; 136 hl++;
267   689C 23              inc  hl
268   689D                 ; 137 } while(flag_nz --c);
269   689D 0D              dec  c
270   689E C2 9B 68        jp   nz, l10
271   68A1                 ; 138 }
272   68A1                 ; 139 }
273   68A1             l9: 
274   68A1                 ; 140 }
275   68A1             l7: 
276   68A1 E1              pop  hl
277   68A2 D1              pop  de
278   68A3 C1              pop  bc
279   68A4 F1              pop  af
280   68A5                 ; 141 }
281   68A5 C9              ret
282   68A6                 ; 143 uint16_t drawTextTbl[] =
283   68A6                 ; 144 {
284   68A6                 ; 145 0x0000, 0x0000, 0xE64F, 0x00FF,
285   68A6                 ; 146 0x0F00, 0x0000, 0xE64F, 0x807F,
286   68A6                 ; 147 0x0F0F, 0x0000, 0xE64F, 0xC03F,
287   68A6                 ; 148 0x0F0F, 0x000F, 0xE64F, 0xE01F,
288   68A6                 ; 149 0x0F0F, 0x0F0F, 0xE64F, 0xF00F,
289   68A6                 ; 150 0x0707, 0x0700, 0xE64F, 0xF807,
290   68A6                 ; 151 0x0707, 0x0000, 0xE64F, 0xFC03,
291   68A6                 ; 152 0x0700, 0x0000, 0xE64F, 0xFE07
292   68A6                 ; 153 };
293   68A6             drawTextTbl: 
294   68A6 00 00           dw 0
295   68A8 00 00           dw 0
296   68AA 4F E6           dw 58959
297   68AC FF 00           dw 255
298   68AE 00 0F           dw 3840
299   68B0 00 00           dw 0
300   68B2 4F E6           dw 58959
301   68B4 7F 80           dw 32895
302   68B6 0F 0F           dw 3855
303   68B8 00 00           dw 0
304   68BA 4F E6           dw 58959
305   68BC 3F C0           dw 49215
306   68BE 0F 0F           dw 3855
307   68C0 0F 00           dw 15
308   68C2 4F E6           dw 58959
309   68C4 1F E0           dw 57375
310   68C6 0F 0F           dw 3855
311   68C8 0F 0F           dw 3855
312   68CA 4F E6           dw 58959
313   68CC 0F F0           dw 61455
314   68CE 07 07           dw 1799
315   68D0 00 07           dw 1792
316   68D2 4F E6           dw 58959
317   68D4 07 F8           dw 63495
318   68D6 07 07           dw 1799
319   68D8 00 00           dw 0
320   68DA 4F E6           dw 58959
321   68DC 03 FC           dw 64515
322   68DE 00 07           dw 1792
323   68E0 00 00           dw 0
324   68E2 4F E6           dw 58959
325   68E4 07 FE           dw 65031
326   68E6                 ; 155 void drawCharSub()
327   68E6             drawCharSub: 
328   68E6                 ; 156 {
329   68E6                 ; 157 // Функция сохраняет DE
330   68E6                 ; 158 push(de);
331   68E6 D5              push de
332   68E7                 ; 160 // Вычисление адреса символа
333   68E7                 ; 161 push(hl)
334   68E7                 ; 162 {
335   68E7 E5              push hl
336   68E8                 ; 163 calcCharAddr(); // Вход A, выход HL, портит DE
337   68E8 CD E3 67        call calcCharAddr
338   68EB                 ; 164 ex(hl, de);
339   68EB EB              ex de, hl
340   68EC                 ; 165 }
341   68EC E1              pop  hl
342   68ED                 ; 167 push(hl, bc)
343   68ED                 ; 168 {
344   68ED E5              push hl
345   68EE C5              push bc
346   68EF                 ; 169 // Выбор одной из 8 подпрограмм рисования символа
347   68EF                 ; 170 a = c;
348   68EF 79              ld   a, c
349   68F0                 ; 171 ex(bc, de, hl);
350   68F0 D9              exx
351   68F1                 ; 172 l = ((((a += a) += a) += a) += &drawTextTbl);
352   68F1 87              add  a
353   68F2 87              add  a
354   68F3 87              add  a
355   68F4 C6 A6           add  drawTextTbl
356   68F6 6F              ld   l, a
357   68F7                 ; 173 h = ((a +@= [&drawTextTbl >> 8]) -= l);
358   68F7 CE 68           adc  (drawTextTbl) >> (8)
359   68F9 95              sub  l
360   68FA 67              ld   h, a
361   68FB                 ; 174 de = &C1;
362   68FB 11 0C 69        ld   de, C1
363   68FE                 ; 175 bc = 7;
364   68FE 01 07 00        ld   bc, 7
365   6901                 ; 176 ldir();
366   6901 ED B0           ldir
367   6903                 ; 177 de++; de++; de++;
368   6903 13              inc  de
369   6904 13              inc  de
370   6905 13              inc  de
371   6906                 ; 178 ldi();
372   6906 ED A0           ldi
373   6908                 ; 179 ex(bc, de, hl);
374   6908 D9              exx
375   6909                 ; 181 b = 8;
376   6909 06 08           ld   b, 8
377   690B                 ; 182 do
378   690B             l11: 
379   690B                 ; 183 {
380   690B                 ; 184 a = *de; // Половинка
381   690B 1A              ld   a, (de)
382   690C                 ; 185 C1:         nop(); nop(); nop(); nop();
383   690C             C1: 
384   690C 00              nop
385   690D 00              nop
386   690E 00              nop
387   690F 00              nop
388   6910                 ; 186 c = a;
389   6910 4F              ld   c, a
390   6911                 ; 187 a &= 0;
391   6911 E6 00           and  0
392   6913                 ; 188 *hl = (a ^= *hl);
393   6913 AE              xor  (hl)
394   6914 77              ld   (hl), a
395   6915                 ; 189 a = 0; // Половинка
396   6915 3E 00           ld   a, 0
397   6917                 ; 190 a &= c;
398   6917 A1              and  c
399   6918                 ; 191 l++; // влево
400   6918 2C              inc  l
401   6919                 ; 192 *hl = (a ^= *hl);
402   6919 AE              xor  (hl)
403   691A 77              ld   (hl), a
404   691B                 ; 193 l--; // вправо
405   691B 2D              dec  l
406   691C                 ; 194 h++; // Цикл
407   691C 24              inc  h
408   691D                 ; 195 (a = h) &= 7;
409   691D 7C              ld   a, h
410   691E E6 07           and  7
411   6920                 ; 196 if (flag_z) drawCharNextLine();
412   6920 CC 35 69        call z, drawCharNextLine
413   6923                 ; 197 de++;
414   6923 13              inc  de
415   6924                 ; 198 } while(--b);
416   6924 10 E5           djnz l11
417   6926                 ; 199 }
418   6926 C1              pop  bc
419   6927 E1              pop  hl
420   6928                 ; 201 // Адрес вывода следующего символа на экране
421   6928                 ; 202 a = *de; // Ширина символа
422   6928 1A              ld   a, (de)
423   6929                 ; 203 a += c; // Смещение в пикселях
424   6929 81              add  c
425   692A                 ; 204 if (a >= 8) { a &= 7; l++; }
426   692A FE 08           cp   8
427   692C DA 32 69        jp   c, l12
428   692F E6 07           and  7
429   6931 2C              inc  l
430   6932                 ; 205 c = a;
431   6932             l12: 
432   6932 4F              ld   c, a
433   6933                 ; 207 // Функция сохраняет DE
434   6933                 ; 208 pop(de);
435   6933 D1              pop  de
436   6934                 ; 209 }
437   6934 C9              ret
438   6935                 ; 211 void drawCharNextLine()
439   6935             drawCharNextLine: 
440   6935                 ; 212 {
441   6935                 ; 213 push(de)
442   6935                 ; 214 {
443   6935 D5              push de
444   6936                 ; 215 hl += (de = [0x20 - 0x800]);
445   6936 11 20 F8        ld   de, -2016
446   6939 19              add  hl, de
447   693A                 ; 216 }
448   693A D1              pop  de
449   693B                 ; 217 (a = h) &= 7;
450   693B 7C              ld   a, h
451   693C E6 07           and  7
452   693E                 ; 218 if (flag_z) return;
453   693E C8              ret  z
454   693F                 ; 219 push(de)
455   693F                 ; 220 {
456   693F D5              push de
457   6940                 ; 221 hl += (de = [0x800 - 0x100]);
458   6940 11 00 07        ld   de, 1792
459   6943 19              add  hl, de
460   6944                 ; 222 }
461   6944 D1              pop  de
462   6945                 ; 223 }
463   6945 C9              ret
464   6946             
001   6946             image_panel: 
002   6946                 ; Width, height
003   6946 20 04           db 32, 4
004   6948                 ; Black & white
005   6948                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h ; 0
005   6948 0000000000000000000000000000000000000000000000000000000000000000
006   6968                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 00Ch, 0E4h, 0AAh, 097h, 080h, 000h, 031h, 0D1h, 04Bh, 09Ch, 000h
006   6968 0000000000000000000000000000000000000000000CE4AA97800031D14B9C00
007   6988                 db 00Eh, 067h, 018h, 040h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 012h, 094h, 0AAh, 094h, 000h, 000h, 04Ah, 051h, 049h, 024h, 000h
007   6988 0E67184000000000000000000000000000000000001294AA9400004A51492400
008   69A8                 db 008h, 094h, 0A4h, 0A0h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 012h, 093h, 09Ch, 0B7h, 000h, 000h, 012h, 055h, 059h, 024h, 000h
008   69A8 0894A4A0000000000000000000000000000000000012939CB700001255592400
009   69C8                 db 008h, 097h, 024h, 0A0h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 012h, 0E0h, 0AAh, 0D4h, 000h, 000h, 04Bh, 0D5h, 069h, 03Ch, 000h
009   69C8 089724A0000000000000000000000000000000000012E0AAD400004BD5693C00
010   69E8                 db 008h, 094h, 024h, 0A0h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 00Ch, 083h, 02Ah, 097h, 080h, 000h, 032h, 05Fh, 049h, 024h, 000h
010   69E8 089424A000000000000000000000000000000000000C832A978000325F492400
011   6A08                 db 008h, 064h, 019h, 0F0h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 080h, 000h, 000h
011   6A08 086419F000000000000000000000000000000000000000000000000000800000
012   6A28                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 0FFh, 0FFh, 081h, 0FFh, 0FFh, 080h, 001h, 0FFh, 0FFh, 080h, 000h
012   6A28 000000000000000000000000000000000000000001FFFF81FFFF8001FFFF8000
013   6A48                 db 000h, 000h, 000h, 000h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h ; 1
013   6A48 00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00010000810000800100008000
014   6A68                 db 000h, 000h, 000h, 000h, 080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
014   6A68 0000000080000000000000000000000000000100010000810000800100008000
015   6A88                 db 00Ah, 0A5h, 092h, 080h, 080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
015   6A88 0AA5928080000000000000000000000000000100010000810000800100008000
016   6AA8                 db 00Ah, 0A4h, 052h, 0E0h, 080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
016   6AA8 0AA452E080000000000000000000000000000100010000810000800100008000
017   6AC8                 db 007h, 02Ch, 09Eh, 090h, 080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
017   6AC8 072C9E9080000000000000000000000000000100010000810000800100008000
018   6AE8                 db 00Ah, 0B4h, 052h, 090h, 080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
018   6AE8 0AB4529080000000000000000000000000000100010000810000800100008000
019   6B08                 db 00Ah, 0A5h, 092h, 0E0h, 080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
019   6B08 0AA592E080000000000000000000000000000100010000810000800100008000
020   6B28                 db 000h, 000h, 000h, 000h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
020   6B28 00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00010000810000800100008000
021   6B48                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h ; 2
021   6B48 0000000000000000000000000000000000000000010000810000800100008000
022   6B68                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
022   6B68 0000000000000000000000000000000000000000010000810000800100008000
023   6B88                 db 006h, 073h, 01Dh, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
023   6B88 06731D0000000000000000000000000000000000010000810000800100008000
024   6BA8                 db 009h, 024h, 0A5h, 0C0h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
024   6BA8 0924A5C000000000000000000000000000000000010000810000800100008000
025   6BC8                 db 008h, 027h, 0A5h, 020h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
025   6BC8 0827A52000000000000000000000000000000000010000810000800100008000
026   6BE8                 db 009h, 024h, 0A5h, 020h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
026   6BE8 0924A52000000000000000000000000000000000010000810000800100008000
027   6C08                 db 006h, 024h, 0A5h, 0C0h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
027   6C08 0624A5C000000000000000000000000000000000010000810000800100008000
028   6C28                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
028   6C28 0000000000000000000000000000000000000000010000810000800100008000
029   6C48                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 0FFh, 0FFh, 081h, 0FFh, 0FFh, 080h, 001h, 0FFh, 0FFh, 080h, 000h ; 3
029   6C48 000000000000000000000000000000000000000001FFFF81FFFF8001FFFF8000
030   6C68                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
030   6C68 0000000000000000000000000000000000000000000000000000000000000000
031   6C88                 db 00Fh, 04Bh, 0BDh, 0C0h, 094h, 0B9h, 0EEh, 067h, 020h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
031   6C88 0F4BBDC094B9EE67200000000000000000000000000000000000000000000000
032   6CA8                 db 008h, 049h, 021h, 020h, 094h, 0A5h, 004h, 094h, 0B8h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
032   6CA8 0849212094A50494B80000000000000000000000000000000000000000000000
033   6CC8                 db 00Eh, 069h, 039h, 02Eh, 0B7h, 0B9h, 0C4h, 0F7h, 024h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
033   6CC8 0E69392EB7B9C4F7240000000000000000000000000000000000000000000000
034   6CE8                 db 008h, 059h, 021h, 0C0h, 0D4h, 0A5h, 004h, 094h, 024h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
034   6CE8 085921C0D4A50494240000000000000000000000000000000000000000000000
035   6D08                 db 00Fh, 049h, 03Dh, 020h, 094h, 0B9h, 0E4h, 094h, 038h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
035   6D08 0F493D2094B9E494380000000000000000000000000000000000000000000000
036   6D28                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
036   6D28 0000000000000000000000000000000000000000000000000000000000000000
037   6D48                 ; Color attributes
038   6D48                 db 04Fh, 04Fh, 04Fh, 04Fh, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 049h ; 0
038   6D48 4F4F4F4F494949494949494949494949494949494F4F4F4F4F4F4F4F4F4F4F49
039   6D68                 db 04Fh, 04Fh, 04Fh, 04Fh, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 049h, 04Fh, 045h, 045h, 04Fh, 045h, 045h, 04Fh, 04Fh, 045h, 045h, 04Fh, 049h ; 1
039   6D68 4F4F4F4F474747474747474747474747474747494F45454F45454F4F45454F49
040   6D88                 db 04Fh, 04Fh, 04Fh, 04Fh, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 04Fh, 045h, 045h, 04Fh, 045h, 045h, 04Fh, 04Fh, 045h, 045h, 04Fh, 049h ; 2
040   6D88 4F4F4F4F494949494949494949494949494949494F45454F45454F4F45454F49
041   6DA8                 db 04Dh, 04Dh, 04Dh, 04Dh, 04Dh, 04Dh, 04Dh, 04Dh, 04Dh, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 049h ; 3
041   6DA8 4D4D4D4D4D4D4D4D4D49494949494949494949494F4F4F4F4F4F4F4F4F4F4F49
042   6DC8             
001   6DC8                 savebin "base/base.bin", begin, $ - begin
002   6DC8             
