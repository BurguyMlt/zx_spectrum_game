001   0000             ; ZX Spectrum test (c) 30-10-2019 Alemorf aleksey.f.morozov@gmail.com
002   0000             
003   0000                 DEVICE ZXSPECTRUM128
004   0000             
005   0000                 include "../module.inc"
001+  0000             ;romAddr        = 0
002+  0000             ;screenAddr     = 4000h
003+  0000             ;cacheAddr      = 5B00h
004+  0000             
005+  0000             irqTableAddr      = 5F00h
006+  0000             irqAddr           = 6060h
007+  0000             stackBeginAddr    = 6001h
008+  0000             stackEndAddr      = 605Fh
009+  0000             baseAddr          = 6063h
010+  0000             moduleLoadAddr    = 7000h
011+  0000             moverAddr         = 8000h
012+  0000             
013+  0000             gEnd = baseAddr
014+  0000             
015+  0000             ; Функции
016+  0000             gDrawText         = gEnd
017+  0000             gEnd = gEnd + 3
018+  0000             gDrawTextCenter   = gEnd
019+  0000             gEnd = gEnd + 3
020+  0000             gDrawTextEx       = gEnd
021+  0000             gEnd = gEnd + 3
022+  0000             gClearScreen      = gEnd
023+  0000             gEnd = gEnd + 3
024+  0000             gDrawImage        = gEnd
025+  0000             gEnd = gEnd + 3
026+  0000             gMeasureText      = gEnd
027+  0000             gEnd = gEnd + 3
028+  0000             gCalcCoords       = gEnd
029+  0000             gEnd = gEnd + 3
030+  0000             gDrawCharSub      = gEnd
031+  0000             gEnd = gEnd + 3
032+  0000             gExec             = gEnd
033+  0000             gEnd = gEnd + 3
034+  0000             gLoadFile         = gEnd
035+  0000             gEnd = gEnd + 3
036+  0000             gFarCall          = gEnd
037+  0000             gEnd = gEnd + 3
038+  0000             gIrqHandler       = gEnd
039+  0000             gEnd = gEnd + 3
040+  0000             gDrawPanel        = gEnd
041+  0000             gEnd = gEnd + 3
042+  0000             gBeginDraw        = gEnd
043+  0000             gEnd = gEnd + 3
044+  0000             gEndDraw          = gEnd
045+  0000             gEnd = gEnd + 3
046+  0000             gCopyVideoPage    = gEnd
047+  0000             gEnd = gEnd + 3
048+  0000             gPanelRedraw      = gEnd
049+  0000             gEnd = gEnd + 3
050+  0000             gStringBuffer     = gEnd
051+  0000             gStringBufferSize = 32
052+  0000             gEnd = gEnd + gStringBufferSize
053+  0000             
054+  0000             ; Переменные
055+  0000             gFrame            = gEnd
056+  0000             gEnd = gEnd + 1
057+  0000             gVideoPage        = gEnd
058+  0000             gEnd = gEnd + 1
059+  0000             gSystemPage       = gEnd
060+  0000             gEnd = gEnd + 1
061+  0000             gKeyTrigger       = gEnd
062+  0000             gEnd = gEnd + 1
063+  0000             gKeyPressed       = gEnd
064+  0000             gEnd = gEnd + 1
065+  0000             gPlayerMoney      = gEnd
066+  0000             gEnd = gEnd + 2
067+  0000             gPlayerLut        = gEnd
068+  0000             playerLutMax = 12
069+  0000             gEnd = gEnd + 2 * playerLutMax
070+  0000             gPlayerLutCount   = gEnd
071+  0000             gEnd = gEnd + 1
072+  0000             gPlayerItems      = gEnd
073+  0000             playerItemsMax = 5
074+  0000             gEnd = gEnd + playerItemsMax
075+  0000             gPlayerItemsCount = gEnd
076+  0000             gEnd = gEnd + 1
077+  0000             gPanelChangedA    = gEnd
078+  0000             gEnd = gEnd + 1
079+  0000             gPanelChangedB    = gEnd
080+  0000             gEnd = gEnd + 1
081+  0000             
082+  0000             ; Другие модули
083+  0000             gPanelgraphPage = 6
084+  0000             gPanelgraph = 0C003h
085+  0000             gPanelX = 0
086+  0000             gPanelY = 20
087+  0000             
006   0000             
007   0000             ;-------------------------------------------------------------------------------
008   0000             ; Точки входа
009   0000             
010   0000                 org baseAddr
011   6063             
012   6063             begin: 
013   6063 C3 E1 62    iDrawText:        jp drawText
014   6066 C3 98 62    iDrawTextCenter:  jp drawTextCenter
015   6069 C3 D8 62    iDrawTextEx:      jp drawTextEx
016   606C C3 E9 63    iClearScreen:     jp clearScreen
017   606F C3 DA 61    iDrawImage:       jp drawImage
018   6072 C3 6A 62    iMeasureText:     jp measureText
019   6075 C3 AC 62    iCalcCoords:      jp calcCoords
020   6078 C3 89 63    iDrawCharSub:     jp drawCharSub
021   607B C3 0D 61    iExec:            jp exec
022   607E C3 49 61    iLoadFile:        jp loadFile
023   6081 C3 A6 61    iFarCall         jp farCall
024   6084 C3 DE 60    iIrqHandler:      jp irqHandler
025   6087 C3 60 64    iDrawPanel:       jp drawPanel
026   608A C3 21 64    iBeginDraw:       jp beginDraw
027   608D C3 38 64    iEndDraw:         jp endDraw
028   6090 C3 43 64    iCopyVideoPage:   jp copyVideoPage
029   6093 C3 76 64    iPanelRedraw:     jp panelRedraw
030   6096 00          iStringBuffer:    ds gStringBufferSize
031   60B6             
032   60B6 00          iFrame:             db 0
033   60B7 00          iVideoPage:         db 0
034   60B8 00          iSystemPage:        db 0
035   60B9 00          iKeyTrigger:        db 0
036   60BA 00          iKeyPressed:        db 0
037   60BB 00          iPlayerMoney:       db 0
038   60BC 00          iPlayerLut:         ds playerLutMax * 2
039   60D4 00          iPlayerLutCount:    db 0
040   60D5 00          iPlayerItems:       ds playerItemsMax
041   60DA 00          iPlayerItemsCount:  db 0
042   60DB             
043   60DB             ;-------------------------------------------------------------------------------
044   60DB             
045   60DB                 org gEnd
046   60DE             
047   60DE             irqHandler: 
048   60DE F5              PUSH  AF
049   60DF C5              PUSH  BC
050   60E0 E5              PUSH  HL
051   60E1             
052   60E1                 ; Переключение видеостраницы
053   60E1 3A B7 60        LD    A, (gVideoPage)
054   60E4 CB 47           BIT   0, A
055   60E6 CA FD 60        JP    Z, irqHandler_1
056   60E9 E6 FE           AND   ~1
057   60EB 32 B7 60        LD    (gVideoPage), A
058   60EE 47              LD    B, A
059   60EF 3A B8 60        LD    A, (gSystemPage)
060   60F2 E6 F7           AND   ~8
061   60F4 B0              OR    B
062   60F5 32 B8 60        LD    (gSystemPage), A
063   60F8 01 FD 7F        LD    BC, 7FFDh
064   60FB ED 79           OUT   (C), A
065   60FD             irqHandler_1: 
066   60FD             
067   60FD 3A B6 60        LD    A, (gFrame)
068   6100 3C              INC   A
069   6101 32 B6 60        LD    (gFrame), A
070   6104             
071   6104 CD 25 62        call  readKey
072   6107             
073   6107 E1              POP   HL
074   6108 C1              POP   BC
075   6109 F1              POP   AF
076   610A FB              EI
077   610B ED 4D           RETI
078   610D             
079   610D             ;-------------------------------------------------------------------------------
080   610D             
081   610D             exec: 
082   610D 31 5F 60        LD    SP, stackEndAddr
083   6110             
084   6110 E5              PUSH  HL
085   6111                 ; Установка черной рамки
086   6111 3E 00           LD    A, 0
087   6113 D3 FE           OUT   (-2), A
088   6115                 ; Очистка всех экранов
089   6115 3E 42           LD    A, 42h
090   6117 CD E9 63        CALL  clearScreen
091   611A E1              POP   HL
092   611B             
093   611B 11 00 70        LD    DE, moduleLoadAddr
094   611E CD 49 61        CALL  loadFile
095   6121 C3 00 70        JP    moduleLoadAddr
096   6124             
097   6124             ;-------------------------------------------------------------------------------
098   6124             
099   6124             fileNotFound: 
100   6124 21 00 00        ld   hl, 0
101   6127 11 37 61        ld   de, aFileNotFound
102   612A CD D8 62        call drawTextEx
103   612D 21 00 0A        ld   hl, 10 << 8
104   6130 D1              pop  de
105   6131 CD D8 62        call drawTextEx
106   6134             
107   6134 C3 34 61        jp $
108   6137             
109   6137             ;-------------------------------------------------------------------------------
110   6137             
111   6137             aFileNotFound db "Не найден файл ", 0
111   6137 CDE520EDE0E9E4E5ED20F4E0E9EB2000
112   6147             aSpace = $ - 2
113   6147 43 00       aExt db "C",0
114   6149             
115   6149             ;-------------------------------------------------------------------------------
116   6149             
117   6149             loadFile: 
118   6149                 ; Сохраняем адрес загрузки
119   6149 D5              push de
120   614A             
121   614A                 ; Преобразование имени файла
122   614A 01 08 08        ld   bc, 808h
123   614D             loadFile_0: 
124   614D 7E              ld   a, (hl)
125   614E B7              or   a
126   614F C2 55 61        jp   nz, loadFile_1
127   6152 21 45 61        ld   hl, aSpace
128   6155             loadFile_1: 
129   6155 ED A0           ldi
130   6157 10 F4           djnz loadFile_0
131   6159 21 47 61        ld   hl, aExt
132   615C ED A0           ldi
133   615E ED A0           ldi
134   6160 E1              pop  hl
135   6161             
136   6161                 ; Установка прерываний по умолчанию
137   6161 F3              di
138   6162 ED 57           ld   a, i
139   6164 F5              push af
140   6165 ED 56           im   1
141   6167             
142   6167                 ; Передача имени файла
143   6167 E5              push hl
144   6168 0E 13           ld   c, 13h
145   616A CD 13 3D        call 3D13h
146   616D             
147   616D                 ; Поиск файла
148   616D 0E 0A           ld   c, 0Ah
149   616F CD 13 3D        call 3D13h
150   6172 79              ld   a, c
151   6173 FE FF           cp   0FFh
152   6175 CA 24 61        jp   z, fileNotFound ; Файл не найден
153   6178             
154   6178                 ; Загрузка заголовка
155   6178 0E 08           ld   c, 8
156   617A CD 13 3D        call 3D13h
157   617D             
158   617D                 ; На всякий случай
159   617D 3A B8 60        LD   A, (gSystemPage)
160   6180 32 5C 5B        LD   (23388),A
161   6183             
162   6183                 ; Загрузка файла
163   6183 AF              xor  a
164   6184 32 F9 5C        ld   (5CF9h), a
165   6187 ED 5B EB 5C     ld   de, (5CEBh)
166   618B 3A EA 5C        ld   a, (5CEAh)
167   618E 47              ld   b, a
168   618F E1              pop  hl
169   6190 3E FF           ld   a, 0FFh
170   6192 0E 05           ld   c, 5
171   6194 CD 13 3D        call 3D13h
172   6197             
173   6197                 ; Восстановление страницы
174   6197 3A B8 60        LD    A, (gSystemPage)
175   619A 01 FD 7F        LD    BC, 7FFDh
176   619D ED 79           OUT   (C), A
177   619F             
178   619F                 ; Восстановление прерываний
179   619F F1              pop  af
180   61A0 ED 47           LD   i, a
181   61A2 ED 5E           im   2
182   61A4 FB              ei
183   61A5             
184   61A5 C9              ret
185   61A6             
186   61A6             ;-------------------------------------------------------------------------------
187   61A6             
188   61A6             ; IYL - Страница, IX - Функция, A` - Портит, BC` - Портит.
189   61A6             
190   61A6             farCall: 
191   61A6                 ; Выбор страницы с сохранением выбранной видеостраницы
192   61A6 D9              EXX
193   61A7 08              EX AF, AF
194   61A8 F3              DI
195   61A9 3A B8 60        LD    A, (gSystemPage)
196   61AC F5              PUSH  AF
197   61AD E6 F8           AND   ~7
198   61AF FD B5           OR    IYL
199   61B1 32 B8 60        LD    (gSystemPage), A
200   61B4 01 FD 7F        LD    BC, 7FFDh
201   61B7 ED 79           OUT   (C), A
202   61B9 FB              EI
203   61BA 08              EX AF, AF
204   61BB D9              EXX
205   61BC             
206   61BC                 ; Вызов
207   61BC CD D8 61        CALL  farJump2
208   61BF             
209   61BF                 ; Восстановление  с сохранением выбранной видеостраницы
210   61BF D9              EXX
211   61C0 08              EX AF, AF
212   61C1 F1              POP   AF
213   61C2 E6 07           AND   7
214   61C4 47              LD    B, A
215   61C5 F3              DI
216   61C6 3A B8 60        LD    A, (gSystemPage)
217   61C9 E6 F8           AND   ~7
218   61CB B0              OR    B
219   61CC 32 B8 60        LD    (gSystemPage), A
220   61CF 01 FD 7F        LD    BC, 7FFDh
221   61D2 ED 79           OUT   (C), A
222   61D4 FB              EI
223   61D5 08              EX AF, AF
224   61D6 D9              EXX
225   61D7 C9              RET
226   61D8             
227   61D8             farJump2: 
228   61D8 DD E9           JP    IX
229   61DA             
230   61DA             ;-------------------------------------------------------------------------------
231   61DA             
001   61DA             ; ZX Spectrum test (c) 30-10-2019 Alemorf aleksey.f.morozov@gmail.com
002   61DA             
003   61DA             ;-------------------------------------------------------------------------------
004   61DA             ; Вывести изображение
005   61DA             ; HL - адрес изображения
006   61DA             ; DE - адрес в видеопамяти (5800 - 5CFFh)
007   61DA             
008   61DA             drawImage: 
009   61DA                     ; Преобразование адреса в DE из формата X + Y * 32 в формат YY000 YYYXXXXX
010   61DA D5                  PUSH   DE
011   61DB 7A                  LD     A, D
012   61DC E6 80               AND    80h
013   61DE 47                  LD     B, A
014   61DF 7A                  LD     A, D
015   61E0 87                  ADD    A
016   61E1 87                  ADD    A
017   61E2 87                  ADD    A
018   61E3 C6 80               ADD    40h - 0C0h
019   61E5 B0                  OR     B
020   61E6 57                  LD     D, A
021   61E7             
022   61E7                     ; Чтение высоты и ширины. Сохранение  её в стеке
023   61E7 4E                  LD     C, (HL)
024   61E8 23                  INC    HL
025   61E9 46                  LD     B, (HL)
026   61EA 23                  INC    HL
027   61EB C5                  PUSH   BC
028   61EC             
029   61EC                     ; Вывод чернобелой графики
030   61EC             drawImage_1: 
031   61EC C5                  PUSH   BC
032   61ED             
033   61ED                     ; Копирование строки
034   61ED 3E 08               LD     A, 8
035   61EF             drawImage_3: 
036   61EF C5                  PUSH   BC
037   61F0 D5                  PUSH   DE
038   61F1 06 00               LD     B, 0
039   61F3 ED B0               LDIR
040   61F5 D1                  POP    DE
041   61F6 C1                  POP    BC
042   61F7 14                  INC    D
043   61F8 3D                  DEC    A
044   61F9 C2 EF 61            JP     NZ, drawImage_3
045   61FC             
046   61FC                     ; Адрес следующей строки
047   61FC 01 20 F8            LD     BC, 0x20 - 0x800
048   61FF EB                  EX     DE, HL
049   6200 09                  ADD    HL, BC
050   6201 EB                  EX     DE, HL
051   6202 7A                  LD     A, D
052   6203 E6 07               AND    7
053   6205 C4 1E 62            CALL   NZ, drawImage_4
054   6208             
055   6208                     ; Следующая строка
056   6208 C1                  POP    BC
057   6209 10 E1               DJNZ   drawImage_1
058   620B             
059   620B                     ; Восстановление координат вывода и размера
060   620B C1                  POP    BC
061   620C D1                  POP    DE
062   620D             
063   620D                     ; Цикл для каждой строки
064   620D             drawImage_2: 
065   620D C5                  PUSH   BC
066   620E             
067   620E                     ; Копирование строки
068   620E D5                  PUSH   DE
069   620F 06 00               LD     B, 0
070   6211 ED B0               LDIR
071   6213 D1                  POP    DE
072   6214             
073   6214                     ; Адрес следующей строки
074   6214 EB                  EX     DE, HL
075   6215 01 20 00            LD     BC, 32
076   6218 09                  ADD    HL, BC
077   6219 EB                  EX     DE, HL
078   621A             
079   621A                     ; Следующая строка
080   621A C1                  POP    BC
081   621B 10 F0               DJNZ   drawImage_2
082   621D             
083   621D C9                  RET
084   621E             
085   621E             ;-------------------------------------------------------------------------------
086   621E             
087   621E             drawImage_4: 
088   621E 01 00 07            LD     BC, 0x800 - 0x100
089   6221 EB                  EX     DE, HL
090   6222 09                  ADD    HL, BC
091   6223 EB                  EX     DE, HL
092   6224 C9                  RET
093   6225             
001   6225                 ; 3 const int KEY_UP = 1;
002   6225                 ; 4 const int KEY_DOWN = 2;
003   6225                 ; 5 const int KEY_LEFT = 4;
004   6225                 ; 6 const int KEY_RIGHT = 8;
005   6225                 ; 7 const int KEY_FIRE = 16;
006   6225                 ; 9 // Использует A, BC, HL
007   6225                 ; 10 void readKey()
008   6225             readKey: 
009   6225                 ; 11 {
010   6225                 ; 12 c = in(bc = 0xEFFE);
011   6225 01 FE EF        ld   bc, 61438
012   6228 ED 48           in   c, (c)
013   622A                 ; 13 a ^= a;
014   622A AF              xor  a
015   622B                 ; 14 if (c & 0x04) a |= KEY_RIGHT;
016   622B CB 51           bit  2, c
017   622D CA 32 62        jp   z, l1000
018   6230 F6 08           or   8
019   6232                 ; 15 if (c & 0x08) a |= KEY_UP;
020   6232             l1000: 
021   6232 CB 59           bit  3, c
022   6234 CA 39 62        jp   z, l1001
023   6237 F6 01           or   1
024   6239                 ; 16 if (c & 0x10) a |= KEY_DOWN;
025   6239             l1001: 
026   6239 CB 61           bit  4, c
027   623B CA 40 62        jp   z, l1002
028   623E F6 02           or   2
029   6240                 ; 17 c = in(bc = 0xF7FE);
030   6240             l1002: 
031   6240 01 FE F7        ld   bc, 63486
032   6243 ED 48           in   c, (c)
033   6245                 ; 18 if (c & 0x10) a |= KEY_LEFT;
034   6245 CB 61           bit  4, c
035   6247 CA 4C 62        jp   z, l1003
036   624A F6 04           or   4
037   624C                 ; 19 c = in(bc = 0x7FFE);
038   624C             l1003: 
039   624C 01 FE 7F        ld   bc, 32766
040   624F ED 48           in   c, (c)
041   6251                 ; 20 if (c & 0x01) a |= KEY_FIRE;
042   6251 CB 41           bit  0, c
043   6253 CA 58 62        jp   z, l1004
044   6256 F6 10           or   16
045   6258                 ; 21 a ^= 0xFF;
046   6258             l1004: 
047   6258 EE FF           xor  255
048   625A                 ; 23 // Чтение прошлого значения и сохранение нового
049   625A                 ; 24 b = a;
050   625A 47              ld   b, a
051   625B                 ; 25 hl = &gKeyPressed;
052   625B 21 BA 60        ld   hl, gKeyPressed
053   625E                 ; 26 a = *hl;
054   625E 7E              ld   a, (hl)
055   625F                 ; 27 *hl = b;
056   625F 70              ld   (hl), b
057   6260                 ; 29 // Выделение события нажатия
058   6260                 ; 30 a ^= 0xFF;
059   6260 EE FF           xor  255
060   6262                 ; 31 a &= b;
061   6262 A0              and  b
062   6263                 ; 32 hl = &gKeyTrigger;
063   6263 21 B9 60        ld   hl, gKeyTrigger
064   6266                 ; 33 a |= *hl;
065   6266 B6              or   (hl)
066   6267                 ; 34 *hl = a;
067   6267 77              ld   (hl), a
068   6268                 ; 36 return;
069   6268 C9              ret
070   6269                 ; 37 }
071   6269 C9              ret
072   626A             
001   626A                 ; 3 // Вычисление ширины текста в пикселях
002   626A                 ; 4 // Вход: DE - текст
003   626A                 ; 5 // Выход: С - результат, A - последний символ, DE - адрес символа за последним символом
004   626A                 ; 6 // Портит: HL
005   626A                 ; 8 const int firstChar = [' ' - 11];
006   626A                 ; 10 void measureText()
007   626A             measureText: 
008   626A                 ; 11 {
009   626A                 ; 12 c = 0;
010   626A 0E 00           ld   c, 0
011   626C                 ; 13 while()
012   626C             l10000: 
013   626C                 ; 14 {
014   626C                 ; 15 a = *de; de++;
015   626C 1A              ld   a, (de)
016   626D 13              inc  de
017   626E                 ; 16 if (a < firstChar) return;
018   626E FE 15           cp   21
019   6270 D8              ret  c
020   6271                 ; 18 // Вычисление адреса символа (de = image_font + a * 9)
021   6271                 ; 19 push(de)
022   6271                 ; 20 {
023   6271 D5              push de
024   6272                 ; 21 calcCharAddr(); //  HL - адрес символа в знакогенераторе, DE - мусор
025   6272 CD 81 62        call calcCharAddr
026   6275                 ; 22 hl += (de = 8);
027   6275 11 08 00        ld   de, 8
028   6278 19              add  hl, de
029   6279                 ; 23 a = *hl;
030   6279 7E              ld   a, (hl)
031   627A                 ; 24 c = (a += c);
032   627A 81              add  c
033   627B 4F              ld   c, a
034   627C                 ; 25 }
035   627C D1              pop  de
036   627D                 ; 26 }
037   627D C3 6C 62        jp   l10000
038   6280             l10001: 
039   6280                 ; 27 }
040   6280 C9              ret
041   6281                 ; 29 // Вычисление адреса символа
042   6281                 ; 30 // Вход: A - символ
043   6281                 ; 31 // Выход: HL - адрес символа в знакогенераторе
044   6281                 ; 32 // Портит: DE
045   6281                 ; 34 void calcCharAddr()
046   6281             calcCharAddr: 
047   6281                 ; 35 {
048   6281                 ; 36 a -= firstChar;
049   6281 D6 15           sub  21
050   6283                 ; 37 if (a >= 96) a -= 64;
051   6283 FE 60           cp   96
052   6285 DA 8A 62        jp   c, l10002
053   6288 D6 40           sub  64
054   628A                 ; 38 h = 0; l = a;
055   628A             l10002: 
056   628A 26 00           ld   h, 0
057   628C 6F              ld   l, a
058   628D                 ; 39 d = h; e = l;
059   628D 54              ld   d, h
060   628E 5D              ld   e, l
061   628F                 ; 40 (((hl += hl) += hl) += hl) += de;
062   628F 29              add  hl, hl
063   6290 29              add  hl, hl
064   6291 29              add  hl, hl
065   6292 19              add  hl, de
066   6293                 ; 41 hl += (de = &image_font);
067   6293 11 C6 64        ld   de, image_font
068   6296 19              add  hl, de
069   6297                 ; 42 }
070   6297 C9              ret
071   6298                 ; 44 // Вывод текста по центру экрана
072   6298                 ; 45 // Вход: DE - текст, H - строка
073   6298                 ; 47 void drawTextCenter()
074   6298             drawTextCenter: 
075   6298                 ; 48 {
076   6298                 ; 49 ex(a, a);
077   6298 08              ex   af, af
078   6299                 ; 50 push(hl, de)
079   6299                 ; 51 {
080   6299 E5              push hl
081   629A D5              push de
082   629B                 ; 52 measureText();
083   629B CD 6A 62        call measureText
084   629E                 ; 53 a = (((a = 256) -= c) >>= 1);
085   629E 3E 00           ld   a, 256
086   62A0 91              sub  c
087   62A1 CB 3F           srl  a
088   62A3 7F              ld   a, a
089   62A4                 ; 54 }
090   62A4 D1              pop  de
091   62A5 E1              pop  hl
092   62A6                 ; 55 l = a;
093   62A6 6F              ld   l, a
094   62A7                 ; 56 ex(a, a);
095   62A7 08              ex   af, af
096   62A8                 ; 57 drawTextEx();
097   62A8 CD D8 62        call drawTextEx
098   62AB                 ; 58 }
099   62AB C9              ret
100   62AC                 ; 60 // Вычисление адреса в видеопамяти и смещения в битах.
101   62AC                 ; 61 // Вход: H - коодината y, L - коодината x
102   62AC                 ; 62 // Выход: HL - адрес, C - смещение в битах
103   62AC                 ; 63 // Портит: A, B
104   62AC                 ; 65 void calcCoords()
105   62AC             calcCoords: 
106   62AC                 ; 66 {
107   62AC                 ; 67 // Необходимо разместить Y в регистре HL следующим образом
108   62AC                 ; 68 // ...76210 543.....
109   62AC                 ; 70 c = ((a = l) &= 7); // Из координаты X получаем смещение в битах
110   62AC 7D              ld   a, l
111   62AD E6 07           and  7
112   62AF 4F              ld   c, a
113   62B0                 ; 71 l >>= 3; //  Из координаты X смещение в байтах
114   62B0 CB 3D           srl  l
115   62B2 CB 3D           srl  l
116   62B4 CB 3D           srl  l
117   62B6                 ; 72 l = ((((a = h) <<= 2) &= 0xE0) |= l);
118   62B6 7C              ld   a, h
119   62B7 CB 27           sla  a
120   62B9 CB 27           sla  a
121   62BB E6 E0           and  224
122   62BD B5              or   l
123   62BE 6F              ld   l, a
124   62BF                 ; 73 b = (((a = h) >>= 3) &= 0x18);
125   62BF 7C              ld   a, h
126   62C0 CB 3F           srl  a
127   62C2 CB 3F           srl  a
128   62C4 CB 3F           srl  a
129   62C6 E6 18           and  24
130   62C8 47              ld   b, a
131   62C9                 ; 74 h = ((((a = h) &= 7) |= 0x40) |= b);
132   62C9 7C              ld   a, h
133   62CA E6 07           and  7
134   62CC F6 40           or   64
135   62CE B0              or   b
136   62CF 67              ld   h, a
137   62D0                 ; 75 h = (((a = gVideoPage) &= 0x80) |= h);
138   62D0 3A B7 60        ld   a, (gVideoPage)
139   62D3 E6 80           and  128
140   62D5 B4              or   h
141   62D6 67              ld   h, a
142   62D7                 ; 76 }
143   62D7 C9              ret
144   62D8                 ; 78 void drawTextEx()
145   62D8             drawTextEx: 
146   62D8                 ; 79 {
147   62D8                 ; 80 ex(a, a);
148   62D8 08              ex   af, af
149   62D9                 ; 81 calcCoords();
150   62D9 CD AC 62        call calcCoords
151   62DC                 ; 82 ex(a, a);
152   62DC 08              ex   af, af
153   62DD                 ; 83 return drawTextSub();
154   62DD C3 E3 62        jp   drawTextSub
155   62E0                 ; 84 }
156   62E0 C9              ret
157   62E1                 ; 86 void drawText()
158   62E1             drawText: 
159   62E1                 ; 87 {
160   62E1                 ; 88 c = 0;
161   62E1 0E 00           ld   c, 0
162   62E3                 ; 89 drawTextSub:
163   62E3             drawTextSub: 
164   62E3                 ; 90 ex(a, a);
165   62E3 08              ex   af, af
166   62E4                 ; 91 *[&drawTextS + 1] = hl;
167   62E4 22 FA 62        ld   ((drawTextS) + (1)), hl
168   62E7                 ; 92 while ()
169   62E7             l10003: 
170   62E7                 ; 93 {
171   62E7                 ; 94 a = *de; de++;
172   62E7 1A              ld   a, (de)
173   62E8 13              inc  de
174   62E9                 ; 95 if (a < firstChar) break;
175   62E9 FE 15           cp   21
176   62EB DA F4 62        jp   c, l10004
177   62EE                 ; 96 drawCharSub();
178   62EE CD 89 63        call drawCharSub
179   62F1                 ; 97 }
180   62F1 C3 E7 62        jp   l10003
181   62F4             l10004: 
182   62F4                 ; 98 push(a, bc, de, hl)
183   62F4                 ; 99 {
184   62F4 F5              push af
185   62F5 C5              push bc
186   62F6 D5              push de
187   62F7 E5              push hl
188   62F8                 ; 100 ex(hl, de);
189   62F8 EB              ex de, hl
190   62F9                 ; 101 drawTextS:
191   62F9             drawTextS: 
192   62F9                 ; 102 hl = 0;
193   62F9 21 00 00        ld   hl, 0
194   62FC                 ; 104 // Две строки?
195   62FC                 ; 105 if (a != 2)
196   62FC FE 02           cp   2
197   62FE                 ; 106 if (flag_nz (a = h) &= 7) a = 1;
198   62FE CA 09 63        jp   z, l10005
199   6301 7C              ld   a, h
200   6302 E6 07           and  7
201   6304 CA 09 63        jp   z, l10006
202   6307 3E 01           ld   a, 1
203   6309                 ; 107 b = a;
204   6309             l10006: 
205   6309             l10005: 
206   6309 47              ld   b, a
207   630A                 ; 109 // Преобразование адреса из чб в цвет
208   630A                 ; 110 d = (((a = h) >>= 3) &= 3);
209   630A 7C              ld   a, h
210   630B CB 3F           srl  a
211   630D CB 3F           srl  a
212   630F CB 3F           srl  a
213   6311 E6 03           and  3
214   6313 57              ld   d, a
215   6314                 ; 111 h = ((((a = h) &= 0xC0) |= 0x18) |= d);
216   6314 7C              ld   a, h
217   6315 E6 C0           and  192
218   6317 F6 18           or   24
219   6319 B2              or   d
220   631A 67              ld   h, a
221   631B                 ; 113 // Ширина
222   631B                 ; 114 (((a = e) -= l) &= 31);
223   631B 7B              ld   a, e
224   631C 95              sub  l
225   631D E6 1F           and  31
226   631F                 ; 115 c++; if (flag_nz c--) a++;
227   631F 0C              inc  c
228   6320 0D              dec  c
229   6321 CA 25 63        jp   z, l10007
230   6324 3C              inc  a
231   6325                 ; 116 if (flag_nz a |= a)
232   6325             l10007: 
233   6325 B7              or   a
234   6326                 ; 117 {
235   6326 CA 44 63        jp   z, l10008
236   6329                 ; 118 c = a;
237   6329 4F              ld   c, a
238   632A                 ; 120 // Цвет
239   632A                 ; 121 ex(a, a);
240   632A 08              ex   af, af
241   632B                 ; 123 // Первая строка
242   632B                 ; 124 push (bc, hl)
243   632B                 ; 125 {
244   632B C5              push bc
245   632C E5              push hl
246   632D                 ; 126 do
247   632D             l10009: 
248   632D                 ; 127 {
249   632D                 ; 128 *hl = a;
250   632D 77              ld   (hl), a
251   632E                 ; 129 hl++;
252   632E 23              inc  hl
253   632F                 ; 130 } while(flag_nz --c);
254   632F 0D              dec  c
255   6330 C2 2D 63        jp   nz, l10009
256   6333             l10010: 
257   6333                 ; 131 }
258   6333 E1              pop  hl
259   6334 C1              pop  bc
260   6335                 ; 133 // Вторая строка
261   6335                 ; 134 if (flag_nz b & 1)
262   6335 CB 40           bit  0, b
263   6337                 ; 135 {
264   6337 CA 44 63        jp   z, l10011
265   633A                 ; 136 hl += (de = 32);
266   633A 11 20 00        ld   de, 32
267   633D 19              add  hl, de
268   633E                 ; 137 do
269   633E             l10012: 
270   633E                 ; 138 {
271   633E                 ; 139 *hl = a;
272   633E 77              ld   (hl), a
273   633F                 ; 140 hl++;
274   633F 23              inc  hl
275   6340                 ; 141 } while(flag_nz --c);
276   6340 0D              dec  c
277   6341 C2 3E 63        jp   nz, l10012
278   6344             l10013: 
279   6344                 ; 142 }
280   6344                 ; 143 }
281   6344             l10011: 
282   6344                 ; 144 }
283   6344             l10008: 
284   6344 E1              pop  hl
285   6345 D1              pop  de
286   6346 C1              pop  bc
287   6347 F1              pop  af
288   6348                 ; 145 }
289   6348 C9              ret
290   6349                 ; 147 uint16_t drawTextTbl[] =
291   6349                 ; 148 {
292   6349                 ; 149 0x0000, 0x0000, 0xE64F, 0x00FF,
293   6349                 ; 150 0x0F00, 0x0000, 0xE64F, 0x807F,
294   6349                 ; 151 0x0F0F, 0x0000, 0xE64F, 0xC03F,
295   6349                 ; 152 0x0F0F, 0x000F, 0xE64F, 0xE01F,
296   6349                 ; 153 0x0F0F, 0x0F0F, 0xE64F, 0xF00F,
297   6349                 ; 154 0x0707, 0x0700, 0xE64F, 0xF807,
298   6349                 ; 155 0x0707, 0x0000, 0xE64F, 0xFC03,
299   6349                 ; 156 0x0700, 0x0000, 0xE64F, 0xFE07
300   6349                 ; 157 };
301   6349             drawTextTbl: 
302   6349 00 00           dw 0
303   634B 00 00           dw 0
304   634D 4F E6           dw 58959
305   634F FF 00           dw 255
306   6351 00 0F           dw 3840
307   6353 00 00           dw 0
308   6355 4F E6           dw 58959
309   6357 7F 80           dw 32895
310   6359 0F 0F           dw 3855
311   635B 00 00           dw 0
312   635D 4F E6           dw 58959
313   635F 3F C0           dw 49215
314   6361 0F 0F           dw 3855
315   6363 0F 00           dw 15
316   6365 4F E6           dw 58959
317   6367 1F E0           dw 57375
318   6369 0F 0F           dw 3855
319   636B 0F 0F           dw 3855
320   636D 4F E6           dw 58959
321   636F 0F F0           dw 61455
322   6371 07 07           dw 1799
323   6373 00 07           dw 1792
324   6375 4F E6           dw 58959
325   6377 07 F8           dw 63495
326   6379 07 07           dw 1799
327   637B 00 00           dw 0
328   637D 4F E6           dw 58959
329   637F 03 FC           dw 64515
330   6381 00 07           dw 1792
331   6383 00 00           dw 0
332   6385 4F E6           dw 58959
333   6387 07 FE           dw 65031
334   6389                 ; 159 void drawCharSub()
335   6389             drawCharSub: 
336   6389                 ; 160 {
337   6389                 ; 161 // Функция сохраняет DE
338   6389                 ; 162 push(de);
339   6389 D5              push de
340   638A                 ; 164 // Вычисление адреса символа
341   638A                 ; 165 push(hl)
342   638A                 ; 166 {
343   638A E5              push hl
344   638B                 ; 167 calcCharAddr(); // Вход A, выход HL, портит DE
345   638B CD 81 62        call calcCharAddr
346   638E                 ; 168 ex(hl, de);
347   638E EB              ex de, hl
348   638F                 ; 169 }
349   638F E1              pop  hl
350   6390                 ; 171 push(hl, bc)
351   6390                 ; 172 {
352   6390 E5              push hl
353   6391 C5              push bc
354   6392                 ; 173 // Выбор одной из 8 подпрограмм рисования символа
355   6392                 ; 174 a = c;
356   6392 79              ld   a, c
357   6393                 ; 175 ex(bc, de, hl);
358   6393 D9              exx
359   6394                 ; 176 l = ((((a += a) += a) += a) += &drawTextTbl);
360   6394 87              add  a
361   6395 87              add  a
362   6396 87              add  a
363   6397 C6 49           add  drawTextTbl
364   6399 6F              ld   l, a
365   639A                 ; 177 h = ((a +@= [&drawTextTbl >> 8]) -= l);
366   639A CE 63           adc  (drawTextTbl) >> (8)
367   639C 95              sub  l
368   639D 67              ld   h, a
369   639E                 ; 178 de = &C1;
370   639E 11 AF 63        ld   de, C1
371   63A1                 ; 179 bc = 7;
372   63A1 01 07 00        ld   bc, 7
373   63A4                 ; 180 ldir();
374   63A4 ED B0           ldir
375   63A6                 ; 181 de++; de++; de++;
376   63A6 13              inc  de
377   63A7 13              inc  de
378   63A8 13              inc  de
379   63A9                 ; 182 ldi();
380   63A9 ED A0           ldi
381   63AB                 ; 183 ex(bc, de, hl);
382   63AB D9              exx
383   63AC                 ; 185 b = 8;
384   63AC 06 08           ld   b, 8
385   63AE                 ; 186 do
386   63AE             l10014: 
387   63AE                 ; 187 {
388   63AE                 ; 188 a = *de; // Половинка
389   63AE 1A              ld   a, (de)
390   63AF                 ; 189 C1:         nop(); nop(); nop(); nop();
391   63AF             C1: 
392   63AF 00              nop
393   63B0 00              nop
394   63B1 00              nop
395   63B2 00              nop
396   63B3                 ; 190 c = a;
397   63B3 4F              ld   c, a
398   63B4                 ; 191 a &= 0;
399   63B4 E6 00           and  0
400   63B6                 ; 192 *hl = (a ^= *hl);
401   63B6 AE              xor  (hl)
402   63B7 77              ld   (hl), a
403   63B8                 ; 193 a = 0; // Половинка
404   63B8 3E 00           ld   a, 0
405   63BA                 ; 194 a &= c;
406   63BA A1              and  c
407   63BB                 ; 195 l++; // влево
408   63BB 2C              inc  l
409   63BC                 ; 196 *hl = (a ^= *hl);
410   63BC AE              xor  (hl)
411   63BD 77              ld   (hl), a
412   63BE                 ; 197 l--; // вправо
413   63BE 2D              dec  l
414   63BF                 ; 198 h++; // Цикл
415   63BF 24              inc  h
416   63C0                 ; 199 (a = h) &= 7;
417   63C0 7C              ld   a, h
418   63C1 E6 07           and  7
419   63C3                 ; 200 if (flag_z) drawCharNextLine();
420   63C3 CC D8 63        call z, drawCharNextLine
421   63C6                 ; 201 de++;
422   63C6 13              inc  de
423   63C7                 ; 202 } while(--b);
424   63C7 10 E5           djnz l10014
425   63C9             l10015: 
426   63C9                 ; 203 }
427   63C9 C1              pop  bc
428   63CA E1              pop  hl
429   63CB                 ; 205 // Адрес вывода следующего символа на экране
430   63CB                 ; 206 a = *de; // Ширина символа
431   63CB 1A              ld   a, (de)
432   63CC                 ; 207 a += c; // Смещение в пикселях
433   63CC 81              add  c
434   63CD                 ; 208 if (a >= 8) { a &= 7; l++; }
435   63CD FE 08           cp   8
436   63CF DA D5 63        jp   c, l10016
437   63D2 E6 07           and  7
438   63D4 2C              inc  l
439   63D5                 ; 209 c = a;
440   63D5             l10016: 
441   63D5 4F              ld   c, a
442   63D6                 ; 211 // Функция сохраняет DE
443   63D6                 ; 212 pop(de);
444   63D6 D1              pop  de
445   63D7                 ; 213 }
446   63D7 C9              ret
447   63D8                 ; 215 void drawCharNextLine()
448   63D8             drawCharNextLine: 
449   63D8                 ; 216 {
450   63D8                 ; 217 push(de)
451   63D8                 ; 218 {
452   63D8 D5              push de
453   63D9                 ; 219 hl += (de = [0x20 - 0x800]);
454   63D9 11 20 F8        ld   de, -2016
455   63DC 19              add  hl, de
456   63DD                 ; 220 }
457   63DD D1              pop  de
458   63DE                 ; 221 (a = h) &= 7;
459   63DE 7C              ld   a, h
460   63DF E6 07           and  7
461   63E1                 ; 222 if (flag_z) return;
462   63E1 C8              ret  z
463   63E2                 ; 223 push(de)
464   63E2                 ; 224 {
465   63E2 D5              push de
466   63E3                 ; 225 hl += (de = [0x800 - 0x100]);
467   63E3 11 00 07        ld   de, 1792
468   63E6 19              add  hl, de
469   63E7                 ; 226 }
470   63E7 D1              pop  de
471   63E8                 ; 227 }
472   63E8 C9              ret
473   63E9             
001   63E9                 ; 3 // Очистить оба экрана
002   63E9                 ; 4 // Вход: A - атрбут
003   63E9                 ; 5 // Сохраняет: A', BC', DE', HL', IY, IX
004   63E9                 ; 7 void clearScreen()
005   63E9             clearScreen: 
006   63E9                 ; 8 {
007   63E9                 ; 9 // В прерывании не выбирать видеостраницу
008   63E9                 ; 10 gVideoPage = a = 0;
009   63E9 3E 00           ld   a, 0
010   63EB 32 B7 60        ld   (gVideoPage), a
011   63EE                 ; 12 // Выбрать вторую видеостраницу для записи
012   63EE                 ; 13 a = gSystemPage;
013   63EE 3A B8 60        ld   a, (gSystemPage)
014   63F1                 ; 14 a |= 7;
015   63F1 F6 07           or   7
016   63F3                 ; 15 gSystemPage = a;
017   63F3 32 B8 60        ld   (gSystemPage), a
018   63F6                 ; 16 out(bc = 0x7FFD, a);
019   63F6 01 FD 7F        ld   bc, 32765
020   63F9 ED 79           out  (c), a
021   63FB                 ; 18 clearScreen1(hl = [0x5B00 - 1]);
022   63FB 21 FF 5A        ld   hl, 23295
023   63FE CD 15 64        call clearScreen1
024   6401                 ; 19 clearScreen1(hl = [0xDB00 - 1]);
025   6401 21 FF DA        ld   hl, 56063
026   6404 CD 15 64        call clearScreen1
027   6407                 ; 21 // Выбрать первую видеостраницу для отображения
028   6407                 ; 22 a = gSystemPage;
029   6407 3A B8 60        ld   a, (gSystemPage)
030   640A                 ; 23 a &= [~8];
031   640A E6 F7           and  ~(8)
032   640C                 ; 24 gSystemPage = a;
033   640C 32 B8 60        ld   (gSystemPage), a
034   640F                 ; 25 out(bc = 0x7FFD, a);
035   640F 01 FD 7F        ld   bc, 32765
036   6412 ED 79           out  (c), a
037   6414                 ; 26 }
038   6414 C9              ret
039   6415                 ; 28 void clearScreen1(hl, a)
040   6415             clearScreen1: 
041   6415                 ; 29 {
042   6415                 ; 30 d = h;
043   6415 54              ld   d, h
044   6416                 ; 31 e = l;
045   6416 5D              ld   e, l
046   6417                 ; 32 de--;
047   6417 1B              dec  de
048   6418                 ; 33 a ^= a;
049   6418 AF              xor  a
050   6419                 ; 34 *hl = 0;
051   6419 36 00           ld   (hl), 0
052   641B                 ; 35 lddr(bc = [0x1B00 - 1]);
053   641B 01 FF 1A        ld   bc, 6911
054   641E ED B8           lddr
055   6420                 ; 36 }
056   6420 C9              ret
057   6421                 ; 38 void beginDraw()
058   6421             beginDraw: 
059   6421                 ; 39 {
060   6421                 ; 40 hl = &gVideoPage;
061   6421 21 B7 60        ld   hl, gVideoPage
062   6424                 ; 41 while ((a = *hl) & 1);
063   6424             l0: 
064   6424 7E              ld   a, (hl)
065   6425 CB 47           bit  0, a
066   6427 CA 2D 64        jp   z, l1
067   642A C3 24 64        jp   l0
068   642D             l1: 
069   642D                 ; 42 a &= 0x7F;
070   642D E6 7F           and  127
071   642F                 ; 43 if (flag_z a & 8) a |= 0x80;
072   642F CB 5F           bit  3, a
073   6431 C2 36 64        jp   nz, l2
074   6434 F6 80           or   128
075   6436                 ; 44 *hl = a;
076   6436             l2: 
077   6436 77              ld   (hl), a
078   6437                 ; 45 }
079   6437 C9              ret
080   6438                 ; 47 void endDraw()
081   6438             endDraw: 
082   6438                 ; 48 {    
083   6438                 ; 49 gVideoPage = ((a = gVideoPage) ^= 8 |= 1);
084   6438 3A B7 60        ld   a, (gVideoPage)
085   643B EE 08           xor  8
086   643D F6 01           or   1
087   643F 32 B7 60        ld   (gVideoPage), a
088   6442                 ; 50 }
089   6442 C9              ret
090   6443                 ; 52 void copyVideoPage()
091   6443             copyVideoPage: 
092   6443                 ; 53 {
093   6443                 ; 54 // Переключаемся на 2-ую страницу и обновляем там панель
094   6443                 ; 55 beginDraw();
095   6443 CD 21 64        call beginDraw
096   6446                 ; 56 panelRedraw();
097   6446 CD 76 64        call panelRedraw
098   6449                 ; 57 endDraw();
099   6449 CD 38 64        call endDraw
100   644C                 ; 59 // Ждем завершения переключения
101   644C                 ; 60 hl = &gVideoPage;
102   644C 21 B7 60        ld   hl, gVideoPage
103   644F                 ; 61 do {} while (flag_nz *hl & 1);
104   644F             l3: 
105   644F CB 46           bit  0, (hl)
106   6451 C2 4F 64        jp   nz, l3
107   6454             l4: 
108   6454                 ; 63 // Копируем 2-ую страницу на первую
109   6454                 ; 64 ldir(hl = 0xC000, de = 0x4000, bc = 0x1B00);
110   6454 21 00 C0        ld   hl, 49152
111   6457 11 00 40        ld   de, 16384
112   645A 01 00 1B        ld   bc, 6912
113   645D ED B0           ldir
114   645F                 ; 65 }
115   645F C9              ret
116   6460                 ; 67 void drawPanel()
117   6460             drawPanel: 
118   6460                 ; 68 {
119   6460                 ; 69 // Рисуем панель на нулевой видеостранице
120   6460                 ; 70 farCall(iyl = &gPanelgraphPage, ix = &gPanelgraph);
121   6460 FD 2E 06        ld   iyl, gPanelgraphPage
122   6463 DD 21 03 C0     ld   ix, gPanelgraph
123   6467 CD A6 61        call farCall
124   646A                 ; 71 // Копируем её на первую видеостраницу. Для ускорения копируем только нижнюю треть ч/б.
125   646A                 ; 72 ldir(hl = 0x5000, de = 0xD000, bc = 0xB00);
126   646A 21 00 50        ld   hl, 20480
127   646D 11 00 D0        ld   de, 53248
128   6470 01 00 0B        ld   bc, 2816
129   6473 ED B0           ldir
130   6475                 ; 73 }
131   6475 C9              ret
132   6476             
001   6476                 ; 3 const int gPanelChangedMoney = 0x01;
002   6476                 ; 4 const int gPanelChangedPlace = 0x02;
003   6476                 ; 6 const int panelMoneyX = 4;
004   6476                 ; 7 const int panelMoneyY = 22;
005   6476                 ; 8 const int panelMoneyW = 3;
006   6476                 ; 9 const int panelMoneyH = 1;
007   6476                 ; 10 const int panelMoneyColor = 0x4E;
008   6476                 ; 12 const int panelPlaceX = 4;
009   6476                 ; 13 const int panelPlaceY = 20;
010   6476                 ; 14 const int panelPlaceW = 3;
011   6476                 ; 15 const int panelPlaceH = 1;
012   6476                 ; 16 const int panelPlaceColor = 0x4E;
013   6476                 ; 18 void panelRedraw()
014   6476             panelRedraw: 
015   6476                 ; 19 {
016   6476                 ; 20 // Нужно ли перерисовать?
017   6476                 ; 21 hl = &gPanelChangedA;
018   6476 21 DC 60        ld   hl, gPanelChangedA
019   6479                 ; 22 if ((a = gVideoPage) & 0x80) hl++;
020   6479 3A B7 60        ld   a, (gVideoPage)
021   647C CB 7F           bit  7, a
022   647E CA 82 64        jp   z, l6000
023   6481 23              inc  hl
024   6482                 ; 23 a = *hl;
025   6482             l6000: 
026   6482 7E              ld   a, (hl)
027   6483                 ; 24 if (flag_z a |= a) return;
028   6483 B7              or   a
029   6484 C8              ret  z
030   6485                 ; 25 *hl = 0;
031   6485 36 00           ld   (hl), 0
032   6487                 ; 27 // Надо перерисовать деньги
033   6487                 ; 28 if (a & gPanelChangedMoney)
034   6487 CB 47           bit  0, a
035   6489                 ; 29 {
036   6489 CA C5 64        jp   z, l6001
037   648C                 ; 30 push(a)
038   648C                 ; 31 {
039   648C F5              push af
040   648D                 ; 32 numberToString16(hl = &gStringBuffer, de = gPlayerMoney);
041   648D 21 96 60        ld   hl, gStringBuffer
042   6490 ED 5B BB 60     ld   de, (gPlayerMoney)
043   6494 CD F3 6A        call numberToString16
044   6497                 ; 34 hl = &gStringBuffer;
045   6497 21 96 60        ld   hl, gStringBuffer
046   649A                 ; 35 while()
047   649A             l6002: 
048   649A                 ; 36 {
049   649A                 ; 37 (a = *hl) -= [48 - 22];
050   649A 7E              ld   a, (hl)
051   649B D6 1A           sub  26
052   649D                 ; 38 if (flag_c) break;
053   649D DA A5 64        jp   c, l6003
054   64A0                 ; 39 *hl = a; hl++;
055   64A0 77              ld   (hl), a
056   64A1 23              inc  hl
057   64A2                 ; 40 }
058   64A2 C3 9A 64        jp   l6002
059   64A5             l6003: 
060   64A5                 ; 41 hl++; *hl = 2;
061   64A5 23              inc  hl
062   64A6 36 02           ld   (hl), 2
063   64A8                 ; 43 gCalcCoords(hl = [panelMoneyY * 8 * 256 + panelMoneyX * 8]);
064   64A8 21 20 B0        ld   hl, 45088
065   64AB CD 75 60        call gCalcCoords
066   64AE                 ; 44 fillRect(hl, bc = [panelMoneyH * 256 + panelMoneyW]);
067   64AE 01 03 01        ld   bc, 259
068   64B1 CD C9 6A        call fillRect
069   64B4                 ; 46 gCalcCoords(hl = [(panelMoneyY * 8 + 2) * 256 + panelMoneyX * 8]);
070   64B4 21 20 B2        ld   hl, 45600
071   64B7 CD 75 60        call gCalcCoords
072   64BA                 ; 47 gDrawText(hl, c = 0, de = &gStringBuffer, a = panelMoneyColor);
073   64BA 0E 00           ld   c, 0
074   64BC 11 96 60        ld   de, gStringBuffer
075   64BF 3E 4E           ld   a, 78
076   64C1 CD 63 60        call gDrawText
077   64C4                 ; 48 }
078   64C4 F1              pop  af
079   64C5                 ; 49 }
080   64C5                 ; 50 /*
081   64C5                 ; 64 }
082   64C5             l6001: 
083   64C5 C9              ret
084   64C6             
001   64C6             image_font: 
002   64C6                 db 008h, 010h, 020h, 040h, 080h, 000h, 000h, 000h, 6 ; 0
002   64C6 081020408000000006
003   64CF                 db 060h, 090h, 090h, 090h, 060h, 000h, 000h, 000h, 5 ; 1
003   64CF 609090906000000005
004   64D8                 db 040h, 0C0h, 040h, 040h, 0E0h, 000h, 000h, 000h, 4 ; 2
004   64D8 40C04040E000000004
005   64E1                 db 060h, 090h, 020h, 040h, 0F0h, 000h, 000h, 000h, 5 ; 3
005   64E1 60902040F000000005
006   64EA                 db 060h, 090h, 020h, 090h, 060h, 000h, 000h, 000h, 5 ; 4
006   64EA 609020906000000005
007   64F3                 db 090h, 090h, 0F0h, 010h, 010h, 000h, 000h, 000h, 5 ; 5
007   64F3 9090F0101000000005
008   64FC                 db 0F0h, 080h, 0E0h, 010h, 0E0h, 000h, 000h, 000h, 5 ; 6
008   64FC F080E010E000000005
009   6505                 db 060h, 080h, 0E0h, 090h, 060h, 000h, 000h, 000h, 5 ; 7
009   6505 6080E0906000000005
010   650E                 db 0F0h, 010h, 020h, 040h, 040h, 000h, 000h, 000h, 5 ; 8
010   650E F01020404000000005
011   6517                 db 060h, 090h, 060h, 090h, 060h, 000h, 000h, 000h, 5 ; 9
011   6517 609060906000000005
012   6520                 db 060h, 090h, 070h, 010h, 060h, 000h, 000h, 000h, 5 ; 10
012   6520 609070106000000005
013   6529                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 4 ; 11
013   6529 000000000000000004
014   6532                 db 020h, 020h, 020h, 020h, 020h, 000h, 020h, 000h, 6 ; 12
014   6532 202020202000200006
015   653B                 db 050h, 050h, 050h, 000h, 000h, 000h, 000h, 000h, 6 ; 13
015   653B 505050000000000006
016   6544                 db 050h, 050h, 0F8h, 050h, 0F8h, 050h, 050h, 000h, 6 ; 14
016   6544 5050F850F850500006
017   654D                 db 088h, 070h, 088h, 088h, 088h, 070h, 088h, 000h, 6 ; 15
017   654D 887088888870880006
018   6556                 db 0C0h, 0C8h, 010h, 020h, 040h, 098h, 018h, 000h, 6 ; 16
018   6556 C0C810204098180006
019   655F                 db 040h, 0A0h, 0A0h, 040h, 0A8h, 090h, 068h, 000h, 6 ; 17
019   655F 40A0A040A890680006
020   6568                 db 020h, 020h, 020h, 000h, 000h, 000h, 000h, 000h, 6 ; 18
020   6568 202020000000000006
021   6571                 db 020h, 040h, 080h, 080h, 080h, 040h, 020h, 000h, 4 ; 19
021   6571 204080808040200004
022   657A                 db 080h, 040h, 020h, 020h, 020h, 040h, 080h, 000h, 4 ; 20
022   657A 804020202040800004
023   6583                 db 000h, 000h, 000h, 050h, 020h, 050h, 000h, 000h, 6 ; 21
023   6583 000000502050000006
024   658C                 db 000h, 020h, 020h, 0F8h, 020h, 020h, 000h, 000h, 6 ; 22
024   658C 002020F82020000006
025   6595                 db 000h, 000h, 000h, 000h, 000h, 000h, 040h, 080h, 3 ; 23
025   6595 000000000000408003
026   659E                 db 000h, 000h, 000h, 0F0h, 000h, 000h, 000h, 000h, 5 ; 24
026   659E 000000F00000000005
027   65A7                 db 000h, 000h, 000h, 000h, 000h, 000h, 040h, 000h, 4 ; 25
027   65A7 000000000000400004
028   65B0                 db 000h, 008h, 010h, 020h, 040h, 080h, 000h, 000h, 6 ; 26
028   65B0 000810204080000006
029   65B9                 db 060h, 090h, 090h, 090h, 090h, 090h, 060h, 000h, 5 ; 27
029   65B9 609090909090600005
030   65C2                 db 040h, 0C0h, 040h, 040h, 040h, 040h, 0E0h, 000h, 4 ; 28
030   65C2 40C040404040E00004
031   65CB                 db 060h, 090h, 010h, 020h, 040h, 080h, 0F0h, 000h, 5 ; 29
031   65CB 609010204080F00005
032   65D4                 db 060h, 090h, 010h, 020h, 010h, 090h, 060h, 000h, 5 ; 30
032   65D4 609010201090600005
033   65DD                 db 010h, 030h, 050h, 090h, 0F0h, 010h, 010h, 000h, 5 ; 31
033   65DD 10305090F010100005
034   65E6                 db 0F0h, 080h, 0E0h, 010h, 010h, 010h, 0E0h, 000h, 5 ; 32
034   65E6 F080E0101010E00005
035   65EF                 db 060h, 080h, 0E0h, 090h, 090h, 090h, 060h, 000h, 5 ; 33
035   65EF 6080E0909090600005
036   65F8                 db 0F0h, 010h, 020h, 020h, 040h, 040h, 040h, 000h, 5 ; 34
036   65F8 F01020204040400005
037   6601                 db 060h, 090h, 090h, 060h, 090h, 090h, 060h, 000h, 5 ; 35
037   6601 609090609090600005
038   660A                 db 060h, 090h, 090h, 070h, 010h, 010h, 060h, 000h, 5 ; 36
038   660A 609090701010600005
039   6613                 db 000h, 000h, 040h, 000h, 000h, 040h, 000h, 000h, 4 ; 37
039   6613 000040000040000004
040   661C                 db 000h, 000h, 040h, 000h, 000h, 040h, 040h, 000h, 4 ; 38
040   661C 000040000040400004
041   6625                 db 010h, 020h, 040h, 080h, 040h, 020h, 010h, 000h, 5 ; 39
041   6625 102040804020100005
042   662E                 db 000h, 000h, 0F8h, 000h, 0F8h, 000h, 000h, 000h, 6 ; 40
042   662E 0000F800F800000006
043   6637                 db 040h, 020h, 010h, 008h, 010h, 020h, 040h, 000h, 7 ; 41
043   6637 402010081020400007
044   6640                 db 060h, 090h, 010h, 020h, 020h, 000h, 020h, 000h, 5 ; 42
044   6640 609010202000200005
045   6649                 db 000h, 040h, 060h, 070h, 060h, 040h, 000h, 000h, 6 ; 43
045   6649 004060706040000006
046   6652                 db 020h, 050h, 088h, 088h, 0F8h, 088h, 088h, 000h, 6 ; 44
046   6652 20508888F888880006
047   665B                 db 0F0h, 088h, 088h, 0F0h, 088h, 088h, 0F0h, 000h, 6 ; 45
047   665B F08888F08888F00006
048   6664                 db 070h, 088h, 080h, 080h, 080h, 088h, 070h, 000h, 6 ; 46
048   6664 708880808088700006
049   666D                 db 0F0h, 088h, 088h, 088h, 088h, 088h, 0F0h, 000h, 6 ; 47
049   666D F08888888888F00006
050   6676                 db 0F8h, 080h, 080h, 0F0h, 080h, 080h, 0F8h, 000h, 6 ; 48
050   6676 F88080F08080F80006
051   667F                 db 0F8h, 080h, 080h, 0F0h, 080h, 080h, 080h, 000h, 6 ; 49
051   667F F88080F08080800006
052   6688                 db 078h, 080h, 080h, 080h, 098h, 088h, 078h, 000h, 6 ; 50
052   6688 788080809888780006
053   6691                 db 088h, 088h, 088h, 0F8h, 088h, 088h, 088h, 000h, 6 ; 51
053   6691 888888F88888880006
054   669A                 db 070h, 020h, 020h, 020h, 020h, 020h, 070h, 000h, 6 ; 52
054   669A 702020202020700006
055   66A3                 db 008h, 008h, 008h, 008h, 008h, 088h, 070h, 000h, 6 ; 53
055   66A3 080808080888700006
056   66AC                 db 088h, 090h, 0A0h, 0C0h, 0A0h, 090h, 088h, 000h, 6 ; 54
056   66AC 8890A0C0A090880006
057   66B5                 db 080h, 080h, 080h, 080h, 080h, 080h, 0F8h, 000h, 6 ; 55
057   66B5 808080808080F80006
058   66BE                 db 088h, 0D8h, 0A8h, 0A8h, 088h, 088h, 088h, 000h, 6 ; 56
058   66BE 88D8A8A88888880006
059   66C7                 db 088h, 088h, 0C8h, 0A8h, 098h, 088h, 088h, 000h, 6 ; 57
059   66C7 8888C8A89888880006
060   66D0                 db 070h, 088h, 088h, 088h, 088h, 088h, 070h, 000h, 6 ; 58
060   66D0 708888888888700006
061   66D9                 db 0F0h, 088h, 088h, 0F0h, 080h, 080h, 080h, 000h, 6 ; 59
061   66D9 F08888F08080800006
062   66E2                 db 070h, 088h, 088h, 088h, 0A8h, 090h, 068h, 000h, 6 ; 60
062   66E2 70888888A890680006
063   66EB                 db 0F0h, 088h, 088h, 0F0h, 0A0h, 090h, 088h, 000h, 6 ; 61
063   66EB F08888F0A090880006
064   66F4                 db 070h, 088h, 080h, 070h, 008h, 088h, 070h, 000h, 6 ; 62
064   66F4 708880700888700006
065   66FD                 db 0F8h, 020h, 020h, 020h, 020h, 020h, 020h, 000h, 6 ; 63
065   66FD F82020202020200006
066   6706                 db 088h, 088h, 088h, 088h, 088h, 088h, 070h, 000h, 6 ; 64
066   6706 888888888888700006
067   670F                 db 088h, 088h, 088h, 088h, 088h, 050h, 020h, 000h, 6 ; 65
067   670F 888888888850200006
068   6718                 db 088h, 088h, 088h, 0A8h, 0A8h, 0D8h, 088h, 000h, 6 ; 66
068   6718 888888A8A8D8880006
069   6721                 db 088h, 088h, 050h, 020h, 050h, 088h, 088h, 000h, 6 ; 67
069   6721 888850205088880006
070   672A                 db 088h, 088h, 050h, 020h, 020h, 020h, 020h, 000h, 6 ; 68
070   672A 888850202020200006
071   6733                 db 0F8h, 008h, 010h, 020h, 040h, 080h, 0F8h, 000h, 6 ; 69
071   6733 F80810204080F80006
072   673C                 db 078h, 040h, 040h, 040h, 040h, 040h, 078h, 000h, 7 ; 70
072   673C 784040404040780007
073   6745                 db 000h, 080h, 040h, 020h, 010h, 008h, 000h, 000h, 6 ; 71
073   6745 008040201008000006
074   674E                 db 0F0h, 010h, 010h, 010h, 010h, 010h, 0F0h, 000h, 5 ; 72
074   674E F01010101010F00005
075   6757                 db 000h, 020h, 050h, 088h, 000h, 000h, 000h, 000h, 6 ; 73
075   6757 002050880000000006
076   6760                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 0FCh, 7 ; 74
076   6760 00000000000000FC07
077   6769                 db 040h, 020h, 010h, 000h, 000h, 000h, 000h, 000h, 6 ; 75
077   6769 402010000000000006
078   6772                 db 000h, 000h, 060h, 010h, 070h, 090h, 070h, 000h, 5 ; 76
078   6772 000060107090700005
079   677B                 db 080h, 080h, 0E0h, 090h, 090h, 090h, 0E0h, 000h, 5 ; 77
079   677B 8080E0909090E00005
080   6784                 db 000h, 000h, 070h, 080h, 080h, 080h, 070h, 000h, 5 ; 78
080   6784 000070808080700005
081   678D                 db 010h, 010h, 070h, 090h, 090h, 090h, 070h, 000h, 5 ; 79
081   678D 101070909090700005
082   6796                 db 000h, 000h, 060h, 090h, 0F0h, 080h, 060h, 000h, 5 ; 80
082   6796 00006090F080600005
083   679F                 db 030h, 048h, 040h, 0F0h, 040h, 040h, 040h, 000h, 6 ; 81
083   679F 304840F04040400006
084   67A8                 db 000h, 000h, 070h, 090h, 090h, 070h, 010h, 060h, 5 ; 82
084   67A8 000070909070106005
085   67B1                 db 080h, 080h, 0E0h, 090h, 090h, 090h, 090h, 000h, 5 ; 83
085   67B1 8080E0909090900005
086   67BA                 db 080h, 000h, 080h, 080h, 080h, 080h, 080h, 000h, 2 ; 84
086   67BA 800080808080800002
087   67C3                 db 010h, 000h, 030h, 010h, 010h, 010h, 090h, 060h, 5 ; 85
087   67C3 100030101010906005
088   67CC                 db 080h, 080h, 090h, 0A0h, 0C0h, 0A0h, 090h, 000h, 5 ; 86
088   67CC 808090A0C0A0900005
089   67D5                 db 080h, 080h, 080h, 080h, 080h, 080h, 080h, 000h, 2 ; 87
089   67D5 808080808080800002
090   67DE                 db 000h, 000h, 0D8h, 0A8h, 0A8h, 0A8h, 0A8h, 000h, 6 ; 88
090   67DE 0000D8A8A8A8A80006
091   67E7                 db 000h, 000h, 0A0h, 0D0h, 090h, 090h, 090h, 000h, 5 ; 89
091   67E7 0000A0D09090900005
092   67F0                 db 000h, 000h, 060h, 090h, 090h, 090h, 060h, 000h, 5 ; 90
092   67F0 000060909090600005
093   67F9                 db 000h, 000h, 0E0h, 090h, 090h, 0E0h, 080h, 080h, 5 ; 91
093   67F9 0000E09090E0808005
094   6802                 db 000h, 000h, 070h, 090h, 090h, 070h, 010h, 010h, 5 ; 92
094   6802 000070909070101005
095   680B                 db 000h, 000h, 0B0h, 0C0h, 080h, 080h, 080h, 000h, 5 ; 93
095   680B 0000B0C08080800005
096   6814                 db 000h, 000h, 060h, 080h, 060h, 010h, 060h, 000h, 5 ; 94
096   6814 000060806010600005
097   681D                 db 040h, 040h, 0E0h, 040h, 040h, 040h, 030h, 000h, 5 ; 95
097   681D 4040E0404040300005
098   6826                 db 000h, 000h, 090h, 090h, 090h, 0B0h, 050h, 000h, 5 ; 96
098   6826 0000909090B0500005
099   682F                 db 000h, 000h, 088h, 088h, 050h, 050h, 020h, 000h, 6 ; 97
099   682F 000088885050200006
100   6838                 db 000h, 000h, 088h, 088h, 0A8h, 0A8h, 050h, 000h, 6 ; 98
100   6838 00008888A8A8500006
101   6841                 db 000h, 000h, 088h, 050h, 020h, 050h, 088h, 000h, 6 ; 99
101   6841 000088502050880006
102   684A                 db 000h, 000h, 090h, 090h, 090h, 070h, 010h, 060h, 5 ; 100
102   684A 000090909070106005
103   6853                 db 000h, 000h, 0F0h, 020h, 040h, 080h, 0F0h, 000h, 5 ; 101
103   6853 0000F0204080F00005
104   685C                 db 000h, 000h, 048h, 090h, 048h, 000h, 000h, 000h, 6 ; 102
104   685C 000048904800000006
105   6865                 db 078h, 084h, 0B4h, 0A4h, 0B4h, 084h, 078h, 000h, 7 ; 103
105   6865 7884B4A4B484780007
106   686E                 db 000h, 000h, 090h, 048h, 090h, 000h, 000h, 000h, 6 ; 104
106   686E 000090489000000006
107   6877                 db 0FCh, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 7 ; 105
107   6877 FC0000000000000007
108   6880                 db 050h, 000h, 070h, 088h, 0F8h, 080h, 078h, 000h, 6 ; 106
108   6880 50007088F880780006
109   6889                 db 070h, 088h, 088h, 088h, 0F8h, 088h, 088h, 000h, 6 ; 107
109   6889 70888888F888880006
110   6892                 db 0F8h, 080h, 080h, 0F0h, 088h, 088h, 0F0h, 000h, 6 ; 108
110   6892 F88080F08888F00006
111   689B                 db 0F0h, 088h, 088h, 0F0h, 088h, 088h, 0F0h, 000h, 6 ; 109
111   689B F08888F08888F00006
112   68A4                 db 0F8h, 080h, 080h, 080h, 080h, 080h, 080h, 000h, 6 ; 110
112   68A4 F88080808080800006
113   68AD                 db 038h, 048h, 048h, 048h, 048h, 048h, 0FCh, 084h, 7 ; 111
113   68AD 384848484848FC8407
114   68B6                 db 0F8h, 080h, 080h, 0F0h, 080h, 080h, 0F8h, 000h, 6 ; 112
114   68B6 F88080F08080F80006
115   68BF                 db 0A8h, 0A8h, 0A8h, 070h, 0A8h, 0A8h, 0A8h, 000h, 6 ; 113
115   68BF A8A8A870A8A8A80006
116   68C8                 db 070h, 088h, 008h, 030h, 008h, 088h, 070h, 000h, 6 ; 114
116   68C8 708808300888700006
117   68D1                 db 088h, 088h, 098h, 0A8h, 0C8h, 088h, 088h, 000h, 6 ; 115
117   68D1 888898A8C888880006
118   68DA                 db 088h, 088h, 098h, 0A8h, 0C8h, 088h, 088h, 000h, 6 ; 116
118   68DA 888898A8C888880006
119   68E3                 db 088h, 090h, 0A0h, 0C0h, 0A0h, 090h, 088h, 000h, 6 ; 117
119   68E3 8890A0C0A090880006
120   68EC                 db 018h, 028h, 048h, 088h, 088h, 088h, 088h, 000h, 6 ; 118
120   68EC 182848888888880006
121   68F5                 db 088h, 0D8h, 0A8h, 088h, 088h, 088h, 088h, 000h, 6 ; 119
121   68F5 88D8A8888888880006
122   68FE                 db 088h, 088h, 088h, 0F8h, 088h, 088h, 088h, 000h, 6 ; 120
122   68FE 888888F88888880006
123   6907                 db 070h, 088h, 088h, 088h, 088h, 088h, 070h, 000h, 6 ; 121
123   6907 708888888888700006
124   6910                 db 0F8h, 088h, 088h, 088h, 088h, 088h, 088h, 000h, 6 ; 122
124   6910 F88888888888880006
125   6919                 db 0F0h, 088h, 088h, 088h, 0F0h, 080h, 080h, 000h, 6 ; 123
125   6919 F0888888F080800006
126   6922                 db 070h, 088h, 080h, 080h, 080h, 088h, 070h, 000h, 6 ; 124
126   6922 708880808088700006
127   692B                 db 0F8h, 020h, 020h, 020h, 020h, 020h, 020h, 000h, 6 ; 125
127   692B F82020202020200006
128   6934                 db 088h, 088h, 088h, 078h, 008h, 088h, 070h, 000h, 6 ; 126
128   6934 888888780888700006
129   693D                 db 020h, 070h, 0A8h, 0A8h, 0A8h, 070h, 020h, 000h, 6 ; 127
129   693D 2070A8A8A870200006
130   6946                 db 088h, 088h, 050h, 020h, 050h, 088h, 088h, 000h, 6 ; 128
130   6946 888850205088880006
131   694F                 db 090h, 090h, 090h, 090h, 090h, 090h, 0F8h, 008h, 6 ; 129
131   694F 909090909090F80806
132   6958                 db 088h, 088h, 088h, 078h, 008h, 008h, 008h, 000h, 6 ; 130
132   6958 888888780808080006
133   6961                 db 0A8h, 0A8h, 0A8h, 0A8h, 0A8h, 0A8h, 0F8h, 000h, 6 ; 131
133   6961 A8A8A8A8A8A8F80006
134   696A                 db 0A8h, 0A8h, 0A8h, 0A8h, 0A8h, 0A8h, 0FCh, 004h, 7 ; 132
134   696A A8A8A8A8A8A8FC0407
135   6973                 db 0C0h, 040h, 070h, 048h, 048h, 048h, 070h, 000h, 6 ; 133
135   6973 C04070484848700006
136   697C                 db 084h, 084h, 0E4h, 094h, 094h, 094h, 0E4h, 000h, 7 ; 134
136   697C 8484E4949494E40007
137   6985                 db 080h, 080h, 0F0h, 088h, 088h, 088h, 0F0h, 000h, 6 ; 135
137   6985 8080F0888888F00006
138   698E                 db 070h, 088h, 008h, 078h, 008h, 088h, 070h, 000h, 6 ; 136
138   698E 708808780888700006
139   6997                 db 090h, 0A8h, 0A8h, 0E8h, 0A8h, 0A8h, 090h, 000h, 6 ; 137
139   6997 90A8A8E8A8A8900006
140   69A0                 db 078h, 088h, 088h, 088h, 078h, 048h, 088h, 000h, 6 ; 138
140   69A0 788888887848880006
141   69A9                 db 000h, 000h, 060h, 010h, 070h, 090h, 070h, 000h, 5 ; 139
141   69A9 000060107090700005
142   69B2                 db 000h, 000h, 0E0h, 080h, 0E0h, 090h, 0E0h, 000h, 5 ; 140
142   69B2 0000E080E090E00005
143   69BB                 db 000h, 000h, 0E0h, 090h, 0E0h, 090h, 0E0h, 000h, 5 ; 141
143   69BB 0000E090E090E00005
144   69C4                 db 000h, 000h, 0E0h, 080h, 080h, 080h, 080h, 000h, 4 ; 142
144   69C4 0000E0808080800004
145   69CD                 db 000h, 000h, 030h, 050h, 050h, 050h, 0F8h, 088h, 6 ; 143
145   69CD 000030505050F88806
146   69D6                 db 000h, 000h, 060h, 090h, 0F0h, 080h, 060h, 000h, 5 ; 144
146   69D6 00006090F080600005
147   69DF                 db 000h, 000h, 0A8h, 0A8h, 070h, 0A8h, 0A8h, 000h, 6 ; 145
147   69DF 0000A8A870A8A80006
148   69E8                 db 000h, 000h, 060h, 090h, 020h, 090h, 060h, 000h, 5 ; 146
148   69E8 000060902090600005
149   69F1                 db 000h, 000h, 090h, 090h, 0B0h, 0D0h, 090h, 000h, 5 ; 147
149   69F1 00009090B0D0900005
150   69FA                 db 060h, 000h, 090h, 090h, 0B0h, 0D0h, 090h, 000h, 5 ; 148
150   69FA 60009090B0D0900005
151   6A03                 db 000h, 000h, 090h, 0A0h, 0C0h, 0A0h, 090h, 000h, 5 ; 149
151   6A03 000090A0C0A0900005
152   6A0C                 db 000h, 000h, 030h, 050h, 090h, 090h, 090h, 000h, 5 ; 150
152   6A0C 000030509090900005
153   6A15                 db 000h, 000h, 088h, 0D8h, 0A8h, 088h, 088h, 000h, 6 ; 151
153   6A15 000088D8A888880006
154   6A1E                 db 000h, 000h, 090h, 090h, 0F0h, 090h, 090h, 000h, 5 ; 152
154   6A1E 00009090F090900005
155   6A27                 db 000h, 000h, 060h, 090h, 090h, 090h, 060h, 000h, 5 ; 153
155   6A27 000060909090600005
156   6A30                 db 000h, 000h, 0F0h, 090h, 090h, 090h, 090h, 000h, 5 ; 154
156   6A30 0000F0909090900005
157   6A39                 db 000h, 000h, 0E0h, 090h, 090h, 0E0h, 080h, 000h, 5 ; 155
157   6A39 0000E09090E0800005
158   6A42                 db 000h, 000h, 060h, 090h, 080h, 090h, 060h, 000h, 5 ; 156
158   6A42 000060908090600005
159   6A4B                 db 000h, 000h, 0E0h, 040h, 040h, 040h, 040h, 000h, 4 ; 157
159   6A4B 0000E0404040400004
160   6A54                 db 000h, 000h, 090h, 090h, 070h, 010h, 060h, 000h, 5 ; 158
160   6A54 000090907010600005
161   6A5D                 db 000h, 020h, 070h, 0A8h, 0A8h, 0A8h, 070h, 020h, 6 ; 159
161   6A5D 002070A8A8A8702006
162   6A66                 db 000h, 000h, 090h, 090h, 060h, 090h, 090h, 000h, 5 ; 160
162   6A66 000090906090900005
163   6A6F                 db 000h, 000h, 090h, 090h, 090h, 090h, 0F8h, 008h, 6 ; 161
163   6A6F 000090909090F80806
164   6A78                 db 000h, 000h, 090h, 090h, 070h, 010h, 010h, 000h, 5 ; 162
164   6A78 000090907010100005
165   6A81                 db 000h, 000h, 0A8h, 0A8h, 0A8h, 0A8h, 0F8h, 000h, 6 ; 163
165   6A81 0000A8A8A8A8F80006
166   6A8A                 db 000h, 000h, 0A8h, 0A8h, 0A8h, 0A8h, 0FCh, 004h, 7 ; 164
166   6A8A 0000A8A8A8A8FC0407
167   6A93                 db 000h, 000h, 0C0h, 070h, 048h, 048h, 070h, 000h, 6 ; 165
167   6A93 0000C0704848700006
168   6A9C                 db 000h, 000h, 084h, 0E4h, 094h, 094h, 0E4h, 000h, 7 ; 166
168   6A9C 000084E49494E40007
169   6AA5                 db 000h, 000h, 080h, 0E0h, 090h, 090h, 0E0h, 000h, 5 ; 167
169   6AA5 000080E09090E00005
170   6AAE                 db 000h, 000h, 0E0h, 010h, 070h, 010h, 0E0h, 000h, 5 ; 168
170   6AAE 0000E0107010E00005
171   6AB7                 db 000h, 000h, 098h, 0A4h, 0E4h, 0A4h, 098h, 000h, 7 ; 169
171   6AB7 000098A4E4A4980007
172   6AC0                 db 000h, 000h, 070h, 090h, 090h, 070h, 090h, 000h, 5 ; 170
172   6AC0 000070909070900005
173   6AC9             
001   6AC9                 ; 3 void fillRect(hl, bc)
002   6AC9             fillRect: 
003   6AC9                 ; 4 {
004   6AC9                 ; 5 ixl = b;
005   6AC9 DD 68           ld   ixl, b
006   6ACB                 ; 6 do
007   6ACB             l3000: 
008   6ACB                 ; 7 {
009   6ACB                 ; 8 a ^= a;
010   6ACB AF              xor  a
011   6ACC                 ; 9 d = h; e = l;
012   6ACC 54              ld   d, h
013   6ACD 5D              ld   e, l
014   6ACE                 ; 10 b = c;
015   6ACE 41              ld   b, c
016   6ACF                 ; 11 do
017   6ACF             l3002: 
018   6ACF                 ; 12 {
019   6ACF                 ; 13 *hl = a; h++;
020   6ACF 77              ld   (hl), a
021   6AD0 24              inc  h
022   6AD1                 ; 14 *hl = a; h++;
023   6AD1 77              ld   (hl), a
024   6AD2 24              inc  h
025   6AD3                 ; 15 *hl = a; h++;
026   6AD3 77              ld   (hl), a
027   6AD4 24              inc  h
028   6AD5                 ; 16 *hl = a; h++;
029   6AD5 77              ld   (hl), a
030   6AD6 24              inc  h
031   6AD7                 ; 17 *hl = a; h++;
032   6AD7 77              ld   (hl), a
033   6AD8 24              inc  h
034   6AD9                 ; 18 *hl = a; h++;
035   6AD9 77              ld   (hl), a
036   6ADA 24              inc  h
037   6ADB                 ; 19 *hl = a; h++;
038   6ADB 77              ld   (hl), a
039   6ADC 24              inc  h
040   6ADD                 ; 20 *hl = a; h = d;
041   6ADD 77              ld   (hl), a
042   6ADE 62              ld   h, d
043   6ADF                 ; 21 l++;
044   6ADF 2C              inc  l
045   6AE0                 ; 22 } while(--b);
046   6AE0 10 ED           djnz l3002
047   6AE2             l3003: 
048   6AE2                 ; 24 // Адрес следующей строки
049   6AE2                 ; 25 l = ((a = e) += 32);
050   6AE2 7B              ld   a, e
051   6AE3 C6 20           add  32
052   6AE5 6F              ld   l, a
053   6AE6                 ; 26 if (flag_c) h = ((a = h) += 8);
054   6AE6 D2 ED 6A        jp   nc, l3004
055   6AE9 7C              ld   a, h
056   6AEA C6 08           add  8
057   6AEC 67              ld   h, a
058   6AED                 ; 27 } while(flag_nz --ixl);
059   6AED             l3004: 
060   6AED DD 2D           dec  ixl
061   6AEF C2 CB 6A        jp   nz, l3000
062   6AF2             l3001: 
063   6AF2                 ; 28 }
064   6AF2 C9              ret
065   6AF3             
001   6AF3                 ; 3 void numberToString16(hl, de)
002   6AF3             numberToString16: 
003   6AF3                 ; 4 {
004   6AF3                 ; 5 *[&uint16_to_str_addr + 1] = hl;
005   6AF3 22 09 6B        ld   ((uint16_to_str_addr) + (1)), hl
006   6AF6                 ; 7 // Терминатор
007   6AF6                 ; 8 a ^= a;
008   6AF6 AF              xor  a
009   6AF7                 ; 9 push(a);
010   6AF7 F5              push af
011   6AF8                 ; 11 // Разделение числа на цифры
012   6AF8                 ; 12 ex(hl, de);
013   6AF8 EB              ex de, hl
014   6AF9                 ; 13 do
015   6AF9             l7000: 
016   6AF9                 ; 14 {
017   6AF9                 ; 15 div16(hl, de = 10);
018   6AF9 11 0A 00        ld   de, 10
019   6AFC CD 16 6B        call div16
020   6AFF                 ; 16 (a = e) += '0';
021   6AFF 7B              ld   a, e
022   6B00 C6 30           add  48
023   6B02                 ; 17 push(a);
024   6B02 F5              push af
025   6B03                 ; 18 } while (flag_nz (a = h) |= l);
026   6B03 7C              ld   a, h
027   6B04 B5              or   l
028   6B05 C2 F9 6A        jp   nz, l7000
029   6B08             l7001: 
030   6B08                 ; 20 // Вывод в строку
031   6B08                 ; 21 uint16_to_str_addr:
032   6B08             uint16_to_str_addr: 
033   6B08                 ; 22 de = 0;
034   6B08 11 00 00        ld   de, 0
035   6B0B                 ; 23 do
036   6B0B             l7002: 
037   6B0B                 ; 24 {
038   6B0B                 ; 25 pop(a);
039   6B0B F1              pop  af
040   6B0C                 ; 26 *de = a; de++;
041   6B0C 12              ld   (de), a
042   6B0D 13              inc  de
043   6B0E                 ; 27 } while(flag_nz a |= a);
044   6B0E B7              or   a
045   6B0F C2 0B 6B        jp   nz, l7002
046   6B12             l7003: 
047   6B12                 ; 28 de--;
048   6B12 1B              dec  de
049   6B13                 ; 29 hl = de;
050   6B13 62              ld   h, d
051   6B14 6B              ld   l, e
052   6B15                 ; 30 }
053   6B15 C9              ret
054   6B16                 ; 32 void div16()
055   6B16             div16: 
056   6B16                 ; 33 {
057   6B16                 ; 34 ex(hl, de);
058   6B16 EB              ex de, hl
059   6B17                 ; 35 if (flag_z (a = h) |= l) return; // Деление на ноль
060   6B17 7C              ld   a, h
061   6B18 B5              or   l
062   6B19 C8              ret  z
063   6B1A                 ; 36 bc = 0;
064   6B1A 01 00 00        ld   bc, 0
065   6B1D                 ; 37 push(bc);
066   6B1D C5              push bc
067   6B1E                 ; 38 do
068   6B1E             l7004: 
069   6B1E                 ; 39 {
070   6B1E                 ; 40 (a = e) -= l;
071   6B1E 7B              ld   a, e
072   6B1F 95              sub  l
073   6B20                 ; 41 (a = d) -@= h;
074   6B20 7A              ld   a, d
075   6B21 9C              sbc  h
076   6B22                 ; 42 if (flag_c) break;
077   6B22 DA 2A 6B        jp   c, l7005
078   6B25                 ; 43 push(hl);
079   6B25 E5              push hl
080   6B26                 ; 44 hl += hl;
081   6B26 29              add  hl, hl
082   6B27                 ; 45 } while(flag_nc);
083   6B27 D2 1E 6B        jp   nc, l7004
084   6B2A             l7005: 
085   6B2A                 ; 46 hl = 0;
086   6B2A 21 00 00        ld   hl, 0
087   6B2D                 ; 47 while()
088   6B2D             l7006: 
089   6B2D                 ; 48 {
090   6B2D                 ; 49 pop(bc);
091   6B2D C1              pop  bc
092   6B2E                 ; 50 (a = b) |= c;
093   6B2E 78              ld   a, b
094   6B2F B1              or   c
095   6B30                 ; 51 if (flag_z) return;
096   6B30 C8              ret  z
097   6B31                 ; 52 hl += hl;
098   6B31 29              add  hl, hl
099   6B32                 ; 53 push(de);
100   6B32 D5              push de
101   6B33                 ; 54 e = ((a = e) -= c);
102   6B33 7B              ld   a, e
103   6B34 91              sub  c
104   6B35 5F              ld   e, a
105   6B36                 ; 55 d = ((a = d) -@= b);
106   6B36 7A              ld   a, d
107   6B37 98              sbc  b
108   6B38 57              ld   d, a
109   6B39                 ; 56 if (flag_c)
110   6B39                 ; 57 {
111   6B39 D2 40 6B        jp   nc, l7008
112   6B3C                 ; 58 pop(de);
113   6B3C D1              pop  de
114   6B3D                 ; 59 continue;
115   6B3D C3 2D 6B        jp l7006
116   6B40                 ; 60 }
117   6B40                 ; 61 hl++;
118   6B40             l7008: 
119   6B40 23              inc  hl
120   6B41                 ; 62 pop(bc);
121   6B41 C1              pop  bc
122   6B42                 ; 63 }
123   6B42 C3 2D 6B        jp   l7006
124   6B45             l7007: 
125   6B45                 ; 64 }
126   6B45 C9              ret
127   6B46             
001   6B46                 savebin "base/base.bin", begin, $ - begin
002   6B46             
