0001   0000                 DEVICE ZXSPECTRUM128
0002   0000             
0003   0000                 include "../module.inc"
0001+  0000             ;romAddr        = 0
0002+  0000             ;screenAddr     = 4000h
0003+  0000             ;cacheAddr      = 5B00h
0004+  0000             
0005+  0000             irqTableAddr      = 5F00h
0006+  0000             irqAddr           = 6060h
0007+  0000             stackBeginAddr    = 6001h
0008+  0000             stackEndAddr      = 605Fh
0009+  0000             baseAddr          = 6063h
0010+  0000             moduleLoadAddr    = 7000h
0011+  0000             moverAddr         = 8000h
0012+  0000             
0013+  0000             gEnd = baseAddr
0014+  0000             
0015+  0000             ; Функции
0016+  0000             gDrawText         = gEnd
0017+  0000             gEnd = gEnd + 3
0018+  0000             gDrawTextCenter   = gEnd
0019+  0000             gEnd = gEnd + 3
0020+  0000             gDrawTextEx       = gEnd
0021+  0000             gEnd = gEnd + 3
0022+  0000             gClearScreen      = gEnd
0023+  0000             gEnd = gEnd + 3
0024+  0000             gDrawImage        = gEnd
0025+  0000             gEnd = gEnd + 3
0026+  0000             gMeasureText      = gEnd
0027+  0000             gEnd = gEnd + 3
0028+  0000             gCalcCoords       = gEnd
0029+  0000             gEnd = gEnd + 3
0030+  0000             gDrawCharSub      = gEnd
0031+  0000             gEnd = gEnd + 3
0032+  0000             gExec             = gEnd
0033+  0000             gEnd = gEnd + 3
0034+  0000             gLoadFile         = gEnd
0035+  0000             gEnd = gEnd + 3
0036+  0000             gFarCall          = gEnd
0037+  0000             gEnd = gEnd + 3
0038+  0000             gIrqHandler       = gEnd
0039+  0000             gEnd = gEnd + 3
0040+  0000             gDrawPanel        = gEnd
0041+  0000             gEnd = gEnd + 3
0042+  0000             gBeginDraw        = gEnd
0043+  0000             gEnd = gEnd + 3
0044+  0000             gEndDraw          = gEnd
0045+  0000             gEnd = gEnd + 3
0046+  0000             gCopyVideoPage    = gEnd
0047+  0000             gEnd = gEnd + 3
0048+  0000             gPanelRedraw      = gEnd
0049+  0000             gEnd = gEnd + 3
0050+  0000             gStringBuffer     = gEnd
0051+  0000             gStringBufferSize = 32
0052+  0000             gEnd = gEnd + gStringBufferSize
0053+  0000             
0054+  0000             ; Переменные
0055+  0000             gFrame            = gEnd
0056+  0000             gEnd = gEnd + 1
0057+  0000             gVideoPage        = gEnd
0058+  0000             gEnd = gEnd + 1
0059+  0000             gSystemPage       = gEnd
0060+  0000             gEnd = gEnd + 1
0061+  0000             gKeyTrigger       = gEnd
0062+  0000             gEnd = gEnd + 1
0063+  0000             gKeyPressed       = gEnd
0064+  0000             gEnd = gEnd + 1
0065+  0000             gPlayerMoney      = gEnd
0066+  0000             gEnd = gEnd + 2
0067+  0000             gPlayerLut        = gEnd
0068+  0000             playerLutMax = 12
0069+  0000             gEnd = gEnd + 2 * playerLutMax
0070+  0000             gPlayerLutCount   = gEnd
0071+  0000             gEnd = gEnd + 1
0072+  0000             gPlayerItems      = gEnd
0073+  0000             playerItemsMax = 5
0074+  0000             gEnd = gEnd + playerItemsMax
0075+  0000             gPlayerItemsCount = gEnd
0076+  0000             gEnd = gEnd + 1
0077+  0000             gPanelChangedA    = gEnd
0078+  0000             gEnd = gEnd + 1
0079+  0000             gPanelChangedB    = gEnd
0080+  0000             gEnd = gEnd + 1
0081+  0000             
0082+  0000             ; Другие модули
0083+  0000             gPanelgraphPage = 6
0084+  0000             gPanelgraph = 0C003h
0085+  0000             gPanelX = 0
0086+  0000             gPanelY = 20
0087+  0000             
0004   0000             
0005   0000                 org 0C000h
0006   C000             
0007   C000             begin: 
0008   C000 C3 6B D2        jp   invent
0009   C003 C3 EF D4        jp   panelFullRedraw
0010   C006 C3 66 C3        jp   shopMain
0011   C009             
0012   C009             ;-----------------------------------------------------------------------------------------------------------------------
0013   C009             
0014   C009             callIx: 
0015   C009 DD E9           jp   ix
0016   C00B             
0017   C00B             ;-----------------------------------------------------------------------------------------------------------------------
0018   C00B             
0001   C00B             ; HL делится на DE, результат в HL, остаток в DE
0002   C00B             
0003   C00B EB          div16:   EX HL, DE
0004   C00C 7C          _DIV: 	LD A,H
0005   C00D B5                  OR L
0006   C00E C8                  RET Z
0007   C00F 01 00 00            LD BC,0000
0008   C012 C5                  PUSH BC
0009   C013 7B          _DIV1: 	LD A,E
0010   C014 95          	SUB L
0011   C015 7A                  LD A,D
0012   C016 9C                  SBC H
0013   C017 DA 1F C0            JP C, _DIV2
0014   C01A E5                  PUSH HL
0015   C01B 29                  ADD HL, HL
0016   C01C D2 13 C0            JP NC, _DIV1
0017   C01F 21 00 00    _DIV2: 	LD HL,0000
0018   C022 C1          _DIV3: 	POP BC
0019   C023 78                  LD A,B
0020   C024 B1                  OR C
0021   C025 C8                  RET Z
0022   C026 29                  ADD HL, HL
0023   C027 D5                  PUSH DE
0024   C028 7B                  LD A,E
0025   C029 91          	SUB C
0026   C02A 5F                  LD E,A
0027   C02B 7A                  LD A,D
0028   C02C 98                  SBC B
0029   C02D 57                  LD D,A
0030   C02E DA 36 C0            JP C, _DIV4
0031   C031 23                  INC HL
0032   C032 C1                  POP BC
0033   C033 C3 22 C0            JP _DIV3
0034   C036 D1          _DIV4: 	POP DE
0035   C037 C3 22 C0            JP _DIV3
0036   C03A             
0001   C03A                 ; 2 const int KEY_DOWN = 2;
0002   C03A                 ; 3 const int KEY_LEFT = 4;
0003   C03A                 ; 4 const int KEY_RIGHT = 8;
0004   C03A                 ; 5 const int KEY_FIRE = 16;
0005   C03A                 ; 7 // 3 - фиолетовый
0006   C03A                 ; 9 const int colorCursor = 0x43;
0007   C03A                 ; 10 const int colorText   = 0x47;
0008   C03A                 ; 11 const int colorItem   = 0x45;
0009   C03A                 ; 12 const int colorPrice  = 0x44;
0010   C03A                 ; 14 uint16_t shopText;
0011   C03A 00 00       shopText dw 0
0012   C03C                 ; 15 uint16_t shopGetLine;
0013   C03C 00 00       shopGetLine dw 0
0014   C03E                 ; 16 uint8_t shopX;
0015   C03E 00          shopX db 0
0016   C03F                 ; 17 uint8_t shopY;
0017   C03F 00          shopY db 0
0018   C040                 ; 18 uint8_t shopW;
0019   C040 00          shopW db 0
0020   C041                 ; 19 uint8_t shopH;
0021   C041 00          shopH db 0
0022   C042                 ; 20 const int shopLineHeight = 10;
0023   C042                 ; 21 uint16_t dialogCursor;
0024   C042 00 00       dialogCursor dw 0
0025   C044                 ; 22 uint8_t dialogX;
0026   C044 00          dialogX db 0
0027   C045                 ; 23 uint8_t dialogX1;
0028   C045 00          dialogX1 db 0
0029   C046                 ; 25 //---------------------------------------------------------------------------------------------------------------------
0030   C046                 ; 26 // Вход: ix - функция динамического текста, iyh - режим, de - указатель на текст
0031   C046                 ; 27 // Вход: de - указатель на следующий текст, iyh - новый режим
0032   C046                 ; 28 // Сохраняет: hl, ix, iyl
0033   C046                 ; 30 void shopNextLine()
0034   C046             shopNextLine: 
0035   C046                 ; 31 {
0036   C046                 ; 32 // Вывод статического текста
0037   C046                 ; 33 if (flag_z (a = iyh) & 0x80)
0038   C046 FD 7C           ld   a, iyh
0039   C048 CB 7F           bit  7, a
0040   C04A                 ; 34 {
0041   C04A C2 59 C0        jp   nz, l0
0042   C04D                 ; 35 do { a = *de; de++; } while(a >= 32);
0043   C04D             l1: 
0044   C04D 1A              ld   a, (de)
0045   C04E 13              inc  de
0046   C04F FE 20           cp   32
0047   C051 D2 4D C0        jp   nc, l1
0048   C054             l2: 
0049   C054                 ; 36 if (flag_nz a |= a) return; // nz
0050   C054 B7              or   a
0051   C055 C0              ret  nz
0052   C056                 ; 37 // Переход к динамическому тексту
0053   C056                 ; 38 iyh = 0x80;
0054   C056 FD 26 80        ld   iyh, 128
0055   C059                 ; 39 }
0056   C059                 ; 40 // Вывод динамического текста
0057   C059                 ; 41 if (flag_z a |= ixl) return; // z
0058   C059             l0: 
0059   C059 DD B5           or   ixl
0060   C05B C8              ret  z
0061   C05C                 ; 42 (a = iyh) &= 0x7F; iyh++;
0062   C05C FD 7C           ld   a, iyh
0063   C05E E6 7F           and  127
0064   C060 FD 24           inc  iyh
0065   C062                 ; 43 push(hl)
0066   C062                 ; 44 {
0067   C062 E5              push hl
0068   C063                 ; 45 callIx(); // Вход: a - номер. Выход: hl - текст. Портит: a, bc, de
0069   C063 CD 09 C0        call callIx
0070   C066                 ; 46 ex(hl, de);
0071   C066 EB              ex de, hl
0072   C067                 ; 47 }
0073   C067 E1              pop  hl
0074   C068                 ; 48 (a = d) |= e; // return z/nz
0075   C068 7A              ld   a, d
0076   C069 B3              or   e
0077   C06A                 ; 49 }
0078   C06A C9              ret
0079   C06B                 ; 51 //---------------------------------------------------------------------------------------------------------------------
0080   C06B                 ; 52 // Алгоритм диалога
0081   C06B                 ; 54 const int tailSize = 8;
0082   C06B                 ; 55 const int shopTopPadding = 4;
0083   C06B                 ; 56 const int shopAnswerSeparatorHeight = 4;
0084   C06B                 ; 58 void shopStart(de, ix)
0085   C06B             shopStart: 
0086   C06B                 ; 59 {
0087   C06B                 ; 60 shopText = de;
0088   C06B ED 53 3A C0     ld   (shopText), de
0089   C06F                 ; 61 shopGetLine = ix;
0090   C06F DD 22 3C C0     ld   (shopGetLine), ix
0091   C073                 ; 63 // ВЫЧИСЛЕНИЕ РАЗМЕРА
0092   C073                 ; 65 ex(bc, de, hl);
0093   C073 D9              exx
0094   C074                 ; 66 hl` = 0; // h` - ширина цен, l` - ширина товаров
0095   C074 21 00 00        ld   hl, 0
0096   C077                 ; 67 ex(bc, de, hl);
0097   C077 D9              exx
0098   C078                 ; 68 hl = shopTopPadding; // h - ширина назчаний, l - высота всех элементов
0099   C078 21 04 00        ld   hl, 4
0100   C07B                 ; 69 iy = 0; // iyl - режим ответов, iyh - режим динамического текста
0101   C07B FD 21 00 00     ld   iy, 0
0102   C07F                 ; 70 // de - указатель на текст
0103   C07F                 ; 71 do
0104   C07F             l3: 
0105   C07F                 ; 72 {
0106   C07F                 ; 73 push(de)
0107   C07F                 ; 74 {
0108   C07F D5              push de
0109   C080                 ; 75 push(hl)
0110   C080                 ; 76 {
0111   C080 E5              push hl
0112   C081                 ; 77 gMeasureText(); // Вход: de - текст. Выход: de - текст, a - терминатор, c - ширина в пикселях. Портит: b, hl.
0113   C081 CD 72 60        call gMeasureText
0114   C084                 ; 78 }
0115   C084 E1              pop  hl
0116   C085                 ; 80 ex(a); // Сохраняем термиатор
0117   C085 08              ex   af, af
0118   C086                 ; 81 a = c;
0119   C086 79              ld   a, c
0120   C087                 ; 82 if (a != 0)
0121   C087 B7              or   a
0122   C088                 ; 83 {
0123   C088 CA B6 C0        jp   z, l5
0124   C08B                 ; 84 a += iyl; // Добавляем отступ ответов
0125   C08B FD 85           add  iyl
0126   C08D                 ; 85 ex(a);
0127   C08D 08              ex   af, af
0128   C08E                 ; 86 if (a == 9) // Если есть цена
0129   C08E FE 09           cp   9
0130   C090                 ; 87 {
0131   C090 C2 AC C0        jp   nz, l6
0132   C093                 ; 88 ex(bc, de, hl);
0133   C093 D9              exx
0134   C094                 ; 89 ex(a);
0135   C094 08              ex   af, af
0136   C095                 ; 90 if (a >= l`) l` = a;  // Вычисляем максимальную ширину
0137   C095 BD              cp   l
0138   C096 DA 9A C0        jp   c, l7
0139   C099 6F              ld   l, a
0140   C09A                 ; 91 ex(bc, de, hl);
0141   C09A             l7: 
0142   C09A D9              exx
0143   C09B                 ; 93 push(hl)
0144   C09B                 ; 94 {
0145   C09B E5              push hl
0146   C09C                 ; 95 gMeasureText();
0147   C09C CD 72 60        call gMeasureText
0148   C09F                 ; 96 }
0149   C09F E1              pop  hl
0150   C0A0                 ; 97 // Учет ширины и высоты
0151   C0A0                 ; 99 ex(a); // Сохраняем термиатор
0152   C0A0 08              ex   af, af
0153   C0A1                 ; 100 a = c;
0154   C0A1 79              ld   a, c
0155   C0A2                 ; 101 ex(bc, de, hl);
0156   C0A2 D9              exx
0157   C0A3                 ; 102 if (a >= h`) h` = a;  // Вычисляем максимальную ширину
0158   C0A3 BC              cp   h
0159   C0A4 DA A8 C0        jp   c, l8
0160   C0A7 67              ld   h, a
0161   C0A8                 ; 103 ex(bc, de, hl);
0162   C0A8             l8: 
0163   C0A8 D9              exx
0164   C0A9                 ; 104 }
0165   C0A9                 ; 105 else
0166   C0A9 C3 B2 C0        jp   l9
0167   C0AC             l6: 
0168   C0AC                 ; 106 {
0169   C0AC                 ; 107 ex(a);
0170   C0AC 08              ex   af, af
0171   C0AD                 ; 108 if (a >= h) h = a; // Вычисляем максимальную ширину
0172   C0AD BC              cp   h
0173   C0AE DA B2 C0        jp   c, l10
0174   C0B1 67              ld   h, a
0175   C0B2                 ; 109 }
0176   C0B2             l10: 
0177   C0B2             l9: 
0178   C0B2                 ; 110 l = ((a = l) += shopLineHeight); // Вычисляем высоту
0179   C0B2 7D              ld   a, l
0180   C0B3 C6 0A           add  10
0181   C0B5 6F              ld   l, a
0182   C0B6                 ; 111 }
0183   C0B6                 ; 112 ex(a);
0184   C0B6             l5: 
0185   C0B6 08              ex   af, af
0186   C0B7                 ; 114 // Если строка оканчивается кодом 13, то далее идут ответы
0187   C0B7                 ; 115 if (a == 13)
0188   C0B7 FE 0D           cp   13
0189   C0B9                 ; 116 {
0190   C0B9 C2 C3 C0        jp   nz, l11
0191   C0BC                 ; 117 iyl = tailSize; // Отступ для ответов
0192   C0BC FD 2E 08        ld   iyl, 8
0193   C0BF                 ; 118 l = ((a = l) += [shopAnswerSeparatorHeight]); // Отступ ответов. Это примерно половина высота строки. Это гарантирует отсутсвтие клешинга.
0194   C0BF 7D              ld   a, l
0195   C0C0 C6 04           add  4
0196   C0C2 6F              ld   l, a
0197   C0C3                 ; 119 }
0198   C0C3                 ; 120 }
0199   C0C3             l11: 
0200   C0C3 D1              pop  de
0201   C0C4                 ; 122 // Следующая строка
0202   C0C4                 ; 123 shopNextLine();
0203   C0C4 CD 46 C0        call shopNextLine
0204   C0C7                 ; 124 } while(flag_nz);
0205   C0C7 C2 7F C0        jp   nz, l3
0206   C0CA             l4: 
0207   C0CA                 ; 126 // Преобразование пикселей в знакоместа
0208   C0CA                 ; 127 ex(bc, de, hl);
0209   C0CA D9              exx
0210   C0CB                 ; 128 a = h`;
0211   C0CB 7C              ld   a, h
0212   C0CC                 ; 129 if (flag_nz a |= a) a += tailSize; // Если есть цена, то добавляем разделитель в одно знакоместо между наименованием и ценой.
0213   C0CC B7              or   a
0214   C0CD CA D2 C0        jp   z, l12
0215   C0D0 C6 08           add  8
0216   C0D2                 ; 130 a += l`; // Суммируем ширину наименований и цен
0217   C0D2             l12: 
0218   C0D2 85              add  l
0219   C0D3                 ; 131 ex(bc, de, hl);
0220   C0D3 D9              exx
0221   C0D4                 ; 132 if (a < h) a = h;
0222   C0D4 BC              cp   h
0223   C0D5 D2 D9 C0        jp   nc, l13
0224   C0D8 7C              ld   a, h
0225   C0D9                 ; 134 h = ((a += 7) >>= 3); shopW = a; // Преобразуем в знакоместа
0226   C0D9             l13: 
0227   C0D9 C6 07           add  7
0228   C0DB CB 3F           srl  a
0229   C0DD CB 3F           srl  a
0230   C0DF CB 3F           srl  a
0231   C0E1 67              ld   h, a
0232   C0E2 32 40 C0        ld   (shopW), a
0233   C0E5                 ; 135 l = (((a = l) += 7) >>= 3); shopH = a; // Преобразуем в знакоместа
0234   C0E5 7D              ld   a, l
0235   C0E6 C6 07           add  7
0236   C0E8 CB 3F           srl  a
0237   C0EA CB 3F           srl  a
0238   C0EC CB 3F           srl  a
0239   C0EE 6F              ld   l, a
0240   C0EF 32 41 C0        ld   (shopH), a
0241   C0F2                 ; 136 shopX = (((a = [32 - 2]) -= h) >>= 1); // Вычисляем положение диалога
0242   C0F2 3E 1E           ld   a, 30
0243   C0F4 94              sub  h
0244   C0F5 CB 3F           srl  a
0245   C0F7 32 3E C0        ld   (shopX), a
0246   C0FA                 ; 137 shopY = (((a = [20 - 3]) -= l) >>= 1);
0247   C0FA 3E 11           ld   a, 17
0248   C0FC 95              sub  l
0249   C0FD CB 3F           srl  a
0250   C0FF 32 3F C0        ld   (shopY), a
0251   C102                 ; 139 // РИСОВАНИЕ
0252   C102                 ; 141 // Выбираем 0-ую страницу для рисования
0253   C102                 ; 142 gBeginDraw();
0254   C102 CD 8A 60        call gBeginDraw
0255   C105                 ; 143 gFarCall(iyl = 7, ix = &gPanelRedraw);
0256   C105 FD 2E 07        ld   iyl, 7
0257   C108 DD 21 93 60     ld   ix, gPanelRedraw
0258   C10C CD 81 60        call gFarCall
0259   C10F                 ; 145 // Рисуем рамку
0260   C10F                 ; 146 hl = shopX; // И за одно shopY
0261   C10F 2A 3E C0        ld   hl, (shopX)
0262   C112                 ; 147 calcAddr(); // bc - чб, hl = цвет
0263   C112 CD 60 C2        call calcAddr
0264   C115                 ; 148 iy = shopW; // И за одно shopH
0265   C115 FD 2A 40 C0     ld   iy, (shopW)
0266   C119                 ; 149 drawDialog2(de = &dialogrect_0, bc, hl, iyl);
0267   C119 11 9F CA        ld   de, dialogrect_0
0268   C11C CD 30 C2        call drawDialog2
0269   C11F                 ; 150 do
0270   C11F             l14: 
0271   C11F                 ; 151 {
0272   C11F                 ; 152 drawDialog2(de = &dialogrect_3, bc, hl, iyl);
0273   C11F 11 BA CA        ld   de, dialogrect_3
0274   C122 CD 30 C2        call drawDialog2
0275   C125                 ; 153 } while(flag_nz --iyh);
0276   C125 FD 25           dec  iyh
0277   C127 C2 1F C1        jp   nz, l14
0278   C12A             l15: 
0279   C12A                 ; 154 drawDialog2(de = &dialogrect_6, bc, hl, iyl);
0280   C12A 11 D5 CA        ld   de, dialogrect_6
0281   C12D CD 30 C2        call drawDialog2
0282   C130                 ; 155 drawSprite2(bc, de, hl);
0283   C130 CD 2A CA        call drawSprite2
0284   C133                 ; 157 *[&shopStartColor + 1] = a = colorText;
0285   C133 3E 47           ld   a, 71
0286   C135 32 5A C1        ld   ((shopStartColor) + (1)), a
0287   C138                 ; 158 // Рисуем текст
0288   C138                 ; 159 ix = shopGetLine;  // ix - функция динамического текста
0289   C138 DD 2A 3C C0     ld   ix, (shopGetLine)
0290   C13C                 ; 160 de = shopText;     // de - статический текст
0291   C13C ED 5B 3A C0     ld   de, (shopText)
0292   C140                 ; 161 hl = shopX;        // hl - Координаты для вывода текста в знакоместах
0293   C140 2A 3E C0        ld   hl, (shopX)
0294   C143                 ; 162 (((hl += hl) += hl) += hl) += (bc = [(tailSize + shopTopPadding) * 256 + tailSize]); // Вычисляем координаты в внутри рамки в пикселях
0295   C143 29              add  hl, hl
0296   C144 29              add  hl, hl
0297   C145 29              add  hl, hl
0298   C146 01 08 0C        ld   bc, 3080
0299   C149 09              add  hl, bc
0300   C14A                 ; 163 dialogCursor = hl; // hl - координаты первого ответа (что бы не было глюка, если программист забудет в диалоге описать варианты ответов)
0301   C14A 22 42 C0        ld   (dialogCursor), hl
0302   C14D                 ; 164 iy = 0;            // iyl - кол-во ответов, iyh - режим динамического текста
0303   C14D FD 21 00 00     ld   iy, 0
0304   C151                 ; 165 do
0305   C151             l16: 
0306   C151                 ; 166 {
0307   C151                 ; 167 a = *de;
0308   C151 1A              ld   a, (de)
0309   C152                 ; 168 if (a >= ' ')
0310   C152 FE 20           cp   32
0311   C154                 ; 169 {
0312   C154 DA 88 C1        jp   c, l18
0313   C157                 ; 170 push(de)
0314   C157                 ; 171 {
0315   C157 D5              push de
0316   C158                 ; 172 push(hl)
0317   C158                 ; 173 {
0318   C158 E5              push hl
0319   C159                 ; 174 shopStartColor: a = colorText;
0320   C159             shopStartColor: 
0321   C159 3E 47           ld   a, 71
0322   C15B                 ; 175 gDrawTextEx(hl, de, a); // Выводим наименование
0323   C15B CD 69 60        call gDrawTextEx
0324   C15E                 ; 176 }
0325   C15E E1              pop  hl
0326   C15F                 ; 177 if (a == 9)
0327   C15F FE 09           cp   9
0328   C161                 ; 178 {
0329   C161 C2 83 C1        jp   nz, l19
0330   C164                 ; 179 push(hl)
0331   C164                 ; 180 {
0332   C164 E5              push hl
0333   C165                 ; 181 push(de, hl)
0334   C165                 ; 182 {
0335   C165 D5              push de
0336   C166 E5              push hl
0337   C167                 ; 183 gMeasureText(); // Вычисляем ширину цены, что бы прижать её к правому краю
0338   C167 CD 72 60        call gMeasureText
0339   C16A                 ; 184 }
0340   C16A E1              pop  hl
0341   C16B D1              pop  de
0342   C16C                 ; 185 l = a = shopW;
0343   C16C 3A 40 C0        ld   a, (shopW)
0344   C16F 6F              ld   l, a
0345   C170                 ; 186 (a = shopX) += l;
0346   C170 3A 3E C0        ld   a, (shopX)
0347   C173 85              add  l
0348   C174                 ; 187 a++;
0349   C174 3C              inc  a
0350   C175                 ; 188 a <<= 3;
0351   C175 CB 27           sla  a
0352   C177 CB 27           sla  a
0353   C179 CB 27           sla  a
0354   C17B                 ; 189 l = (a -= c);
0355   C17B 91              sub  c
0356   C17C 6F              ld   l, a
0357   C17D                 ; 190 gDrawTextEx(hl, de, a = colorPrice); // Выводим цену
0358   C17D 3E 44           ld   a, 68
0359   C17F CD 69 60        call gDrawTextEx
0360   C182                 ; 191 }
0361   C182 E1              pop  hl
0362   C183                 ; 192 }
0363   C183                 ; 193 }
0364   C183             l19: 
0365   C183 D1              pop  de
0366   C184                 ; 194 hl += (bc = [shopLineHeight * 256]);
0367   C184 01 00 0A        ld   bc, 2560
0368   C187 09              add  hl, bc
0369   C188                 ; 195 }
0370   C188                 ; 196 if (a == 13)
0371   C188             l18: 
0372   C188 FE 0D           cp   13
0373   C18A                 ; 197 {
0374   C18A C2 A0 C1        jp   nz, l20
0375   C18D                 ; 198 h = ((a = h) += shopAnswerSeparatorHeight); // Если есть цена, то добавляем разделитель в одно знакоместо между наименованием и ценой.
0376   C18D 7C              ld   a, h
0377   C18E C6 04           add  4
0378   C190 67              ld   h, a
0379   C191                 ; 199 dialogCursor = hl; // Координаты первого ответа
0380   C191 22 42 C0        ld   (dialogCursor), hl
0381   C194                 ; 200 l = ((a = l) += tailSize); // Отступ для ответов
0382   C194 7D              ld   a, l
0383   C195 C6 08           add  8
0384   C197 6F              ld   l, a
0385   C198                 ; 201 iyl = -1; // Сброс счетчика кол-ва ответов
0386   C198 FD 2E FF        ld   iyl, -1
0387   C19B                 ; 202 *[&shopStartColor + 1] = a = colorItem;
0388   C19B 3E 45           ld   a, 69
0389   C19D 32 5A C1        ld   ((shopStartColor) + (1)), a
0390   C1A0                 ; 203 }
0391   C1A0                 ; 204 iyl++; // Счетчик кол-ва ответов
0392   C1A0             l20: 
0393   C1A0 FD 2C           inc  iyl
0394   C1A2                 ; 205 shopNextLine();
0395   C1A2 CD 46 C0        call shopNextLine
0396   C1A5                 ; 206 } while(flag_nz);
0397   C1A5 C2 51 C1        jp   nz, l16
0398   C1A8             l17: 
0399   C1A8                 ; 208 // Начальное положение курсора
0400   C1A8                 ; 209 dialogX = (a ^= a);
0401   C1A8 AF              xor  a
0402   C1A9 32 44 C0        ld   (dialogX), a
0403   C1AC                 ; 210 dialogX1 = a;
0404   C1AC 32 45 C0        ld   (dialogX1), a
0405   C1AF                 ; 212 // Рисуем курсор
0406   C1AF                 ; 213 dialogDrawCursor();
0407   C1AF CD 1F C2        call dialogDrawCursor
0408   C1B2                 ; 215 // Выводим на экран
0409   C1B2                 ; 216 gEndDraw();
0410   C1B2 CD 8D 60        call gEndDraw
0411   C1B5                 ; 218 // Клавиатура
0412   C1B5                 ; 219 while()
0413   C1B5             l21: 
0414   C1B5                 ; 220 {
0415   C1B5                 ; 221 // Ждем, если прошло меньше 1/50 сек с прошлого цикла.
0416   C1B5                 ; 222 while ((a = gVideoPage) & 1);
0417   C1B5             l23: 
0418   C1B5 3A B7 60        ld   a, (gVideoPage)
0419   C1B8 CB 47           bit  0, a
0420   C1BA CA C0 C1        jp   z, l24
0421   C1BD C3 B5 C1        jp   l23
0422   C1C0             l24: 
0423   C1C0                 ; 223 gVideoPage = (a |= 1);
0424   C1C0 F6 01           or   1
0425   C1C2 32 B7 60        ld   (gVideoPage), a
0426   C1C5                 ; 225 // Получить нажатую клавишу
0427   C1C5                 ; 226 hl = &gKeyTrigger;
0428   C1C5 21 B9 60        ld   hl, gKeyTrigger
0429   C1C8                 ; 227 b = *hl;
0430   C1C8 46              ld   b, (hl)
0431   C1C9                 ; 228 *hl = 0;
0432   C1C9 36 00           ld   (hl), 0
0433   C1CB                 ; 230 // Нажат выстрел
0434   C1CB                 ; 231 if (b & KEY_FIRE)
0435   C1CB CB 60           bit  4, b
0436   C1CD                 ; 232 {
0437   C1CD CA DE C1        jp   z, l25
0438   C1D0                 ; 233 // Отмечаем, что весь экран нужно перерисовать и выходим
0439   C1D0                 ; 234 gFarCall(iyl = 7, ix = &gCopyVideoPage);
0440   C1D0 FD 2E 07        ld   iyl, 7
0441   C1D3 DD 21 90 60     ld   ix, gCopyVideoPage
0442   C1D7 CD 81 60        call gFarCall
0443   C1DA                 ; 235 a = dialogX;
0444   C1DA 3A 44 C0        ld   a, (dialogX)
0445   C1DD                 ; 236 return;
0446   C1DD C9              ret
0447   C1DE                 ; 237 }
0448   C1DE                 ; 239 // Перемещение курсора
0449   C1DE                 ; 240 a = dialogX;
0450   C1DE             l25: 
0451   C1DE 3A 44 C0        ld   a, (dialogX)
0452   C1E1                 ; 241 if (b & KEY_UP)
0453   C1E1 CB 40           bit  0, b
0454   C1E3                 ; 242 {
0455   C1E3 CA EE C1        jp   z, l26
0456   C1E6                 ; 243 a -= 1;
0457   C1E6 D6 01           sub  1
0458   C1E8                 ; 244 if (flag_c) continue;
0459   C1E8 DA B5 C1        jp   c, l21
0460   C1EB                 ; 245 }
0461   C1EB                 ; 246 else if (b & KEY_DOWN)
0462   C1EB C3 F9 C1        jp   l27
0463   C1EE             l26: 
0464   C1EE CB 48           bit  1, b
0465   C1F0                 ; 247 {
0466   C1F0 CA F9 C1        jp   z, l28
0467   C1F3                 ; 248 a++;
0468   C1F3 3C              inc  a
0469   C1F4                 ; 249 if (a >= iyl) continue;
0470   C1F4 FD BD           cp   iyl
0471   C1F6 D2 B5 C1        jp   nc, l21
0472   C1F9                 ; 250 }
0473   C1F9                 ; 251 dialogX = a;
0474   C1F9             l28: 
0475   C1F9             l27: 
0476   C1F9 32 44 C0        ld   (dialogX), a
0477   C1FC                 ; 253 // Умножение на 10
0478   C1FC                 ; 254 c = (a += a);
0479   C1FC 87              add  a
0480   C1FD 4F              ld   c, a
0481   C1FE                 ; 255 ((a += a) += a) += c;
0482   C1FE 87              add  a
0483   C1FF 87              add  a
0484   C200 81              add  c
0485   C201                 ; 257 // Плавное перемещение курсора
0486   C201                 ; 258 hl = &dialogX1;
0487   C201 21 45 C0        ld   hl, dialogX1
0488   C204                 ; 259 b = *hl;
0489   C204 46              ld   b, (hl)
0490   C205                 ; 260 if (a == b) continue; // Оставит флаг CF при выполнении dialogX1 - menuX
0491   C205 B8              cp   b
0492   C206 CA B5 C1        jp   z, l21
0493   C209                 ; 261 b++; // Не изменяет CF
0494   C209 04              inc  b
0495   C20A                 ; 262 if (flag_c) ----b;
0496   C20A D2 0F C2        jp   nc, l29
0497   C20D 05              dec  b
0498   C20E 05              dec  b
0499   C20F                 ; 264 // Стираем прошлый курсор
0500   C20F                 ; 265 push(bc);
0501   C20F             l29: 
0502   C20F C5              push bc
0503   C210                 ; 266 dialogDrawCursor();
0504   C210 CD 1F C2        call dialogDrawCursor
0505   C213                 ; 267 pop(bc);
0506   C213 C1              pop  bc
0507   C214                 ; 269 // Сохраняем новые координаты курсора
0508   C214                 ; 270 *(hl = &dialogX1) = b;
0509   C214 21 45 C0        ld   hl, dialogX1
0510   C217 70              ld   (hl), b
0511   C218                 ; 272 // Рисуем курсор
0512   C218                 ; 273 dialogDrawCursor();
0513   C218 CD 1F C2        call dialogDrawCursor
0514   C21B                 ; 274 }
0515   C21B C3 B5 C1        jp   l21
0516   C21E             l22: 
0517   C21E                 ; 275 }
0518   C21E C9              ret
0519   C21F                 ; 277 void dialogDrawCursor()
0520   C21F             dialogDrawCursor: 
0521   C21F                 ; 278 {
0522   C21F                 ; 279 hl = dialogCursor;
0523   C21F 2A 42 C0        ld   hl, (dialogCursor)
0524   C222                 ; 280 h = ((a = dialogX1) += h);
0525   C222 3A 45 C0        ld   a, (dialogX1)
0526   C225 84              add  h
0527   C226 67              ld   h, a
0528   C227                 ; 281 gDrawTextEx(hl, de = "@", a = colorCursor);
0529   C227 11 81 C2        ld   de, s0
0530   C22A 3E 43           ld   a, 67
0531   C22C CD 69 60        call gDrawTextEx
0532   C22F                 ; 282 }
0533   C22F C9              ret
0534   C230                 ; 284 void drawDialog2()
0535   C230             drawDialog2: 
0536   C230                 ; 285 {
0537   C230                 ; 286 push(bc, hl)
0538   C230                 ; 287 {
0539   C230 C5              push bc
0540   C231 E5              push hl
0541   C232                 ; 288 drawSprite2();
0542   C232 CD 2A CA        call drawSprite2
0543   C235                 ; 289 a = iyl;
0544   C235 FD 7D           ld   a, iyl
0545   C237                 ; 290 ix = de;
0546   C237 DD 62           ld   ixh, d
0547   C239 DD 6B           ld   ixl, e
0548   C23B                 ; 291 do
0549   C23B             l30: 
0550   C23B                 ; 292 {
0551   C23B                 ; 293 ex(a);
0552   C23B 08              ex   af, af
0553   C23C                 ; 294 d = ixh; e = ixl;
0554   C23C DD 54           ld   d, ixh
0555   C23E DD 5D           ld   e, ixl
0556   C240                 ; 295 drawSprite2();
0557   C240 CD 2A CA        call drawSprite2
0558   C243                 ; 296 ex(a);
0559   C243 08              ex   af, af
0560   C244                 ; 297 } while(flag_nz --a);
0561   C244 3D              dec  a
0562   C245 C2 3B C2        jp   nz, l30
0563   C248             l31: 
0564   C248                 ; 298 drawSprite2();
0565   C248 CD 2A CA        call drawSprite2
0566   C24B                 ; 299 }
0567   C24B E1              pop  hl
0568   C24C C1              pop  bc
0569   C24D                 ; 300 // Следующая строка
0570   C24D                 ; 301 l = ((a = l) += 32); h = ((a +@= h) -= l);
0571   C24D 7D              ld   a, l
0572   C24E C6 20           add  32
0573   C250 6F              ld   l, a
0574   C251 8C              adc  h
0575   C252 95              sub  l
0576   C253 67              ld   h, a
0577   C254                 ; 302 c = ((a = c) += 32); if (flag_c) b = ((a = b) += 8);
0578   C254 79              ld   a, c
0579   C255 C6 20           add  32
0580   C257 4F              ld   c, a
0581   C258 D2 5F C2        jp   nc, l32
0582   C25B 78              ld   a, b
0583   C25C C6 08           add  8
0584   C25E 47              ld   b, a
0585   C25F                 ; 303 }
0586   C25F             l32: 
0587   C25F C9              ret
0588   C260                 ; 305 // Вход:
0589   C260                 ; 306 //   l - x
0590   C260                 ; 307 //   h - y
0591   C260                 ; 308 //   hl - цветной адрес
0592   C260                 ; 309 //   bc - чб адрес
0593   C260                 ; 311 void calcAddr()
0594   C260             calcAddr: 
0595   C260                 ; 312 {
0596   C260                 ; 313 //        43210     43210
0597   C260                 ; 314 // bc  .1.43...  210.....
0598   C260                 ; 315 // hl  .1.11.43  210.....
0599   C260                 ; 316 b = (((a = h) &= 0x18) |= 0x40);
0600   C260 7C              ld   a, h
0601   C261 E6 18           and  24
0602   C263 F6 40           or   64
0603   C265 47              ld   b, a
0604   C266                 ; 317 h = ((a = h) >>r= 3);
0605   C266 7C              ld   a, h
0606   C267 0F              rrca
0607   C268 0F              rrca
0608   C269 0F              rrca
0609   C26A 67              ld   h, a
0610   C26B                 ; 318 c = l = ((a &= 0xE0) |= l);
0611   C26B E6 E0           and  224
0612   C26D B5              or   l
0613   C26E 6F              ld   l, a
0614   C26F 4D              ld   c, l
0615   C270                 ; 319 h = (((a = h) &= 0x03) |= 0x58);
0616   C270 7C              ld   a, h
0617   C271 E6 03           and  3
0618   C273 F6 58           or   88
0619   C275 67              ld   h, a
0620   C276                 ; 321 if (flag_z (a = gVideoPage) & 0x80) return;
0621   C276 3A B7 60        ld   a, (gVideoPage)
0622   C279 CB 7F           bit  7, a
0623   C27B C8              ret  z
0624   C27C                 ; 322 h |= 0x80;
0625   C27C CB FC           set  7, h
0626   C27E                 ; 323 b |= 0x80;
0627   C27E CB F8           set  7, b
0628   C280                 ; 324 }
0629   C280 C9              ret
0630   C281                 ; strings
0631   C281 40 00       s0 db "@",0
0632   C283             
0001   C283                 ; 3 const int gStringBufferSize = 32;
0002   C283                 ; 5 const int gPanelChangedMoney = 0x01;
0003   C283                 ; 6 const int gPanelChangedPlace = 0x02;
0004   C283                 ; 8 const int numberToString16max = 5;
0005   C283                 ; 9 const int playerItemsMax = 5;
0006   C283                 ; 10 const int playerLutMaxCountInLine = 99;
0007   C283                 ; 11 const int playerLutMax = 12;
0008   C283                 ; 13 uint8_t shopSel = 0;
0009   C283 00          shopSel db 0
0010   C284                 ; 15 //+ Добавить магазин амулетов
0011   C284                 ; 17 void playerAddItem(a)
0012   C284             playerAddItem: 
0013   C284                 ; 18 {
0014   C284                 ; 19 return addElement(de = &gPlayerItems, hl = &gPlayerItemsCount, c = playerItemsMax);
0015   C284 11 D6 60        ld   de, gPlayerItems
0016   C287 21 DB 60        ld   hl, gPlayerItemsCount
0017   C28A 0E 05           ld   c, 5
0018   C28C C3 09 CA        jp   addElement
0019   C28F                 ; 20 }
0020   C28F C9              ret
0021   C290                 ; 23 void playerRemoveItem(a)
0022   C290             playerRemoveItem: 
0023   C290                 ; 24 {
0024   C290                 ; 25 return removeElement(de = &gPlayerItems, hl = &gPlayerItemsCount, a);
0025   C290 11 D6 60        ld   de, gPlayerItems
0026   C293 21 DB 60        ld   hl, gPlayerItemsCount
0027   C296 C3 17 CA        jp   removeElement
0028   C299                 ; 26 }
0029   C299 C9              ret
0030   C29A                 ; 28 // Вход: d - тип предмета
0031   C29A                 ; 30 void playerAddLut(d)
0032   C29A             playerAddLut: 
0033   C29A                 ; 31 {
0034   C29A                 ; 32 // Поиск этого предмета в кармане
0035   C29A                 ; 34 hl = &gPlayerLut;
0036   C29A 21 BD 60        ld   hl, gPlayerLut
0037   C29D                 ; 35 a = gPlayerLutCount;
0038   C29D 3A D5 60        ld   a, (gPlayerLutCount)
0039   C2A0                 ; 36 if (a != 0) // Если карман пуст, то не ищем
0040   C2A0 B7              or   a
0041   C2A1                 ; 37 {
0042   C2A1 CA C1 C2        jp   z, l4000
0043   C2A4                 ; 38 b = a; // Для while который замеится на djnz
0044   C2A4 47              ld   b, a
0045   C2A5                 ; 39 a = d; // Для ускорения поиска помещаем тип предмета в A
0046   C2A5 7A              ld   a, d
0047   C2A6                 ; 40 do {
0048   C2A6             l4001: 
0049   C2A6                 ; 41 if (a == *hl) // Найден предмет этого типа
0050   C2A6 BE              cp   (hl)
0051   C2A7                 ; 42 {
0052   C2A7 C2 B8 C2        jp   nz, l4003
0053   C2AA                 ; 43 hl += (de = playerLutMax);
0054   C2AA 11 0C 00        ld   de, 12
0055   C2AD 19              add  hl, de
0056   C2AE                 ; 44 a = *hl; // Учеличиваем кол-во
0057   C2AE 7E              ld   a, (hl)
0058   C2AF                 ; 45 a++;
0059   C2AF 3C              inc  a
0060   C2B0                 ; 46 if (a >= playerLutMaxCountInLine) a |= 0x80; // Исключаем из поиска
0061   C2B0 FE 63           cp   99
0062   C2B2 DA B7 C2        jp   c, l4004
0063   C2B5 F6 80           or   128
0064   C2B7                 ; 47 return; // nz
0065   C2B7             l4004: 
0066   C2B7 C9              ret
0067   C2B8                 ; 48 }
0068   C2B8                 ; 49 hl++;
0069   C2B8             l4003: 
0070   C2B8 23              inc  hl
0071   C2B9                 ; 50 } while(--b);
0072   C2B9 10 EB           djnz l4001
0073   C2BB             l4002: 
0074   C2BB                 ; 52 // Если максимум ЛУТ-а, то выходим
0075   C2BB                 ; 53 a = gPlayerLutCount;
0076   C2BB 3A D5 60        ld   a, (gPlayerLutCount)
0077   C2BE                 ; 54 if (a == playerLutMax) return ; // Z - Нет места в кармане
0078   C2BE FE 0C           cp   12
0079   C2C0 C8              ret  z
0080   C2C1                 ; 55 }
0081   C2C1                 ; 57 gPlayerLutCount = ++a; // Тут получится флаг NZ
0082   C2C1             l4000: 
0083   C2C1 3C              inc  a
0084   C2C2 32 D5 60        ld   (gPlayerLutCount), a
0085   C2C5                 ; 59 // Создаем новую запись
0086   C2C5                 ; 60 *hl = d;
0087   C2C5 72              ld   (hl), d
0088   C2C6                 ; 61 hl += (de = playerLutMax);
0089   C2C6 11 0C 00        ld   de, 12
0090   C2C9 19              add  hl, de
0091   C2CA                 ; 62 *hl = 1;
0092   C2CA 36 01           ld   (hl), 1
0093   C2CC                 ; 64 // return nz
0094   C2CC                 ; 65 }
0095   C2CC C9              ret
0096   C2CD                 ; 67 // Вход: a - порядковый номер ЛУТ-а
0097   C2CD                 ; 69 void playerRemoveLut(a)
0098   C2CD             playerRemoveLut: 
0099   C2CD                 ; 70 {
0100   C2CD                 ; 71 push(a)
0101   C2CD                 ; 72 {
0102   C2CD F5              push af
0103   C2CE                 ; 73 removeElement(de = &gPlayerLut, hl = &gPlayerLutCount, a);
0104   C2CE 11 BD 60        ld   de, gPlayerLut
0105   C2D1 21 D5 60        ld   hl, gPlayerLutCount
0106   C2D4 CD 17 CA        call removeElement
0107   C2D7                 ; 74 }
0108   C2D7 F1              pop  af
0109   C2D8                 ; 75 return removeElement2(de = [&gPlayerLut + playerLutMax], hl = &gPlayerLutCount, a);
0110   C2D8 11 C9 60        ld   de, (gPlayerLut) + (12)
0111   C2DB 21 D5 60        ld   hl, gPlayerLutCount
0112   C2DE C3 18 CA        jp   removeElement2
0113   C2E1                 ; 76 }
0114   C2E1 C9              ret
0115   C2E2                 ; 78 void setPlayerMoney(hl)
0116   C2E2             setPlayerMoney: 
0117   C2E2                 ; 79 {
0118   C2E2                 ; 80 gPlayerMoney = hl;
0119   C2E2 22 BB 60        ld   (gPlayerMoney), hl
0120   C2E5                 ; 81 hl = &gPanelChangedA;
0121   C2E5 21 DC 60        ld   hl, gPanelChangedA
0122   C2E8                 ; 82 *hl |= gPanelChangedMoney;
0123   C2E8 CB C6           set  0, (hl)
0124   C2EA                 ; 83 hl++;
0125   C2EA 23              inc  hl
0126   C2EB                 ; 84 *hl |= gPanelChangedMoney;    
0127   C2EB CB C6           set  0, (hl)
0128   C2ED                 ; 85 //panelRedraw:
0129   C2ED                 ; 86 //    return gFarCall(iyl = 7, ix = &gPanelRedraw);
0130   C2ED                 ; 87 }
0131   C2ED C9              ret
0132   C2EE                 ; 89 //----------------------------------------------------------------------------------------------------------------------
0133   C2EE                 ; 90 // Названия всех заклинаний
0134   C2EE                 ; 92 const int itemsCount = 8;
0135   C2EE                 ; 94 uint16_t itemNames[itemsCount] = {
0136   C2EE                 ; 95 "Отвар листьев",
0137   C2EE                 ; 96 "Полное исцеление",
0138   C2EE                 ; 97 "Заклинание 1",
0139   C2EE                 ; 98 "Магические силы",
0140   C2EE                 ; 99 "Каменная кожа",
0141   C2EE                 ; 100 "Огонь бездны",
0142   C2EE                 ; 101 "Порча",
0143   C2EE                 ; 102 "Телепортация"
0144   C2EE                 ; 103 };
0145   C2EE             itemNames: 
0146   C2EE E4 C7           dw s4000
0147   C2F0 F8 C7           dw s4001
0148   C2F2 49 C7           dw s4002
0149   C2F4 A9 C7           dw s4003
0150   C2F6 6B C7           dw s4004
0151   C2F8 D4 C7           dw s4005
0152   C2FA 09 C8           dw s4006
0153   C2FC 22 C8           dw s4007
0154   C2FE                 ; 105 uint16_t lutNames[] = {
0155   C2FE                 ; 106 "Кожа змеи",
0156   C2FE                 ; 107 "Нож хобгоблина",
0157   C2FE                 ; 108 "Ядовитый клык",
0158   C2FE                 ; 109 "Кровь дракона",
0159   C2FE                 ; 110 "Кислота",
0160   C2FE                 ; 111 "Перья",
0161   C2FE                 ; 112 "Слизь",
0162   C2FE                 ; 113 "Копыта",
0163   C2FE                 ; 114 "Кольчуга",
0164   C2FE                 ; 115 "Изумруд",
0165   C2FE                 ; 116 "Золотое руно",
0166   C2FE                 ; 117 "Майоран"
0167   C2FE                 ; 118 };
0168   C2FE             lutNames: 
0169   C2FE 81 C7           dw s4008
0170   C300 C5 C7           dw s4009
0171   C302 96 C9           dw s4010
0172   C304 9B C7           dw s4011
0173   C306 79 C7           dw s4012
0174   C308 F2 C7           dw s4013
0175   C30A 1C C8           dw s4014
0176   C30C 94 C7           dw s4015
0177   C30E 8B C7           dw s4016
0178   C310 63 C7           dw s4017
0179   C312 56 C7           dw s4018
0180   C314 B9 C7           dw s4019
0181   C316                 ; 120 uint16_t lutPrices[] = {
0182   C316                 ; 121 1,
0183   C316                 ; 122 2,
0184   C316                 ; 123 3
0185   C316                 ; 124 };
0186   C316             lutPrices: 
0187   C316 01 00           dw 1
0188   C318 02 00           dw 2
0189   C31A 03 00           dw 3
0190   C31C                 ; 126 uint16_t itemInfo[itemsCount] = {    
0191   C31C                 ; 127 "*", //"Восстанавливает 10 единиц здоровья\r",
0192   C31C                 ; 129 "*", //"Полностью восстанавливает здоровье\r",
0193   C31C                 ; 131 "*", //"Полностью восстанавливает\n"
0194   C31C                 ; 132 //"заклинание 1\r",
0195   C31C                 ; 134 "*", //"Полностью восстанавливает\n"
0196   C31C                 ; 135 //"все заклинания\r",
0197   C31C                 ; 137 "Это заклинание делает вашу\n"
0198   C31C                 ; 138 "плоть твердой как камень.\n"
0199   C31C                 ; 139 "Пока заклинание активно,\n"
0200   C31C                 ; 140 "урон уменьшается вдвое.",
0201   C31C                 ; 142 "*", //"Полностью восстанавливает амулет\r",
0202   C31C                 ; 144 "*", //"Пока заклинание активно,\n"
0203   C31C                 ; 145 //"каждая ваша атака наноит в\n"
0204   C31C                 ; 146 //"два раза больше урона врагу.\r",
0205   C31C                 ; 148 "*" //"Это заклинание возращает\n"
0206   C31C                 ; 149 //"Вас в последний посещенный\n"
0207   C31C                 ; 150 //"вами город.\r"
0208   C31C                 ; 151 };
0209   C31C             itemInfo: 
0210   C31C 1C C6           dw s4020
0211   C31E 1C C6           dw s4020
0212   C320 1C C6           dw s4020
0213   C322 1C C6           dw s4020
0214   C324 30 C9           dw s4021
0215   C326 1C C6           dw s4020
0216   C328 1C C6           dw s4020
0217   C32A 1C C6           dw s4020
0218   C32C                 ; 153 uint16_t itemPrices[itemsCount] = {
0219   C32C                 ; 154 10,
0220   C32C                 ; 155 20,
0221   C32C                 ; 156 30,
0222   C32C                 ; 157 40,
0223   C32C                 ; 158 50,
0224   C32C                 ; 159 60,
0225   C32C                 ; 160 70,
0226   C32C                 ; 161 80
0227   C32C                 ; 162 };
0228   C32C             itemPrices: 
0229   C32C 0A 00           dw 10
0230   C32E 14 00           dw 20
0231   C330 1E 00           dw 30
0232   C332 28 00           dw 40
0233   C334 32 00           dw 50
0234   C336 3C 00           dw 60
0235   C338 46 00           dw 70
0236   C33A 50 00           dw 80
0237   C33C                 ; 164 //----------------------------------------------------------------------------------------------------------------------
0238   C33C                 ; 165 // Сформировать строку во временном буфере с наименованием и ценой.
0239   C33C                 ; 166 // de - имя
0240   C33C                 ; 167 // hl - цена
0241   C33C                 ; 168 // bc - разделитель
0242   C33C                 ; 170 void shopMakeNamePrice(bc, de, hl)
0243   C33C             shopMakeNamePrice: 
0244   C33C                 ; 171 {
0245   C33C                 ; 172 push(hl);
0246   C33C E5              push hl
0247   C33D                 ; 173 push(bc);
0248   C33D C5              push bc
0249   C33E                 ; 174 hl = &gStringBuffer;
0250   C33E 21 96 60        ld   hl, gStringBuffer
0251   C341                 ; 175 strcpyn(hl, b = [gStringBufferSize - 7 - numberToString16max - 1], de); // Запас для " за  ?\r" или "\t"
0252   C341 06 13           ld   b, 19
0253   C343 CD B8 C9        call strcpyn
0254   C346                 ; 176 pop(de);
0255   C346 D1              pop  de
0256   C347                 ; 177 strcpyn(hl, b = 4, de);
0257   C347 06 04           ld   b, 4
0258   C349 CD B8 C9        call strcpyn
0259   C34C                 ; 178 pop(de);
0260   C34C D1              pop  de
0261   C34D                 ; 179 numberToString16(hl, de);
0262   C34D CD C5 C9        call numberToString16
0263   C350                 ; 180 hl = &gStringBuffer;
0264   C350 21 96 60        ld   hl, gStringBuffer
0265   C353                 ; 181 }
0266   C353 C9              ret
0267   C354                 ; 183 //----------------------------------------------------------------------------------------------------------------------
0268   C354                 ; 184 // Сформировать строку во временном буфере с наименованием и ценой.
0269   C354                 ; 185 // de - имя
0270   C354                 ; 186 // hl - цена
0271   C354                 ; 188 void shopMakeNamePrice2()
0272   C354             shopMakeNamePrice2: 
0273   C354                 ; 189 {
0274   C354                 ; 190 shopMakeNamePrice(bc = " за ");
0275   C354 01 17 C6        ld   bc, s4022
0276   C357 CD 3C C3        call shopMakeNamePrice
0277   C35A                 ; 191 // hl - указатель на начало строки, de - указатель на терминатор строки
0278   C35A                 ; 192 // Добавляем строку
0279   C35A                 ; 193 push (hl)
0280   C35A                 ; 194 {
0281   C35A E5              push hl
0282   C35B                 ; 195 ex(hl, de);
0283   C35B EB              ex de, hl
0284   C35C                 ; 196 strcpyn(hl, b = 3, de = " ?\r");
0285   C35C 06 03           ld   b, 3
0286   C35E 11 0F C6        ld   de, s4023
0287   C361 CD B8 C9        call strcpyn
0288   C364                 ; 197 }
0289   C364 E1              pop  hl
0290   C365                 ; 198 }
0291   C365 C9              ret
0292   C366                 ; 200 //----------------------------------------------------------------------------------------------------------------------
0293   C366                 ; 201 // Главная страница магазина
0294   C366                 ; 203 void shopMain()
0295   C366             shopMain: 
0296   C366                 ; 204 {
0297   C366                 ; 205 shopStart(de =
0298   C366                 ; 206 "Добрый день, чем я\n"
0299   C366                 ; 207 "могу вам помочь?"
0300   C366                 ; 208 "\r"
0301   C366                 ; 209 "Мне пора идти\n"
0302   C366                 ; 210 "Я хочу купить\n"
0303   C366                 ; 211 "Я хочу продать\n"
0304   C366                 ; 212 "Я хочу продать ЛУТ",
0305   C366 11 E7 C6        ld   de, s4024
0306   C369                 ; 213 ix = 0
0307   C369 DD 21 00 00     ld   ix, 0
0308   C36D                 ; 214 );
0309   C36D CD 6B C0        call shopStart
0310   C370                 ; 215 if (flag_z a |= a) return; // Выход из магазина
0311   C370 B7              or   a
0312   C371 C8              ret  z
0313   C372                 ; 216 if (flag_z a--) return shopBuy();
0314   C372 3D              dec  a
0315   C373 CA 7E C3        jp   z, shopBuy
0316   C376                 ; 217 if (flag_z a--) return shopTrade();
0317   C376 3D              dec  a
0318   C377 CA 3D C4        jp   z, shopTrade
0319   C37A                 ; 218 return shopTradeLut();
0320   C37A C3 21 C5        jp   shopTradeLut
0321   C37D                 ; 219 }
0322   C37D C9              ret
0323   C37E                 ; 221 //----------------------------------------------------------------------------------------------------------------------
0324   C37E                 ; 222 // Страница с товарами для покупки
0325   C37E                 ; 224 void shopBuy()
0326   C37E             shopBuy: 
0327   C37E                 ; 225 {
0328   C37E                 ; 226 shopStart(de =
0329   C37E                 ; 227 "Что вы хотите купить?"
0330   C37E                 ; 228 "\r"
0331   C37E                 ; 229 "Ничего",
0332   C37E 11 E6 C8        ld   de, s4025
0333   C381                 ; 230 ix = &shopBuyGetText
0334   C381 DD 21 AB C3     ld   ix, shopBuyGetText
0335   C385                 ; 231 );
0336   C385 CD 6B C0        call shopStart
0337   C388                 ; 232 if (flag_z a |= a) return shopMain();
0338   C388 B7              or   a
0339   C389 CA 66 C3        jp   z, shopMain
0340   C38C                 ; 233 shopSel = (--a);
0341   C38C 3D              dec  a
0342   C38D 32 83 C2        ld   (shopSel), a
0343   C390                 ; 234 return shopBuyItem();
0344   C390 C3 B8 C3        jp   shopBuyItem
0345   C393                 ; 235 }
0346   C393 C9              ret
0347   C394                 ; 237 // Вход: a - порядковый номер
0348   C394                 ; 238 // Выход: de - наименование, hl - цена продажи. Если нет предмета, то de = 0
0349   C394                 ; 240 void shopBuyGetNamePrice(a)
0350   C394             shopBuyGetNamePrice: 
0351   C394                 ; 241 {
0352   C394                 ; 242 hl = 0;
0353   C394 21 00 00        ld   hl, 0
0354   C397                 ; 243 de = 0;
0355   C397 11 00 00        ld   de, 0
0356   C39A                 ; 244 if (a >= itemsCount) return;
0357   C39A FE 08           cp   8
0358   C39C D0              ret  nc
0359   C39D                 ; 245 getItemOfArray16(hl = &itemNames, a);
0360   C39D 21 EE C2        ld   hl, itemNames
0361   C3A0 CD AB C9        call getItemOfArray16
0362   C3A3                 ; 246 ex(hl, de);
0363   C3A3 EB              ex de, hl
0364   C3A4                 ; 247 getItemOfArray16(hl = &itemPrices, a);
0365   C3A4 21 2C C3        ld   hl, itemPrices
0366   C3A7 CD AB C9        call getItemOfArray16
0367   C3AA                 ; 248 }
0368   C3AA C9              ret
0369   C3AB                 ; 250 void shopBuyGetText(a)
0370   C3AB             shopBuyGetText: 
0371   C3AB                 ; 251 {
0372   C3AB                 ; 252 shopBuyGetNamePrice(a);    
0373   C3AB CD 94 C3        call shopBuyGetNamePrice
0374   C3AE                 ; 253 if (flag_z (a ^= a) |= d) return;
0375   C3AE AF              xor  a
0376   C3AF B2              or   d
0377   C3B0 C8              ret  z
0378   C3B1                 ; 254 shopMakeNamePrice(bc = "\x09", hl, de);
0379   C3B1 01 0B C6        ld   bc, s4026
0380   C3B4 CD 3C C3        call shopMakeNamePrice
0381   C3B7                 ; 255 }
0382   C3B7 C9              ret
0383   C3B8                 ; 257 //----------------------------------------------------------------------------------------------------------------------
0384   C3B8                 ; 258 // Страница с подтверждением покупки
0385   C3B8                 ; 260 void shopBuyItem()
0386   C3B8             shopBuyItem: 
0387   C3B8                 ; 261 {
0388   C3B8                 ; 262 shopStart(de =
0389   C3B8                 ; 263 "Вы уверены, что хотите\n"
0390   C3B8                 ; 264 "купить заклинание",
0391   C3B8 11 91 C6        ld   de, s4027
0392   C3BB                 ; 265 ix = &shopBuyItemGetText
0393   C3BB DD 21 F9 C3     ld   ix, shopBuyItemGetText
0394   C3BF                 ; 266 );
0395   C3BF CD 6B C0        call shopStart
0396   C3C2                 ; 268 if (flag_z a |= a) return shopBuy();
0397   C3C2 B7              or   a
0398   C3C3 CA 7E C3        jp   z, shopBuy
0399   C3C6                 ; 269 if (flag_nz a--) return shopBuyInfo();
0400   C3C6 3D              dec  a
0401   C3C7 C2 1A C4        jp   nz, shopBuyInfo
0402   C3CA                 ; 271 // Вычисление цены
0403   C3CA                 ; 272 shopBuyGetNamePrice(a = shopSel);
0404   C3CA 3A 83 C2        ld   a, (shopSel)
0405   C3CD CD 94 C3        call shopBuyGetNamePrice
0406   C3D0                 ; 273 // hl - цена
0407   C3D0                 ; 275 // Хватит ли денег?
0408   C3D0                 ; 276 ex(hl, de);
0409   C3D0 EB              ex de, hl
0410   C3D1                 ; 277 (hl = gPlayerMoney) -= de;
0411   C3D1 2A BB 60        ld   hl, (gPlayerMoney)
0412   C3D4 B7              or   a
0413   C3D5 B7 ED 52        sub  hl, de
0414   C3D8                 ; 278 if (flag_c) return shopBuyNoMoney();
0415   C3D8 DA DF C4        jp   c, shopBuyNoMoney
0416   C3DB                 ; 280 // Добавляем в карман
0417   C3DB                 ; 281 playerAddItem(a = shopSel);
0418   C3DB 3A 83 C2        ld   a, (shopSel)
0419   C3DE CD 84 C2        call playerAddItem
0420   C3E1                 ; 282 if (flag_z) return shopBuyNoSpace();
0421   C3E1 CA ED C4        jp   z, shopBuyNoSpace
0422   C3E4                 ; 284 // Уменьшаем деньги
0423   C3E4                 ; 285 shopBuyGetNamePrice(a = shopSel);
0424   C3E4 3A 83 C2        ld   a, (shopSel)
0425   C3E7 CD 94 C3        call shopBuyGetNamePrice
0426   C3EA                 ; 286 // hl - цена
0427   C3EA                 ; 287 ex(hl, de);
0428   C3EA EB              ex de, hl
0429   C3EB                 ; 288 (hl = gPlayerMoney) -= de;
0430   C3EB 2A BB 60        ld   hl, (gPlayerMoney)
0431   C3EE B7              or   a
0432   C3EF B7 ED 52        sub  hl, de
0433   C3F2                 ; 289 setPlayerMoney(hl);
0434   C3F2 CD E2 C2        call setPlayerMoney
0435   C3F5                 ; 291 // Переход на главную страницу
0436   C3F5                 ; 292 return shopAnyElseBuy();
0437   C3F5 C3 FB C4        jp   shopAnyElseBuy
0438   C3F8                 ; 293 }
0439   C3F8 C9              ret
0440   C3F9                 ; 295 void shopBuyItemGetText()
0441   C3F9             shopBuyItemGetText: 
0442   C3F9                 ; 296 {
0443   C3F9                 ; 297 if (flag_z a |= a)
0444   C3F9 B7              or   a
0445   C3FA                 ; 298 {
0446   C3FA C2 07 C4        jp   nz, l4005
0447   C3FD                 ; 299 shopBuyGetNamePrice(a = shopSel, de, hl);
0448   C3FD 3A 83 C2        ld   a, (shopSel)
0449   C400 CD 94 C3        call shopBuyGetNamePrice
0450   C403                 ; 300 // de - наимерование, hl - цена
0451   C403                 ; 301 shopMakeNamePrice2(hl, de); // Сформировать строку de + " за " + numberToString(hl) + " ?"
0452   C403 CD 54 C3        call shopMakeNamePrice2
0453   C406                 ; 302 return;
0454   C406 C9              ret
0455   C407                 ; 303 }
0456   C407                 ; 304 hl = "Нет";            if (flag_z a--) return;
0457   C407             l4005: 
0458   C407 21 C1 C7        ld   hl, s4028
0459   C40A 3D              dec  a
0460   C40B C8              ret  z
0461   C40C                 ; 305 hl = "Да";             if (flag_z a--) return;
0462   C40C 21 E4 C6        ld   hl, s4029
0463   C40F 3D              dec  a
0464   C410 C8              ret  z
0465   C411                 ; 306 hl = "Что это такое?"; if (flag_z a--) return;
0466   C411 21 21 C9        ld   hl, s4030
0467   C414 3D              dec  a
0468   C415 C8              ret  z
0469   C416                 ; 307 hl = 0;
0470   C416 21 00 00        ld   hl, 0
0471   C419                 ; 308 }
0472   C419 C9              ret
0473   C41A                 ; 310 //----------------------------------------------------------------------------------------------------------------------
0474   C41A                 ; 311 // Страница с информацией о товаре
0475   C41A                 ; 313 void shopBuyInfo()
0476   C41A             shopBuyInfo: 
0477   C41A                 ; 314 {
0478   C41A                 ; 315 getItemOfArray16(hl = &itemInfo, a = shopSel);
0479   C41A 21 1C C3        ld   hl, itemInfo
0480   C41D 3A 83 C2        ld   a, (shopSel)
0481   C420 CD AB C9        call getItemOfArray16
0482   C423                 ; 316 ex(hl, de);
0483   C423 EB              ex de, hl
0484   C424                 ; 317 shopStart(de, ix = &shopBuyInfoGetText);
0485   C424 DD 21 2F C4     ld   ix, shopBuyInfoGetText
0486   C428 CD 6B C0        call shopStart
0487   C42B                 ; 318 return shopBuyItem();
0488   C42B C3 B8 C3        jp   shopBuyItem
0489   C42E                 ; 319 }
0490   C42E C9              ret
0491   C42F                 ; 321 void shopBuyInfoGetText(a)
0492   C42F             shopBuyInfoGetText: 
0493   C42F                 ; 322 {
0494   C42F                 ; 323 hl = "\r"; if (flag_z a |= a) return;
0495   C42F 21 0D C6        ld   hl, s4031
0496   C432 B7              or   a
0497   C433 C8              ret  z
0498   C434                 ; 324 hl = "Ок"; if (flag_z a--) return;
0499   C434 21 E1 C7        ld   hl, s4032
0500   C437 3D              dec  a
0501   C438 C8              ret  z
0502   C439                 ; 325 hl = 0;
0503   C439 21 00 00        ld   hl, 0
0504   C43C                 ; 326 }
0505   C43C C9              ret
0506   C43D                 ; 328 //----------------------------------------------------------------------------------------------------------------------
0507   C43D                 ; 329 // Страница с товарами для продажи
0508   C43D                 ; 331 void shopTrade()
0509   C43D             shopTrade: 
0510   C43D                 ; 332 {
0511   C43D                 ; 333 shopStart(de =
0512   C43D                 ; 334 "Что вы хотите продать?"
0513   C43D                 ; 335 "\r"
0514   C43D                 ; 336 "Ничего",
0515   C43D 11 03 C9        ld   de, s4033
0516   C440                 ; 337 ix = &stopTradeGetText
0517   C440 DD 21 72 C4     ld   ix, stopTradeGetText
0518   C444                 ; 338 );
0519   C444 CD 6B C0        call shopStart
0520   C447                 ; 339 if (flag_z a |= a) return shopMain();
0521   C447 B7              or   a
0522   C448 CA 66 C3        jp   z, shopMain
0523   C44B                 ; 340 shopSel = --a;
0524   C44B 3D              dec  a
0525   C44C 32 83 C2        ld   (shopSel), a
0526   C44F                 ; 341 return shopTradeItem();
0527   C44F C3 88 C4        jp   shopTradeItem
0528   C452                 ; 342 }
0529   C452 C9              ret
0530   C453                 ; 344 // Вход: a - порядковый номер
0531   C453                 ; 345 // Выход: z - нет предмена, de - наименование, hl - цена продажи
0532   C453                 ; 347 void stopTradeGetNamePrice(a)
0533   C453             stopTradeGetNamePrice: 
0534   C453                 ; 348 {
0535   C453                 ; 349 getItemOfArray8(hl = &gPlayerItems, a);
0536   C453 21 D6 60        ld   hl, gPlayerItems
0537   C456 CD A4 C9        call getItemOfArray8
0538   C459                 ; 350 hl = 0;
0539   C459 21 00 00        ld   hl, 0
0540   C45C                 ; 351 if (a == 0xFF) return; // return z
0541   C45C FE FF           cp   255
0542   C45E C8              ret  z
0543   C45F                 ; 352 getItemOfArray16(hl = &itemNames, a);
0544   C45F 21 EE C2        ld   hl, itemNames
0545   C462 CD AB C9        call getItemOfArray16
0546   C465                 ; 353 ex(hl, de);
0547   C465 EB              ex de, hl
0548   C466                 ; 354 // de - наименование
0549   C466                 ; 355 getItemOfArray16(hl = &itemPrices, a);
0550   C466 21 2C C3        ld   hl, itemPrices
0551   C469 CD AB C9        call getItemOfArray16
0552   C46C                 ; 356 // hl - цена
0553   C46C                 ; 357 h >>= 1; l >>c= 1; // Делим цену на 2
0554   C46C CB 3C           srl  h
0555   C46E CB 1D           rr   l
0556   C470                 ; 358 a |= d; // return nz
0557   C470 B2              or   d
0558   C471                 ; 359 }
0559   C471 C9              ret
0560   C472                 ; 361 void stopTradeGetText(a)
0561   C472             stopTradeGetText: 
0562   C472                 ; 362 {
0563   C472                 ; 363 if (a >= *(hl = &gPlayerItemsCount))
0564   C472 21 DB 60        ld   hl, gPlayerItemsCount
0565   C475 BE              cp   (hl)
0566   C476                 ; 364 {
0567   C476 DA 7D C4        jp   c, l4006
0568   C479                 ; 365 hl = 0;
0569   C479 21 00 00        ld   hl, 0
0570   C47C                 ; 366 return; // return hl = 0
0571   C47C C9              ret
0572   C47D                 ; 367 }
0573   C47D                 ; 368 stopTradeGetNamePrice(a);
0574   C47D             l4006: 
0575   C47D CD 53 C4        call stopTradeGetNamePrice
0576   C480                 ; 369 if (flag_z) return; // В этой функции hl = 0, поэтому return hl = 0
0577   C480 C8              ret  z
0578   C481                 ; 370 // de - наимерование, hl - цена
0579   C481                 ; 371 shopMakeNamePrice(bc = "\x09", hl, de); // Сформировать строку de + "\x09" + numberToString(hl)
0580   C481 01 0B C6        ld   bc, s4026
0581   C484 CD 3C C3        call shopMakeNamePrice
0582   C487                 ; 372 // hl - указатель на временную строку
0583   C487                 ; 373 }
0584   C487 C9              ret
0585   C488                 ; 375 //----------------------------------------------------------------------------------------------------------------------
0586   C488                 ; 376 // Страница с подтверждением продажи
0587   C488                 ; 378 void shopTradeItem()
0588   C488             shopTradeItem: 
0589   C488                 ; 379 {
0590   C488                 ; 380 shopStart(de =
0591   C488                 ; 381 "Вы уверены, что хотите\n"
0592   C488                 ; 382 "продать заклинание",
0593   C488 11 BA C6        ld   de, s4034
0594   C48B                 ; 383 ix = &shopTradeItemGetText
0595   C48B DD 21 B7 C4     ld   ix, shopTradeItemGetText
0596   C48F                 ; 384 );
0597   C48F CD 6B C0        call shopStart
0598   C492                 ; 385 if (flag_z a |= a) return shopTrade();
0599   C492 B7              or   a
0600   C493 CA 3D C4        jp   z, shopTrade
0601   C496                 ; 387 // Узнаем цену
0602   C496                 ; 388 stopTradeGetNamePrice(a = shopSel);
0603   C496 3A 83 C2        ld   a, (shopSel)
0604   C499 CD 53 C4        call stopTradeGetNamePrice
0605   C49C                 ; 389 // hl - цена
0606   C49C                 ; 390 // Увеличиваем деньги игрока
0607   C49C                 ; 391 hl += (de = gPlayerMoney);
0608   C49C ED 5B BB 60     ld   de, (gPlayerMoney)
0609   C4A0 19              add  hl, de
0610   C4A1                 ; 392 if (flag_c) { return shopOverflow(hl = &shopTrade); } // Денег больше, чем 65536 быть не может
0611   C4A1 D2 AA C4        jp   nc, l4007
0612   C4A4 21 3D C4        ld   hl, shopTrade
0613   C4A7 C3 D3 C4        jp   shopOverflow
0614   C4AA                 ; 393 setPlayerMoney(hl);
0615   C4AA             l4007: 
0616   C4AA CD E2 C2        call setPlayerMoney
0617   C4AD                 ; 394 // Удаляем предмет из кармана
0618   C4AD                 ; 395 playerRemoveItem(a = shopSel);  
0619   C4AD 3A 83 C2        ld   a, (shopSel)
0620   C4B0 CD 90 C2        call playerRemoveItem
0621   C4B3                 ; 396 // Возвращаемся в меню
0622   C4B3                 ; 397 return shopAnyElseTrade();
0623   C4B3 C3 0D C5        jp   shopAnyElseTrade
0624   C4B6                 ; 398 }
0625   C4B6 C9              ret
0626   C4B7                 ; 400 void shopTradeItemGetText(a)
0627   C4B7             shopTradeItemGetText: 
0628   C4B7                 ; 401 {
0629   C4B7                 ; 402 if (flag_z a |= a)
0630   C4B7 B7              or   a
0631   C4B8                 ; 403 {
0632   C4B8 C2 C5 C4        jp   nz, l4008
0633   C4BB                 ; 404 stopTradeGetNamePrice(a = shopSel);
0634   C4BB 3A 83 C2        ld   a, (shopSel)
0635   C4BE CD 53 C4        call stopTradeGetNamePrice
0636   C4C1                 ; 405 // de - наименование, hl - цена
0637   C4C1                 ; 406 shopMakeNamePrice2(hl, de); // Сформировать строку: de + " за " + numberToString(hl) + " ?"
0638   C4C1 CD 54 C3        call shopMakeNamePrice2
0639   C4C4                 ; 407 // hl - указатель на временную строку
0640   C4C4                 ; 408 return;
0641   C4C4 C9              ret
0642   C4C5                 ; 409 }
0643   C4C5                 ; 410 hl = "Нет"; if (flag_z a--) return;
0644   C4C5             l4008: 
0645   C4C5 21 C1 C7        ld   hl, s4028
0646   C4C8 3D              dec  a
0647   C4C9 C8              ret  z
0648   C4CA                 ; 411 hl = "Да";  if (flag_z a--) return;
0649   C4CA 21 E4 C6        ld   hl, s4029
0650   C4CD 3D              dec  a
0651   C4CE C8              ret  z
0652   C4CF                 ; 412 hl = 0;
0653   C4CF 21 00 00        ld   hl, 0
0654   C4D2                 ; 413 }
0655   C4D2 C9              ret
0656   C4D3                 ; 415 //----------------------------------------------------------------------------------------------------------------------
0657   C4D3                 ; 416 // Страница с ошибкой
0658   C4D3                 ; 418 void shopOverflow(hl)
0659   C4D3             shopOverflow: 
0660   C4D3                 ; 419 {
0661   C4D3                 ; 420 push(hl);
0662   C4D3 E5              push hl
0663   C4D4                 ; 421 shopStart(de =
0664   C4D4                 ; 422 "Вам не унести\n"
0665   C4D4                 ; 423 "столько денег!"
0666   C4D4                 ; 424 "\r"
0667   C4D4                 ; 425 "Ок",
0668   C4D4 11 1E C6        ld   de, s4035
0669   C4D7                 ; 426 ix = 0
0670   C4D7 DD 21 00 00     ld   ix, 0
0671   C4DB                 ; 427 );
0672   C4DB CD 6B C0        call shopStart
0673   C4DE                 ; 428 }
0674   C4DE C9              ret
0675   C4DF                 ; 430 //----------------------------------------------------------------------------------------------------------------------
0676   C4DF                 ; 431 // Страница с ошибкой
0677   C4DF                 ; 433 void shopBuyNoMoney()
0678   C4DF             shopBuyNoMoney: 
0679   C4DF                 ; 434 {
0680   C4DF                 ; 435 shopStart(de =
0681   C4DF                 ; 436 "У вас не хватает денег.\n"
0682   C4DF                 ; 437 "Я не могу продать вам это\n"
0683   C4DF                 ; 438 "в кредит. Может быть у вас\n"
0684   C4DF                 ; 439 "есть что-нибудь на продажу?"
0685   C4DF                 ; 440 "\r"
0686   C4DF                 ; 441 "Ок",
0687   C4DF 11 2F C8        ld   de, s4036
0688   C4E2                 ; 442 ix = 0
0689   C4E2 DD 21 00 00     ld   ix, 0
0690   C4E6                 ; 443 );
0691   C4E6 CD 6B C0        call shopStart
0692   C4E9                 ; 444 return shopBuy();
0693   C4E9 C3 7E C3        jp   shopBuy
0694   C4EC                 ; 445 }
0695   C4EC C9              ret
0696   C4ED                 ; 447 //----------------------------------------------------------------------------------------------------------------------
0697   C4ED                 ; 448 // Страница с ошибкой
0698   C4ED                 ; 450 void shopBuyNoSpace()
0699   C4ED             shopBuyNoSpace: 
0700   C4ED                 ; 451 {
0701   C4ED                 ; 452 shopStart(de =
0702   C4ED                 ; 453 "Вам не унести сколько\n"
0703   C4ED                 ; 454 "предметов с собой.\n"
0704   C4ED                 ; 455 "Я могу у вас купить\n"
0705   C4ED                 ; 456 "что-нибудь лишнее."
0706   C4ED                 ; 457 "\r"
0707   C4ED                 ; 458 "Ок",
0708   C4ED 11 3E C6        ld   de, s4037
0709   C4F0                 ; 459 ix = 0
0710   C4F0 DD 21 00 00     ld   ix, 0
0711   C4F4                 ; 460 );
0712   C4F4 CD 6B C0        call shopStart
0713   C4F7                 ; 461 return shopBuy();
0714   C4F7 C3 7E C3        jp   shopBuy
0715   C4FA                 ; 462 }
0716   C4FA C9              ret
0717   C4FB                 ; 464 //----------------------------------------------------------------------------------------------------------------------
0718   C4FB                 ; 465 // Страница с продолжением покупки
0719   C4FB                 ; 467 void shopAnyElseBuy()
0720   C4FB             shopAnyElseBuy: 
0721   C4FB                 ; 468 {
0722   C4FB                 ; 469 shopStart(de =
0723   C4FB                 ; 470 "Хотите купить\n"
0724   C4FB                 ; 471 "что-нибудь еще?"
0725   C4FB                 ; 472 "\r"
0726   C4FB                 ; 473 "Нет\n"
0727   C4FB                 ; 474 "Да",
0728   C4FB 11 9B C8        ld   de, s4038
0729   C4FE                 ; 475 ix = 0
0730   C4FE DD 21 00 00     ld   ix, 0
0731   C502                 ; 476 );
0732   C502 CD 6B C0        call shopStart
0733   C505                 ; 477 if(flag_z a |= a) return shopMain();
0734   C505 B7              or   a
0735   C506 CA 66 C3        jp   z, shopMain
0736   C509                 ; 478 return shopBuy();
0737   C509 C3 7E C3        jp   shopBuy
0738   C50C                 ; 479 }
0739   C50C C9              ret
0740   C50D                 ; 481 //----------------------------------------------------------------------------------------------------------------------
0741   C50D                 ; 482 // Страница с продолжением покупки
0742   C50D                 ; 484 void shopAnyElseTrade()
0743   C50D             shopAnyElseTrade: 
0744   C50D                 ; 485 {
0745   C50D                 ; 486 shopStart(de =
0746   C50D                 ; 487 "Хотите продать\n"
0747   C50D                 ; 488 "что-нибудь еще?"
0748   C50D                 ; 489 "\r"
0749   C50D                 ; 490 "Нет\n"
0750   C50D                 ; 491 "Да",
0751   C50D 11 C0 C8        ld   de, s4039
0752   C510                 ; 492 ix = 0
0753   C510 DD 21 00 00     ld   ix, 0
0754   C514                 ; 493 );
0755   C514 CD 6B C0        call shopStart
0756   C517                 ; 494 if(flag_z a |= a) return shopMain();
0757   C517 B7              or   a
0758   C518 CA 66 C3        jp   z, shopMain
0759   C51B                 ; 495 return shopTrade();
0760   C51B C3 3D C4        jp   shopTrade
0761   C51E                 ; 496 }
0762   C51E C9              ret
0763   C51F                 ; 498 //----------------------------------------------------------------------------------------------------------------------
0764   C51F                 ; 499 // Страница с ЛУТ-ом для продажи
0765   C51F                 ; 501 uint16_t shopSum;
0766   C51F 00 00       shopSum dw 0
0767   C521                 ; 503 void shopTradeLut()
0768   C521             shopTradeLut: 
0769   C521                 ; 504 {
0770   C521                 ; 505 while()
0771   C521             l4009: 
0772   C521                 ; 506 {
0773   C521                 ; 507 // Расчет общей суммы
0774   C521                 ; 508 hl = 0;
0775   C521 21 00 00        ld   hl, 0
0776   C524                 ; 509 a = gPlayerLutCount;
0777   C524 3A D5 60        ld   a, (gPlayerLutCount)
0778   C527                 ; 510 while(a != 0)
0779   C527             l4011: 
0780   C527 B7              or   a
0781   C528 CA 37 C5        jp   z, l4012
0782   C52B                 ; 511 {
0783   C52B                 ; 512 a--;
0784   C52B 3D              dec  a
0785   C52C                 ; 513 push(hl);
0786   C52C E5              push hl
0787   C52D                 ; 514 push(a)
0788   C52D                 ; 515 {
0789   C52D F5              push af
0790   C52E                 ; 516 stopTradeLutGetNameCntPrice(a);
0791   C52E CD 8A C5        call stopTradeLutGetNameCntPrice
0792   C531                 ; 517 }
0793   C531 F1              pop  af
0794   C532                 ; 518 pop(de);
0795   C532 D1              pop  de
0796   C533                 ; 519 hl += de;
0797   C533 19              add  hl, de
0798   C534                 ; 520 }
0799   C534 C3 27 C5        jp   l4011
0800   C537             l4012: 
0801   C537                 ; 521 shopSum = hl;
0802   C537 22 1F C5        ld   (shopSum), hl
0803   C53A                 ; 523 // Диалог
0804   C53A                 ; 524 shopStart(de =
0805   C53A                 ; 525 "Что вы хотите продать?"
0806   C53A                 ; 526 "\r"
0807   C53A                 ; 527 "Ничего",
0808   C53A 11 03 C9        ld   de, s4033
0809   C53D                 ; 528 ix = &stopTradeLutGetText
0810   C53D DD 21 AD C5     ld   ix, stopTradeLutGetText
0811   C541                 ; 529 );
0812   C541 CD 6B C0        call shopStart
0813   C544                 ; 531 // Выход
0814   C544                 ; 532 a -= 1;
0815   C544 D6 01           sub  1
0816   C546                 ; 533 if (flag_c) return shopMain();
0817   C546 DA 66 C3        jp   c, shopMain
0818   C549                 ; 535 // Продать всё
0819   C549                 ; 536 if (flag_z)
0820   C549                 ; 537 {
0821   C549 C2 68 C5        jp   nz, l4013
0822   C54C                 ; 538 hl = gPlayerMoney;
0823   C54C 2A BB 60        ld   hl, (gPlayerMoney)
0824   C54F                 ; 539 hl += (de = shopSum);
0825   C54F ED 5B 1F C5     ld   de, (shopSum)
0826   C553 19              add  hl, de
0827   C554                 ; 540 if (flag_c) { return shopOverflow(hl = &shopTradeLut); } // Денег больше, чем 65536 быть не может
0828   C554 D2 5D C5        jp   nc, l4014
0829   C557 21 21 C5        ld   hl, shopTradeLut
0830   C55A C3 D3 C4        jp   shopOverflow
0831   C55D                 ; 541 setPlayerMoney(hl);
0832   C55D             l4014: 
0833   C55D CD E2 C2        call setPlayerMoney
0834   C560                 ; 542 gPlayerLutCount = a = 0; // Удаляем все предметы
0835   C560 3E 00           ld   a, 0
0836   C562 32 D5 60        ld   (gPlayerLutCount), a
0837   C565                 ; 543 return shopMain();
0838   C565 C3 66 C3        jp   shopMain
0839   C568                 ; 544 }
0840   C568                 ; 546 // Продать один
0841   C568                 ; 547 a--;
0842   C568             l4013: 
0843   C568 3D              dec  a
0844   C569                 ; 548 shopSel = a;
0845   C569 32 83 C2        ld   (shopSel), a
0846   C56C                 ; 549 // Узнаем цену
0847   C56C                 ; 550 stopTradeLutGetNameCntPrice(a);
0848   C56C CD 8A C5        call stopTradeLutGetNameCntPrice
0849   C56F                 ; 551 // hl - цена
0850   C56F                 ; 552 // Увеличиваем деньги игрока
0851   C56F                 ; 553 hl += (de = gPlayerMoney);
0852   C56F ED 5B BB 60     ld   de, (gPlayerMoney)
0853   C573 19              add  hl, de
0854   C574                 ; 554 if (flag_c) { return shopOverflow(hl = &shopTradeLut); } // Денег больше, чем 65536 быть не может
0855   C574 D2 7D C5        jp   nc, l4015
0856   C577 21 21 C5        ld   hl, shopTradeLut
0857   C57A C3 D3 C4        jp   shopOverflow
0858   C57D                 ; 555 setPlayerMoney(hl);
0859   C57D             l4015: 
0860   C57D CD E2 C2        call setPlayerMoney
0861   C580                 ; 556 // Удаляем предмет из кармана
0862   C580                 ; 557 playerRemoveLut(a = shopSel);
0863   C580 3A 83 C2        ld   a, (shopSel)
0864   C583 CD CD C2        call playerRemoveLut
0865   C586                 ; 558 }
0866   C586 C3 21 C5        jp   l4009
0867   C589             l4010: 
0868   C589                 ; 559 }
0869   C589 C9              ret
0870   C58A                 ; 561 // Получить информацию о ЛУТ-е
0871   C58A                 ; 562 // Вход: a - порядковый номер
0872   C58A                 ; 563 // Выход: de - наименование, hl - цена, c - кол-во
0873   C58A                 ; 565 void stopTradeLutGetNameCntPrice(a)
0874   C58A             stopTradeLutGetNameCntPrice: 
0875   C58A                 ; 566 {
0876   C58A                 ; 567 getItemOfArray8(hl = &gPlayerLut, a);
0877   C58A 21 BD 60        ld   hl, gPlayerLut
0878   C58D CD A4 C9        call getItemOfArray8
0879   C590                 ; 568 hl += (de = playerLutMax);
0880   C590 11 0C 00        ld   de, 12
0881   C593 19              add  hl, de
0882   C594                 ; 569 c = *hl;
0883   C594 4E              ld   c, (hl)
0884   C595                 ; 570 // с - кол-во
0885   C595                 ; 571 getItemOfArray16(hl = &lutNames, a);
0886   C595 21 FE C2        ld   hl, lutNames
0887   C598 CD AB C9        call getItemOfArray16
0888   C59B                 ; 572 ex(hl, de);
0889   C59B EB              ex de, hl
0890   C59C                 ; 573 // de - наименование
0891   C59C                 ; 574 getItemOfArray16(hl = &lutPrices, a);
0892   C59C 21 16 C3        ld   hl, lutPrices
0893   C59F CD AB C9        call getItemOfArray16
0894   C5A2                 ; 575 // hl - цена (hl *= c)
0895   C5A2                 ; 576 push(bc, de)
0896   C5A2                 ; 577 {
0897   C5A2 C5              push bc
0898   C5A3 D5              push de
0899   C5A4                 ; 578 d = 0; e = c;
0900   C5A4 16 00           ld   d, 0
0901   C5A6 59              ld   e, c
0902   C5A7                 ; 579 mul16();
0903   C5A7 CD E8 C9        call mul16
0904   C5AA                 ; 580 }
0905   C5AA D1              pop  de
0906   C5AB C1              pop  bc
0907   C5AC                 ; 581 }
0908   C5AC C9              ret
0909   C5AD                 ; 583 // Сформировать текст для вывода на экран
0910   C5AD                 ; 584 // Вход: a - порядковый номер
0911   C5AD                 ; 585 // Выход: hl - строка (если hl = 0, то конец)
0912   C5AD                 ; 587 void stopTradeLutGetText(a)
0913   C5AD             stopTradeLutGetText: 
0914   C5AD                 ; 588 {
0915   C5AD                 ; 589 // Продать все
0916   C5AD                 ; 590 a -= 1;
0917   C5AD D6 01           sub  1
0918   C5AF                 ; 591 if (flag_c)
0919   C5AF                 ; 592 {
0920   C5AF D2 D1 C5        jp   nc, l4016
0921   C5B2                 ; 593 hl = &gStringBuffer;
0922   C5B2 21 96 60        ld   hl, gStringBuffer
0923   C5B5                 ; 594 strcpyn(hl, b = [gStringBufferSize - numberToString16max - 1], de = "Продать все\x09");
0924   C5B5 06 1A           ld   b, 26
0925   C5B7 11 0F C8        ld   de, s4040
0926   C5BA CD B8 C9        call strcpyn
0927   C5BD                 ; 595 de = shopSum;
0928   C5BD ED 5B 1F C5     ld   de, (shopSum)
0929   C5C1                 ; 596 if (flag_z (a = d) |= e)
0930   C5C1 7A              ld   a, d
0931   C5C2 B3              or   e
0932   C5C3                 ; 597 {
0933   C5C3 C2 CA C5        jp   nz, l4017
0934   C5C6                 ; 598 hl = 0;
0935   C5C6 21 00 00        ld   hl, 0
0936   C5C9                 ; 599 return;
0937   C5C9 C9              ret
0938   C5CA                 ; 600 }
0939   C5CA                 ; 601 numberToString16(hl, de);
0940   C5CA             l4017: 
0941   C5CA CD C5 C9        call numberToString16
0942   C5CD                 ; 602 hl = &gStringBuffer;
0943   C5CD 21 96 60        ld   hl, gStringBuffer
0944   C5D0                 ; 603 return;
0945   C5D0 C9              ret
0946   C5D1                 ; 604 }
0947   C5D1                 ; 606 // По отдельности
0948   C5D1                 ; 607 if (a < *(hl = &gPlayerLutCount))
0949   C5D1             l4016: 
0950   C5D1 21 D5 60        ld   hl, gPlayerLutCount
0951   C5D4 BE              cp   (hl)
0952   C5D5                 ; 608 {
0953   C5D5 D2 06 C6        jp   nc, l4018
0954   C5D8                 ; 609 // Получить информацию
0955   C5D8                 ; 610 stopTradeLutGetNameCntPrice(a);
0956   C5D8 CD 8A C5        call stopTradeLutGetNameCntPrice
0957   C5DB                 ; 611 // de - наимерование, hl - цена, c - кол-во
0958   C5DB                 ; 612 push(hl);
0959   C5DB E5              push hl
0960   C5DC                 ; 613 push(bc);
0961   C5DC C5              push bc
0962   C5DD                 ; 614 hl = &gStringBuffer;
0963   C5DD 21 96 60        ld   hl, gStringBuffer
0964   C5E0                 ; 615 strcpyn(hl, b = [gStringBufferSize - 3 - 2 - 1 - numberToString16max - 1], de);
0965   C5E0 06 14           ld   b, 20
0966   C5E2 CD B8 C9        call strcpyn
0967   C5E5                 ; 616 strcpyn(hl, b = 3, de = " x ");
0968   C5E5 06 03           ld   b, 3
0969   C5E7 11 13 C6        ld   de, s4041
0970   C5EA CD B8 C9        call strcpyn
0971   C5ED                 ; 617 pop(de);
0972   C5ED D1              pop  de
0973   C5EE                 ; 618 d = 0;
0974   C5EE 16 00           ld   d, 0
0975   C5F0                 ; 619 if ((a = e) < 100) numberToString16(hl, de);
0976   C5F0 7B              ld   a, e
0977   C5F1 FE 64           cp   100
0978   C5F3 DC C5 C9        call c, numberToString16
0979   C5F6                 ; 620 strcpyn(hl, b = 1, de = "\x09");
0980   C5F6 06 01           ld   b, 1
0981   C5F8 11 0B C6        ld   de, s4026
0982   C5FB CD B8 C9        call strcpyn
0983   C5FE                 ; 621 pop(de);
0984   C5FE D1              pop  de
0985   C5FF                 ; 622 numberToString16(hl, de);
0986   C5FF CD C5 C9        call numberToString16
0987   C602                 ; 623 hl = &gStringBuffer;
0988   C602 21 96 60        ld   hl, gStringBuffer
0989   C605                 ; 624 return;
0990   C605 C9              ret
0991   C606                 ; 625 }
0992   C606                 ; 627 // Конец
0993   C606                 ; 628 hl = 0;
0994   C606             l4018: 
0995   C606 21 00 00        ld   hl, 0
0996   C609                 ; 629 return;
0997   C609 C9              ret
0998   C60A                 ; 630 }
0999   C60A C9              ret
1000   C60B                 ; strings
1001   C60B 09 00       s4026 db 9,0
1002   C60D 0D 00       s4031 db 13,0
1003   C60F 20 3F 0D 00 s4023 db " ?",13,0
1004   C613 20 78 20 00 s4041 db " x ",0
1005   C617 20E7E02000  s4022 db " за ",0
1006   C61C 2A 00       s4020 db "*",0
1007   C61E             s4035 db "Вам не унести",10,"столько денег!",13,"Ок",0
1007   C61E C2E0EC20EDE520F3EDE5F1F2E80AF1F2EEEBFCEAEE20E4E5EDE5E3210DCEEA00
1008   C63E             s4037 db "Вам не унести сколько",10,"предметов с собой.",10,"Я могу у вас купить",10,"что-нибудь лишнее.",13,"Ок",0
1008   C63E C2E0EC20EDE520F3EDE5F1F2E820F1EAEEEBFCEAEE0AEFF0E5E4ECE5F2EEE220
1008   C65E F120F1EEE1EEE92E0ADF20ECEEE3F320F320E2E0F120EAF3EFE8F2FC0AF7F2EE
1008   C67E 2DEDE8E1F3E4FC20EBE8F8EDE5E52E0DCEEA00
1009   C691             s4027 db "Вы уверены, что хотите",10,"купить заклинание",0
1009   C691 C2FB20F3E2E5F0E5EDFB2C20F7F2EE20F5EEF2E8F2E50AEAF3EFE8F2FC20E7E0
1009   C6B1 EAEBE8EDE0EDE8E500
1010   C6BA             s4034 db "Вы уверены, что хотите",10,"продать заклинание",0
1010   C6BA C2FB20F3E2E5F0E5EDFB2C20F7F2EE20F5EEF2E8F2E50AEFF0EEE4E0F2FC20E7
1010   C6DA E0EAEBE8EDE0EDE8E500
1011   C6E4 C4 E0 00    s4029 db "Да",0
1012   C6E7             s4024 db "Добрый день, чем я",10,"могу вам помочь?",13,"Мне пора идти",10,"Я хочу купить",10,"Я хочу продать",10,"Я хочу продать ЛУТ",0
1012   C6E7 C4EEE1F0FBE920E4E5EDFC2C20F7E5EC20FF0AECEEE3F320E2E0EC20EFEEECEE
1012   C707 F7FC3F0DCCEDE520EFEEF0E020E8E4F2E80ADF20F5EEF7F320EAF3EFE8F2FC0A
1012   C727 DF20F5EEF7F320EFF0EEE4E0F2FC0ADF20F5EEF7F320EFF0EEE4E0F2FC20CBD3
1012   C747 D200
1013   C749             s4002 db "Заклинание 1",0
1013   C749 C7E0EAEBE8EDE0EDE8E5203100
1014   C756             s4018 db "Золотое руно",0
1014   C756 C7EEEBEEF2EEE520F0F3EDEE00
1015   C763             s4017 db "Изумруд",0
1015   C763 C8E7F3ECF0F3E400
1016   C76B             s4004 db "Каменная кожа",0
1016   C76B CAE0ECE5EDEDE0FF20EAEEE6E000
1017   C779             s4012 db "Кислота",0
1017   C779 CAE8F1EBEEF2E000
1018   C781             s4008 db "Кожа змеи",0
1018   C781 CAEEE6E020E7ECE5E800
1019   C78B             s4016 db "Кольчуга",0
1019   C78B CAEEEBFCF7F3E3E000
1020   C794             s4015 db "Копыта",0
1020   C794 CAEEEFFBF2E000
1021   C79B             s4011 db "Кровь дракона",0
1021   C79B CAF0EEE2FC20E4F0E0EAEEEDE000
1022   C7A9             s4003 db "Магические силы",0
1022   C7A9 CCE0E3E8F7E5F1EAE8E520F1E8EBFB00
1023   C7B9             s4019 db "Майоран",0
1023   C7B9 CCE0E9EEF0E0ED00
1024   C7C1 CD E5 F2 00 s4028 db "Нет",0
1025   C7C5             s4009 db "Нож хобгоблина",0
1025   C7C5 CDEEE620F5EEE1E3EEE1EBE8EDE000
1026   C7D4             s4005 db "Огонь бездны",0
1026   C7D4 CEE3EEEDFC20E1E5E7E4EDFB00
1027   C7E1 CE EA 00    s4032 db "Ок",0
1028   C7E4             s4000 db "Отвар листьев",0
1028   C7E4 CEF2E2E0F020EBE8F1F2FCE5E200
1029   C7F2             s4013 db "Перья",0
1029   C7F2 CFE5F0FCFF00
1030   C7F8             s4001 db "Полное исцеление",0
1030   C7F8 CFEEEBEDEEE520E8F1F6E5EBE5EDE8E500
1031   C809             s4006 db "Порча",0
1031   C809 CFEEF0F7E000
1032   C80F             s4040 db "Продать все",9,0
1032   C80F CFF0EEE4E0F2FC20E2F1E50900
1033   C81C             s4014 db "Слизь",0
1033   C81C D1EBE8E7FC00
1034   C822             s4007 db "Телепортация",0
1034   C822 D2E5EBE5EFEEF0F2E0F6E8FF00
1035   C82F             s4036 db "У вас не хватает денег.",10,"Я не могу продать вам это",10,"в кредит. Может быть у вас",10,"есть что-нибудь на продажу?",13,"Ок",0
1035   C82F D320E2E0F120EDE520F5E2E0F2E0E5F220E4E5EDE5E32E0ADF20EDE520ECEEE3
1035   C84F F320EFF0EEE4E0F2FC20E2E0EC20FDF2EE0AE220EAF0E5E4E8F22E20CCEEE6E5
1035   C86F F220E1FBF2FC20F320E2E0F10AE5F1F2FC20F7F2EE2DEDE8E1F3E4FC20EDE020
1035   C88F EFF0EEE4E0E6F33F0DCEEA00
1036   C89B             s4038 db "Хотите купить",10,"что-нибудь еще?",13,"Нет",10,"Да",0
1036   C89B D5EEF2E8F2E520EAF3EFE8F2FC0AF7F2EE2DEDE8E1F3E4FC20E5F9E53F0DCDE5
1036   C8BB F20AC4E000
1037   C8C0             s4039 db "Хотите продать",10,"что-нибудь еще?",13,"Нет",10,"Да",0
1037   C8C0 D5EEF2E8F2E520EFF0EEE4E0F2FC0AF7F2EE2DEDE8E1F3E4FC20E5F9E53F0DCD
1037   C8E0 E5F20AC4E000
1038   C8E6             s4025 db "Что вы хотите купить?",13,"Ничего",0
1038   C8E6 D7F2EE20E2FB20F5EEF2E8F2E520EAF3EFE8F2FC3F0DCDE8F7E5E3EE00
1039   C903             s4033 db "Что вы хотите продать?",13,"Ничего",0
1039   C903 D7F2EE20E2FB20F5EEF2E8F2E520EFF0EEE4E0F2FC3F0DCDE8F7E5E3EE00
1040   C921             s4030 db "Что это такое?",0
1040   C921 D7F2EE20FDF2EE20F2E0EAEEE53F00
1041   C930             s4021 db "Это заклинание делает вашу",10,"плоть твердой как камень.",10,"Пока заклинание активно,",10,"урон уменьшается вдвое.",0
1041   C930 DDF2EE20E7E0EAEBE8EDE0EDE8E520E4E5EBE0E5F220E2E0F8F30AEFEBEEF2FC
1041   C950 20F2E2E5F0E4EEE920EAE0EA20EAE0ECE5EDFC2E0ACFEEEAE020E7E0EAEBE8ED
1041   C970 E0EDE8E520E0EAF2E8E2EDEE2C0AF3F0EEED20F3ECE5EDFCF8E0E5F2F1FF20E2
1041   C990 E4E2EEE52E00
1042   C996             s4010 db "Ядовитый клык",0
1042   C996 DFE4EEE2E8F2FBE920EAEBFBEA00
1043   C9A4             
0001   C9A4                 ; 3 void getItemOfArray8()
0002   C9A4             getItemOfArray8: 
0003   C9A4                 ; 4 {
0004   C9A4                 ; 5 l = (a += l);
0005   C9A4 85              add  l
0006   C9A5 6F              ld   l, a
0007   C9A6                 ; 6 h = ((a +@= h) -= l);
0008   C9A6 8C              adc  h
0009   C9A7 95              sub  l
0010   C9A8 67              ld   h, a
0011   C9A9                 ; 7 a = *hl;
0012   C9A9 7E              ld   a, (hl)
0013   C9AA                 ; 8 }
0014   C9AA C9              ret
0015   C9AB                 ; 10 void getItemOfArray16()
0016   C9AB             getItemOfArray16: 
0017   C9AB                 ; 11 {
0018   C9AB                 ; 12 push(a)
0019   C9AB                 ; 13 {
0020   C9AB F5              push af
0021   C9AC                 ; 14 l = ((a += a) += l);
0022   C9AC 87              add  a
0023   C9AD 85              add  l
0024   C9AE 6F              ld   l, a
0025   C9AF                 ; 15 h = ((a +@= h) -= l);
0026   C9AF 8C              adc  h
0027   C9B0 95              sub  l
0028   C9B1 67              ld   h, a
0029   C9B2                 ; 16 a = *hl; hl++; h = *hl; l = a;
0030   C9B2 7E              ld   a, (hl)
0031   C9B3 23              inc  hl
0032   C9B4 66              ld   h, (hl)
0033   C9B5 6F              ld   l, a
0034   C9B6                 ; 17 }
0035   C9B6 F1              pop  af
0036   C9B7                 ; 18 }
0037   C9B7 C9              ret
0038   C9B8                 ; 20 // b - указывает на максимальное кол-во копируемых символов, размер буфера должен быть на 1 байт больше.
0039   C9B8                 ; 22 void strcpyn(hl, de, b)
0040   C9B8             strcpyn: 
0041   C9B8                 ; 23 {
0042   C9B8                 ; 24 do
0043   C9B8             l7000: 
0044   C9B8                 ; 25 {
0045   C9B8                 ; 26 a = *de; de++;
0046   C9B8 1A              ld   a, (de)
0047   C9B9 13              inc  de
0048   C9BA                 ; 27 if (flag_z a |= a) break;
0049   C9BA B7              or   a
0050   C9BB CA C2 C9        jp   z, l7001
0051   C9BE                 ; 28 *hl = a; hl++;
0052   C9BE 77              ld   (hl), a
0053   C9BF 23              inc  hl
0054   C9C0                 ; 29 } while(--b);
0055   C9C0 10 F6           djnz l7000
0056   C9C2             l7001: 
0057   C9C2                 ; 30 *hl = 0;
0058   C9C2 36 00           ld   (hl), 0
0059   C9C4                 ; 31 }
0060   C9C4 C9              ret
0061   C9C5                 ; 33 void numberToString16(hl, de)
0062   C9C5             numberToString16: 
0063   C9C5                 ; 34 {
0064   C9C5                 ; 35 *[&uint16_to_str_addr + 1] = hl;
0065   C9C5 22 DB C9        ld   ((uint16_to_str_addr) + (1)), hl
0066   C9C8                 ; 37 // Терминатор
0067   C9C8                 ; 38 a ^= a;
0068   C9C8 AF              xor  a
0069   C9C9                 ; 39 push(a);
0070   C9C9 F5              push af
0071   C9CA                 ; 41 // Разделение числа на цифры
0072   C9CA                 ; 42 ex(hl, de);
0073   C9CA EB              ex de, hl
0074   C9CB                 ; 43 do
0075   C9CB             l7002: 
0076   C9CB                 ; 44 {
0077   C9CB                 ; 45 div16(hl, de = 10);
0078   C9CB 11 0A 00        ld   de, 10
0079   C9CE CD 0B C0        call div16
0080   C9D1                 ; 46 (a = e) += '0';
0081   C9D1 7B              ld   a, e
0082   C9D2 C6 30           add  48
0083   C9D4                 ; 47 push(a);
0084   C9D4 F5              push af
0085   C9D5                 ; 48 } while (flag_nz (a = h) |= l);
0086   C9D5 7C              ld   a, h
0087   C9D6 B5              or   l
0088   C9D7 C2 CB C9        jp   nz, l7002
0089   C9DA             l7003: 
0090   C9DA                 ; 50 // Вывод в строку
0091   C9DA                 ; 51 uint16_to_str_addr:
0092   C9DA             uint16_to_str_addr: 
0093   C9DA                 ; 52 de = 0;
0094   C9DA 11 00 00        ld   de, 0
0095   C9DD                 ; 53 do
0096   C9DD             l7004: 
0097   C9DD                 ; 54 {
0098   C9DD                 ; 55 pop(a);
0099   C9DD F1              pop  af
0100   C9DE                 ; 56 *de = a; de++;
0101   C9DE 12              ld   (de), a
0102   C9DF 13              inc  de
0103   C9E0                 ; 57 } while(flag_nz a |= a);
0104   C9E0 B7              or   a
0105   C9E1 C2 DD C9        jp   nz, l7004
0106   C9E4             l7005: 
0107   C9E4                 ; 58 de--;
0108   C9E4 1B              dec  de
0109   C9E5                 ; 59 hl = de;
0110   C9E5 62              ld   h, d
0111   C9E6 6B              ld   l, e
0112   C9E7                 ; 60 }
0113   C9E7 C9              ret
0114   C9E8                 ; 62 // Умножение HL на DE, результат в HL. BC портить нельзя
0115   C9E8                 ; 64 void mul16()
0116   C9E8             mul16: 
0117   C9E8                 ; 65 {
0118   C9E8                 ; 66 bc = hl;
0119   C9E8 44              ld   b, h
0120   C9E9 4D              ld   c, l
0121   C9EA                 ; 67 hl = 0;
0122   C9EA 21 00 00        ld   hl, 0
0123   C9ED                 ; 68 a = 17;
0124   C9ED 3E 11           ld   a, 17
0125   C9EF                 ; 69 while()
0126   C9EF             l7006: 
0127   C9EF                 ; 70 {
0128   C9EF                 ; 71 a--;
0129   C9EF 3D              dec  a
0130   C9F0                 ; 72 if (flag_z) return;
0131   C9F0 C8              ret  z
0132   C9F1                 ; 73 hl += hl;
0133   C9F1 29              add  hl, hl
0134   C9F2                 ; 74 ex(hl, de);
0135   C9F2 EB              ex de, hl
0136   C9F3                 ; 75 if (flag_c)
0137   C9F3                 ; 76 {
0138   C9F3 D2 FB C9        jp   nc, l7008
0139   C9F6                 ; 77 hl += hl;
0140   C9F6 29              add  hl, hl
0141   C9F7                 ; 78 hl++;
0142   C9F7 23              inc  hl
0143   C9F8                 ; 79 }
0144   C9F8                 ; 80 else
0145   C9F8 C3 FC C9        jp   l7009
0146   C9FB             l7008: 
0147   C9FB                 ; 81 {
0148   C9FB                 ; 82 hl += hl;
0149   C9FB 29              add  hl, hl
0150   C9FC                 ; 83 }
0151   C9FC             l7009: 
0152   C9FC                 ; 84 ex(hl, de);
0153   C9FC EB              ex de, hl
0154   C9FD                 ; 85 if (flag_nc) continue;
0155   C9FD D2 EF C9        jp   nc, l7006
0156   CA00                 ; 86 hl += bc;
0157   CA00 09              add  hl, bc
0158   CA01                 ; 87 if (flag_nc) continue;
0159   CA01 D2 EF C9        jp   nc, l7006
0160   CA04                 ; 88 de++;
0161   CA04 13              inc  de
0162   CA05                 ; 89 }
0163   CA05 C3 EF C9        jp   l7006
0164   CA08             l7007: 
0165   CA08                 ; 90 }
0166   CA08 C9              ret
0167   CA09                 ; 92 // Добавить элемент в конец массива uint8_t[]
0168   CA09                 ; 93 //
0169   CA09                 ; 94 // Вход:
0170   CA09                 ; 95 //   de - адрес начала массива
0171   CA09                 ; 96 //   hl - адрес, где хранится длинна массива
0172   CA09                 ; 97 //   c  - максимальное кол-во элементов в массиве
0173   CA09                 ; 98 // Выход:
0174   CA09                 ; 99 //   z  - В массиве нет места
0175   CA09                 ; 101 void addElement(de, hl, c, a)
0176   CA09             addElement: 
0177   CA09                 ; 102 {
0178   CA09                 ; 103 b = a;
0179   CA09 47              ld   b, a
0180   CA0A                 ; 104 a = *hl;
0181   CA0A 7E              ld   a, (hl)
0182   CA0B                 ; 105 if (a == c) return; // z
0183   CA0B B9              cp   c
0184   CA0C C8              ret  z
0185   CA0D                 ; 106 (*hl)++;
0186   CA0D 34              inc  (hl)
0187   CA0E                 ; 107 l = (a += e); h = ((a +@= d) -= l);
0188   CA0E 83              add  e
0189   CA0F 6F              ld   l, a
0190   CA10 8A              adc  d
0191   CA11 95              sub  l
0192   CA12 67              ld   h, a
0193   CA13                 ; 108 *hl = b;
0194   CA13 70              ld   (hl), b
0195   CA14                 ; 109 ++(a ^= a); // return nz
0196   CA14 AF              xor  a
0197   CA15 3C              inc  a
0198   CA16                 ; 110 }
0199   CA16 C9              ret
0200   CA17                 ; 112 // Удалить элемент из массива
0201   CA17                 ; 113 //
0202   CA17                 ; 114 // Вход:
0203   CA17                 ; 115 //   de - адрес начала массива
0204   CA17                 ; 116 //   hl - адрес, где хранится длинна массива
0205   CA17                 ; 117 //   c  - максимальное кол-во элементов в массиве
0206   CA17                 ; 118 // Выход:
0207   CA17                 ; 119 //   z  - В массиве нет места
0208   CA17                 ; 121 void removeElement(de, hl, a)
0209   CA17             removeElement: 
0210   CA17                 ; 122 {
0211   CA17                 ; 123 (*hl)--;
0212   CA17 35              dec  (hl)
0213   CA18                 ; 124 removeElement2:
0214   CA18             removeElement2: 
0215   CA18                 ; 125 b = a;
0216   CA18 47              ld   b, a
0217   CA19                 ; 126 e = (a += e); d = ((a +@= d) -= e); // de += a
0218   CA19 83              add  e
0219   CA1A 5F              ld   e, a
0220   CA1B 8A              adc  d
0221   CA1C 93              sub  e
0222   CA1D 57              ld   d, a
0223   CA1E                 ; 127 (a = *hl) -= b;
0224   CA1E 7E              ld   a, (hl)
0225   CA1F 90              sub  b
0226   CA20                 ; 128 if (flag_z) return;
0227   CA20 C8              ret  z
0228   CA21                 ; 129 b = 0; c = a;
0229   CA21 06 00           ld   b, 0
0230   CA23 4F              ld   c, a
0231   CA24                 ; 130 hl = de;
0232   CA24 62              ld   h, d
0233   CA25 6B              ld   l, e
0234   CA26                 ; 131 hl++;
0235   CA26 23              inc  hl
0236   CA27                 ; 132 ldir();
0237   CA27 ED B0           ldir
0238   CA29                 ; 133 }
0239   CA29 C9              ret
0240   CA2A                 ; 135 void drawSprite2(de, bc, hl)
0241   CA2A             drawSprite2: 
0242   CA2A                 ; 136 {
0243   CA2A                 ; 137 *bc = a = *de; de++; b++;
0244   CA2A 1A              ld   a, (de)
0245   CA2B 02              ld   (bc), a
0246   CA2C 13              inc  de
0247   CA2D 04              inc  b
0248   CA2E                 ; 138 *bc = a = *de; de++; b++;
0249   CA2E 1A              ld   a, (de)
0250   CA2F 02              ld   (bc), a
0251   CA30 13              inc  de
0252   CA31 04              inc  b
0253   CA32                 ; 139 *bc = a = *de; de++; b++;
0254   CA32 1A              ld   a, (de)
0255   CA33 02              ld   (bc), a
0256   CA34 13              inc  de
0257   CA35 04              inc  b
0258   CA36                 ; 140 *bc = a = *de; de++; b++;
0259   CA36 1A              ld   a, (de)
0260   CA37 02              ld   (bc), a
0261   CA38 13              inc  de
0262   CA39 04              inc  b
0263   CA3A                 ; 141 *bc = a = *de; de++; b++;
0264   CA3A 1A              ld   a, (de)
0265   CA3B 02              ld   (bc), a
0266   CA3C 13              inc  de
0267   CA3D 04              inc  b
0268   CA3E                 ; 142 *bc = a = *de; de++; b++;
0269   CA3E 1A              ld   a, (de)
0270   CA3F 02              ld   (bc), a
0271   CA40 13              inc  de
0272   CA41 04              inc  b
0273   CA42                 ; 143 *bc = a = *de; de++; b++;
0274   CA42 1A              ld   a, (de)
0275   CA43 02              ld   (bc), a
0276   CA44 13              inc  de
0277   CA45 04              inc  b
0278   CA46                 ; 144 *bc = a = *de; de++;
0279   CA46 1A              ld   a, (de)
0280   CA47 02              ld   (bc), a
0281   CA48 13              inc  de
0282   CA49                 ; 145 *hl = a = *de; de++;
0283   CA49 1A              ld   a, (de)
0284   CA4A 77              ld   (hl), a
0285   CA4B 13              inc  de
0286   CA4C                 ; 146 b = ((a = b) -= 7);
0287   CA4C 78              ld   a, b
0288   CA4D D6 07           sub  7
0289   CA4F 47              ld   b, a
0290   CA50                 ; 147 l++;
0291   CA50 2C              inc  l
0292   CA51                 ; 148 c++;
0293   CA51 0C              inc  c
0294   CA52                 ; 149 }
0295   CA52 C9              ret
0296   CA53                 ; 151 void drawSprite4(bc, hl, de)
0297   CA53             drawSprite4: 
0298   CA53                 ; 152 {
0299   CA53                 ; 153 drawSprite2(bc, hl, de);
0300   CA53 CD 2A CA        call drawSprite2
0301   CA56                 ; 154 drawSprite2(bc, hl, de);
0302   CA56 CD 2A CA        call drawSprite2
0303   CA59                 ; 155 l = ((a = l) += [0x20 - 2]); c = l;
0304   CA59 7D              ld   a, l
0305   CA5A C6 1E           add  30
0306   CA5C 6F              ld   l, a
0307   CA5D 4D              ld   c, l
0308   CA5E                 ; 156 if (flag_c) { b = ((a = b) += 8); h++; }
0309   CA5E D2 66 CA        jp   nc, l7010
0310   CA61 78              ld   a, b
0311   CA62 C6 08           add  8
0312   CA64 47              ld   b, a
0313   CA65 24              inc  h
0314   CA66                 ; 157 drawSprite2(bc, hl, de);
0315   CA66             l7010: 
0316   CA66 CD 2A CA        call drawSprite2
0317   CA69                 ; 158 drawSprite2(bc, hl, de);
0318   CA69 CD 2A CA        call drawSprite2
0319   CA6C                 ; 159 }
0320   CA6C C9              ret
0321   CA6D                 ; 161 void drawSpriteXor(de, bc, hl, ixh)
0322   CA6D             drawSpriteXor: 
0323   CA6D                 ; 162 {
0324   CA6D                 ; 163 a = *de; de++; *hl = (a ^= *hl); h++;
0325   CA6D 1A              ld   a, (de)
0326   CA6E 13              inc  de
0327   CA6F AE              xor  (hl)
0328   CA70 77              ld   (hl), a
0329   CA71 24              inc  h
0330   CA72                 ; 164 a = *de; de++; *hl = (a ^= *hl); h++;
0331   CA72 1A              ld   a, (de)
0332   CA73 13              inc  de
0333   CA74 AE              xor  (hl)
0334   CA75 77              ld   (hl), a
0335   CA76 24              inc  h
0336   CA77                 ; 165 a = *de; de++; *hl = (a ^= *hl); h++;
0337   CA77 1A              ld   a, (de)
0338   CA78 13              inc  de
0339   CA79 AE              xor  (hl)
0340   CA7A 77              ld   (hl), a
0341   CA7B 24              inc  h
0342   CA7C                 ; 166 a = *de; de++; *hl = (a ^= *hl); h++;
0343   CA7C 1A              ld   a, (de)
0344   CA7D 13              inc  de
0345   CA7E AE              xor  (hl)
0346   CA7F 77              ld   (hl), a
0347   CA80 24              inc  h
0348   CA81                 ; 167 a = *de; de++; *hl = (a ^= *hl); h++;
0349   CA81 1A              ld   a, (de)
0350   CA82 13              inc  de
0351   CA83 AE              xor  (hl)
0352   CA84 77              ld   (hl), a
0353   CA85 24              inc  h
0354   CA86                 ; 168 a = *de; de++; *hl = (a ^= *hl); h++;
0355   CA86 1A              ld   a, (de)
0356   CA87 13              inc  de
0357   CA88 AE              xor  (hl)
0358   CA89 77              ld   (hl), a
0359   CA8A 24              inc  h
0360   CA8B                 ; 169 a = *de; de++; *hl = (a ^= *hl); h++;
0361   CA8B 1A              ld   a, (de)
0362   CA8C 13              inc  de
0363   CA8D AE              xor  (hl)
0364   CA8E 77              ld   (hl), a
0365   CA8F 24              inc  h
0366   CA90                 ; 170 a = *de; de++; *hl = (a ^= *hl);
0367   CA90 1A              ld   a, (de)
0368   CA91 13              inc  de
0369   CA92 AE              xor  (hl)
0370   CA93 77              ld   (hl), a
0371   CA94                 ; 171 h = ((a = h) -= 7);
0372   CA94 7C              ld   a, h
0373   CA95 D6 07           sub  7
0374   CA97 67              ld   h, a
0375   CA98                 ; 172 l++;
0376   CA98 2C              inc  l
0377   CA99                 ; 173 *bc = a = ixh; de++;
0378   CA99 DD 7C           ld   a, ixh
0379   CA9B 02              ld   (bc), a
0380   CA9C 13              inc  de
0381   CA9D                 ; 174 bc++;
0382   CA9D 03              inc  bc
0383   CA9E                 ; 175 }
0384   CA9E C9              ret
0385   CA9F             
0001   CA9F             dialogrect_0  db 0FFh, 0FFh, 0E0h, 0CFh, 0DCh, 0D8h, 0D0h, 0D0h, 046h
0001   CA9F FFFFE0CFDCD8D0D046
0002   CAA8             dialogrect_1  db 0FFh, 0FFh, 000h, 000h, 000h, 000h, 000h, 000h, 046h
0002   CAA8 FFFF00000000000046
0003   CAB1             dialogrect_2  db 0FFh, 0FFh, 007h, 0F3h, 03Bh, 01Bh, 00Bh, 00Bh, 046h
0003   CAB1 FFFF07F33B1B0B0B46
0004   CABA             dialogrect_3  db 0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 0C0h, 046h
0004   CABA C0C0C0C0C0C0C0C046
0005   CAC3             dialogrect_4  db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 047h
0005   CAC3 000000000000000047
0006   CACC             dialogrect_5  db 003h, 003h, 003h, 003h, 003h, 003h, 003h, 003h, 046h
0006   CACC 030303030303030346
0007   CAD5             dialogrect_6  db 0D0h, 0D0h, 0D8h, 0DCh, 0CFh, 0E0h, 0FFh, 0FFh, 046h
0007   CAD5 D0D0D8DCCFE0FFFF46
0008   CADE             dialogrect_7  db 000h, 000h, 000h, 000h, 000h, 000h, 0FFh, 0FFh, 046h
0008   CADE 000000000000FFFF46
0009   CAE7             dialogrect_8  db 00Bh, 00Bh, 01Bh, 03Bh, 0F3h, 007h, 0FFh, 0FFh, 046h
0009   CAE7 0B0B1B3BF307FFFF46
0010   CAF0             dialogrect_9  db 0FEh, 0FEh, 07Ch, 038h, 038h, 010h, 010h, 000h, 046h
0010   CAF0 FEFE7C383810100046
0011   CAF9             
0001   CAF9             image_panelgraph: 
0002   CAF9                 ; Width, height
0003   CAF9 20 04           db 32, 4
0004   CAFB                 ; Black & white
0005   CAFB                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h ; 0
0005   CAFB 0000000000000000000000000000000000000000000000000000000000000000
0006   CB1B                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 00Ch, 0E4h, 0AAh, 097h, 080h, 000h, 031h, 0D1h, 04Bh, 09Ch, 000h
0006   CB1B 0000000000000000000000000000000000000000000CE4AA97800031D14B9C00
0007   CB3B                 db 00Eh, 067h, 018h, 040h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 012h, 094h, 0AAh, 094h, 000h, 000h, 04Ah, 051h, 049h, 024h, 000h
0007   CB3B 0E67184000000000000000000000000000000000001294AA9400004A51492400
0008   CB5B                 db 008h, 094h, 0A4h, 0A0h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 012h, 093h, 09Ch, 0B7h, 000h, 000h, 012h, 055h, 059h, 024h, 000h
0008   CB5B 0894A4A0000000000000000000000000000000000012939CB700001255592400
0009   CB7B                 db 008h, 097h, 024h, 0A0h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 012h, 0E0h, 0AAh, 0D4h, 000h, 000h, 04Bh, 0D5h, 069h, 03Ch, 000h
0009   CB7B 089724A0000000000000000000000000000000000012E0AAD400004BD5693C00
0010   CB9B                 db 008h, 094h, 024h, 0A0h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 00Ch, 083h, 02Ah, 097h, 080h, 000h, 032h, 05Fh, 049h, 024h, 000h
0010   CB9B 089424A000000000000000000000000000000000000C832A978000325F492400
0011   CBBB                 db 008h, 064h, 019h, 0F0h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 080h, 000h, 000h
0011   CBBB 086419F000000000000000000000000000000000000000000000000000800000
0012   CBDB                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 0FFh, 0FFh, 081h, 0FFh, 0FFh, 080h, 001h, 0FFh, 0FFh, 080h, 000h
0012   CBDB 000000000000000000000000000000000000000001FFFF81FFFF8001FFFF8000
0013   CBFB                 db 000h, 000h, 000h, 000h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h ; 1
0013   CBFB 00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00010000810000800100008000
0014   CC1B                 db 000h, 000h, 000h, 000h, 080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0014   CC1B 0000000080000000000000000000000000000100010000810000800100008000
0015   CC3B                 db 00Ah, 0A5h, 092h, 080h, 080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0015   CC3B 0AA5928080000000000000000000000000000100010000810000800100008000
0016   CC5B                 db 00Ah, 0A4h, 052h, 0E0h, 080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0016   CC5B 0AA452E080000000000000000000000000000100010000810000800100008000
0017   CC7B                 db 007h, 02Ch, 09Eh, 090h, 080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0017   CC7B 072C9E9080000000000000000000000000000100010000810000800100008000
0018   CC9B                 db 00Ah, 0B4h, 052h, 090h, 080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0018   CC9B 0AB4529080000000000000000000000000000100010000810000800100008000
0019   CCBB                 db 00Ah, 0A5h, 092h, 0E0h, 080h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0019   CCBB 0AA592E080000000000000000000000000000100010000810000800100008000
0020   CCDB                 db 000h, 000h, 000h, 000h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0020   CCDB 00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00010000810000800100008000
0021   CCFB                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h ; 2
0021   CCFB 0000000000000000000000000000000000000000010000810000800100008000
0022   CD1B                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0022   CD1B 0000000000000000000000000000000000000000010000810000800100008000
0023   CD3B                 db 006h, 073h, 01Dh, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0023   CD3B 06731D0000000000000000000000000000000000010000810000800100008000
0024   CD5B                 db 009h, 024h, 0A5h, 0C0h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0024   CD5B 0924A5C000000000000000000000000000000000010000810000800100008000
0025   CD7B                 db 008h, 027h, 0A5h, 020h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0025   CD7B 0827A52000000000000000000000000000000000010000810000800100008000
0026   CD9B                 db 009h, 024h, 0A5h, 020h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0026   CD9B 0924A52000000000000000000000000000000000010000810000800100008000
0027   CDBB                 db 006h, 024h, 0A5h, 0C0h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0027   CDBB 0624A5C000000000000000000000000000000000010000810000800100008000
0028   CDDB                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 000h, 000h, 081h, 000h, 000h, 080h, 001h, 000h, 000h, 080h, 000h
0028   CDDB 0000000000000000000000000000000000000000010000810000800100008000
0029   CDFB                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 001h, 0FFh, 0FFh, 081h, 0FFh, 0FFh, 080h, 001h, 0FFh, 0FFh, 080h, 000h ; 3
0029   CDFB 000000000000000000000000000000000000000001FFFF81FFFF8001FFFF8000
0030   CE1B                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
0030   CE1B 0000000000000000000000000000000000000000000000000000000000000000
0031   CE3B                 db 00Fh, 04Bh, 0BDh, 0C0h, 094h, 0B9h, 0EEh, 067h, 020h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
0031   CE3B 0F4BBDC094B9EE67200000000000000000000000000000000000000000000000
0032   CE5B                 db 008h, 049h, 021h, 020h, 094h, 0A5h, 004h, 094h, 0B8h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
0032   CE5B 0849212094A50494B80000000000000000000000000000000000000000000000
0033   CE7B                 db 00Eh, 069h, 039h, 02Eh, 0B7h, 0B9h, 0C4h, 0F7h, 024h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
0033   CE7B 0E69392EB7B9C4F7240000000000000000000000000000000000000000000000
0034   CE9B                 db 008h, 059h, 021h, 0C0h, 0D4h, 0A5h, 004h, 094h, 024h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
0034   CE9B 085921C0D4A50494240000000000000000000000000000000000000000000000
0035   CEBB                 db 00Fh, 049h, 03Dh, 020h, 094h, 0B9h, 0E4h, 094h, 038h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
0035   CEBB 0F493D2094B9E494380000000000000000000000000000000000000000000000
0036   CEDB                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
0036   CEDB 0000000000000000000000000000000000000000000000000000000000000000
0037   CEFB                 ; Color attributes
0038   CEFB                 db 04Fh, 04Fh, 04Fh, 04Fh, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 049h ; 0
0038   CEFB 4F4F4F4F494949494949494949494949494949494F4F4F4F4F4F4F4F4F4F4F49
0039   CF1B                 db 04Fh, 04Fh, 04Fh, 04Fh, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 047h, 049h, 04Fh, 045h, 045h, 04Fh, 045h, 045h, 04Fh, 04Fh, 045h, 045h, 04Fh, 049h ; 1
0039   CF1B 4F4F4F4F474747474747474747474747474747494F45454F45454F4F45454F49
0040   CF3B                 db 04Fh, 04Fh, 04Fh, 04Fh, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 04Fh, 045h, 045h, 04Fh, 045h, 045h, 04Fh, 04Fh, 045h, 045h, 04Fh, 049h ; 2
0040   CF3B 4F4F4F4F494949494949494949494949494949494F45454F45454F4F45454F49
0041   CF5B                 db 04Dh, 04Dh, 04Dh, 04Dh, 04Dh, 04Dh, 04Dh, 04Dh, 04Dh, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 049h, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 04Fh, 049h ; 3
0041   CF5B 4D4D4D4D4D4D4D4D4D49494949494949494949494F4F4F4F4F4F4F4F4F4F4F49
0042   CF7B             
0001   CF7B 00             ds (10000h - $) & 7
0002   CF80             
0003   CF80             inventgraphTails:  ; count 66
0004   CF80                 db 000h, 000h, 000h, 000h, 000h, 000h, 000h, 000h
0004   CF80 0000000000000000
0005   CF88                 db 000h, 000h, 000h, 003h, 00Fh, 00Ch, 018h, 018h
0005   CF88 000000030F0C1818
0006   CF90                 db 000h, 000h, 000h, 0FFh, 0FFh, 000h, 000h, 000h
0006   CF90 000000FFFF000000
0007   CF98                 db 000h, 000h, 000h, 000h, 0FFh, 0FFh, 000h, 000h
0007   CF98 00000000FFFF0000
0008   CFA0                 db 01Eh, 0F7h, 0FFh, 01Eh, 000h, 0FFh, 0FFh, 000h
0008   CFA0 1EF7FF1E00FFFF00
0009   CFA8                 db 000h, 0C0h, 0F8h, 000h, 03Fh, 0FFh, 0E0h, 000h
0009   CFA8 00C0F8003FFFE000
0010   CFB0                 db 000h, 000h, 007h, 0FFh, 0FCh, 003h, 00Fh, 000h
0010   CFB0 000007FFFC030F00
0011   CFB8                 db 000h, 000h, 0FFh, 0FFh, 000h, 0FFh, 0FFh, 000h
0011   CFB8 0000FFFF00FFFF00
0012   CFC0                 db 000h, 000h, 0F0h, 0C0h, 03Fh, 0FFh, 0E0h, 000h
0012   CFC0 0000F0C03FFFE000
0013   CFC8                 db 000h, 000h, 0FFh, 0FFh, 000h, 0FEh, 080h, 000h
0013   CFC8 0000FFFF00FE8000
0014   CFD0                 db 000h, 000h, 000h, 0C0h, 0F0h, 030h, 018h, 018h
0014   CFD0 000000C0F0301818
0015   CFD8                 db 018h, 018h, 018h, 018h, 018h, 018h, 018h, 018h
0015   CFD8 1818181818181818
0016   CFE0                 db 001h, 002h, 000h, 002h, 001h, 000h, 000h, 000h
0016   CFE0 0102000201000000
0017   CFE8                 db 08Ch, 052h, 092h, 05Eh, 092h, 000h, 000h, 000h
0017   CFE8 8C52925E92000000
0018   CFF0                 db 091h, 0A2h, 0C4h, 0A4h, 094h, 000h, 000h, 000h
0018   CFF0 91A2C4A494000000
0019   CFF8                 db 0A5h, 0A5h, 0ADh, 0B5h, 0A5h, 000h, 000h, 000h
0019   CFF8 A5A5ADB5A5000000
0020   D000                 db 026h, 029h, 0E9h, 02Fh, 029h, 000h, 000h, 000h
0020   D000 2629E92F29000000
0021   D008                 db 04Ah, 04Ah, 07Ah, 04Bh, 04Ah, 000h, 000h, 000h
0021   D008 4A4A7A4B4A000000
0022   D010                 db 04Eh, 052h, 0D2h, 04Eh, 052h, 000h, 000h, 000h
0022   D010 4E52D24E52000000
0023   D018                 db 018h, 018h, 018h, 00Ch, 00Dh, 00Ch, 006h, 016h
0023   D018 1818180C0D0C0616
0024   D020                 db 000h, 000h, 000h, 087h, 03Fh, 0F8h, 0C0h, 010h
0024   D020 000000873FF8C010
0025   D028                 db 000h, 000h, 000h, 000h, 0FFh, 0FEh, 000h, 000h
0025   D028 00000000FFFE0000
0026   D030                 db 018h, 018h, 018h, 030h, 0B0h, 030h, 060h, 068h
0026   D030 18181830B0306068
0027   D038                 db 036h, 036h, 036h, 03Ah, 01Ah, 018h, 018h, 018h
0027   D038 3636363A1A181818
0028   D040                 db 002h, 002h, 002h, 003h, 002h, 000h, 000h, 000h
0028   D040 0202020302000000
0029   D048                 db 04Ch, 052h, 0D0h, 052h, 04Ch, 000h, 000h, 000h
0029   D048 4C52D0524C000000
0030   D050                 db 0F3h, 094h, 094h, 094h, 093h, 000h, 000h, 000h
0030   D050 F394949493000000
0031   D058                 db 00Dh, 095h, 0A5h, 0A5h, 025h, 000h, 000h, 000h
0031   D058 0D95A5A525000000
0032   D060                 db 006h, 0C9h, 022h, 029h, 0C6h, 000h, 000h, 000h
0032   D060 06C92229C6000000
0033   D068                 db 033h, 04Ah, 04Bh, 04Ah, 033h, 000h, 000h, 000h
0033   D068 334A4B4A33000000
0034   D070                 db 0E8h, 04Eh, 049h, 049h, 04Eh, 000h, 000h, 000h
0034   D070 E84E49494E000000
0035   D078                 db 001h, 001h, 001h, 001h, 001h, 000h, 000h, 000h
0035   D078 0101010101000000
0036   D080                 db 00Fh, 009h, 009h, 009h, 009h, 000h, 000h, 000h
0036   D080 0F09090909000000
0037   D088                 db 071h, 04Ah, 04Ah, 072h, 041h, 000h, 000h, 000h
0037   D088 714A4A7241000000
0038   D090                 db 08Ch, 052h, 052h, 052h, 0BFh, 000h, 000h, 000h
0038   D090 8C525252BF000000
0039   D098                 db 065h, 093h, 091h, 0F3h, 095h, 000h, 000h, 000h
0039   D098 659391F395000000
0040   D0A0                 db 064h, 0A4h, 01Ch, 084h, 058h, 000h, 000h, 000h
0040   D0A0 64A41C8458000000
0041   D0A8                 db 06Ch, 06Ch, 06Ch, 05Ch, 058h, 018h, 018h, 018h
0041   D0A8 6C6C6C5C58181818
0042   D0B0                 db 018h, 00Ch, 00Ch, 00Ch, 02Ch, 02Ch, 02Eh, 066h
0042   D0B0 180C0C0C2C2C2E66
0043   D0B8                 db 018h, 030h, 030h, 030h, 030h, 034h, 074h, 06Ch
0043   D0B8 183030303034746C
0044   D0C0                 db 066h, 0F6h, 0F6h, 0B6h, 0F6h, 066h, 066h, 066h
0044   D0C0 66F6F6B6F6666666
0045   D0C8                 db 06Ch, 068h, 068h, 068h, 068h, 068h, 068h, 060h
0045   D0C8 6C68686868686860
0046   D0D0                 db 00Ch, 00Ch, 00Ch, 00Ch, 00Ch, 00Ch, 00Ch, 00Ch
0046   D0D0 0C0C0C0C0C0C0C0C
0047   D0D8                 db 030h, 030h, 030h, 030h, 030h, 030h, 030h, 030h
0047   D0D8 3030303030303030
0048   D0E0                 db 018h, 018h, 00Ch, 00Dh, 00Ch, 006h, 016h, 016h
0048   D0E0 18180C0D0C061616
0049   D0E8                 db 034h, 034h, 038h, 018h, 018h, 018h, 018h, 018h
0049   D0E8 3434381818181818
0050   D0F0                 db 007h, 000h, 003h, 000h, 007h, 000h, 000h, 000h
0050   D0F0 0700030007000000
0051   D0F8                 db 025h, 0A9h, 0B1h, 0A9h, 025h, 000h, 000h, 000h
0051   D0F8 25A9B1A925000000
0052   D100                 db 02Fh, 029h, 069h, 0A9h, 029h, 000h, 000h, 000h
0052   D100 2F2969A929000000
0053   D108                 db 04Bh, 04Ah, 05Ah, 06Bh, 04Ah, 000h, 000h, 000h
0053   D108 4B4A5A6B4A000000
0054   D110                 db 08Ch, 052h, 052h, 092h, 00Ch, 000h, 000h, 000h
0054   D110 8C5252920C000000
0055   D118                 db 0E4h, 095h, 0E6h, 095h, 0E4h, 000h, 000h, 000h
0055   D118 E495E695E4000000
0056   D120                 db 098h, 024h, 024h, 03Ch, 0A4h, 000h, 000h, 000h
0056   D120 9824243CA4000000
0057   D128                 db 068h, 06Ch, 06Ch, 05Ch, 058h, 018h, 018h, 018h
0057   D128 686C6C5C58181818
0058   D130                 db 00Ch, 00Ch, 00Ch, 00Ch, 02Ch, 02Ch, 034h, 034h
0058   D130 0C0C0C0C2C2C3434
0059   D138                 db 018h, 030h, 030h, 030h, 030h, 034h, 074h, 064h
0059   D138 1830303030347464
0060   D140                 db 016h, 016h, 016h, 016h, 016h, 016h, 006h, 006h
0060   D140 1616161616160606
0061   D148                 db 066h, 06Fh, 06Fh, 06Dh, 06Fh, 066h, 066h, 066h
0061   D148 666F6F6D6F666666
0062   D150                 db 060h, 030h, 030h, 030h, 030h, 030h, 030h, 030h
0062   D150 6030303030303030
0063   D158                 db 018h, 018h, 00Ch, 00Fh, 003h, 000h, 000h, 000h
0063   D158 18180C0F03000000
0064   D160                 db 008h, 003h, 01Fh, 0FCh, 0E1h, 000h, 000h, 000h
0064   D160 08031FFCE1000000
0065   D168                 db 000h, 0F8h, 0E0h, 01Fh, 0FFh, 070h, 000h, 000h
0065   D168 00F8E01FFF700000
0066   D170                 db 000h, 003h, 07Fh, 0FEh, 081h, 007h, 000h, 000h
0066   D170 00037FFE81070000
0067   D178                 db 000h, 0FFh, 0FFh, 000h, 0FEh, 080h, 000h, 000h
0067   D178 00FFFF00FE800000
0068   D180                 db 000h, 080h, 0FFh, 07Fh, 000h, 000h, 000h, 000h
0068   D180 0080FF7F00000000
0069   D188                 db 018h, 018h, 030h, 0F0h, 0C0h, 000h, 000h, 000h
0069   D188 181830F0C0000000
0070   D190             
0071   D190             inventgraphWidth=32
0072   D190             inventgraphHeight=20
0073   D190             inventgraphMap:  ; size 32 x 20
0074   D190                 db 1, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 3, 4, 5, 6
0074   D190 01020202020303030302020203040506
0075   D1A0                 db 7, 8, 6, 9, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 10
0075   D1A0 0708060902020202030303030202020A
0076   D1B0                 db 11, 151, 12, 13, 14, 15, 16, 17, 18, 11, 11, 158, 11, 11, 158, 11
0076   D1B0 0B970C0D0E0F1011120B0B9E0B0B9E0B
0077   D1C0                 db 11, 158, 11, 19, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 3
0077   D1C0 0B9E0B13020202030303030202020203
0078   D1D0                 db 4, 5, 6, 20, 2, 2, 2, 2, 2, 3, 3, 3, 21, 2, 2, 2
0078   D1D0 04050614020202020203030315020202
0079   D1E0                 db 2, 2, 22, 23, 135, 24, 25, 26, 27, 28, 29, 13, 30, 11, 135, 31
0079   D1E0 020216178718191A1B1C1D0D1E0B871F
0080   D1F0                 db 16, 32, 33, 34, 35, 36, 37, 38, 143, 11, 142, 39, 40, 143, 11, 142
0080   D1F0 10202122232425268F0B8E27288F0B8E
0081   D200                 db 41, 42, 143, 11, 142, 43, 11, 143, 11, 142, 11, 11, 143, 11, 142, 11
0081   D200 292A8F0B8E2B0B8F0B8E0B0B8F0B8E0B
0082   D210                 db 11, 143, 11, 142, 11, 44, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3
0082   D210 0B8F0B8E0B2C02020203030303030303
0083   D220                 db 3, 2, 2, 2, 2, 22, 142, 11, 45, 136, 46, 47, 48, 49, 50, 51
0083   D220 0302020202168E0B2D882E2F30313233
0084   D230                 db 52, 53, 142, 11, 54, 143, 55, 142, 11, 56, 143, 57, 142, 11, 42, 143
0084   D230 34358E0B368F378E0B388F398E0B2A8F
0085   D240                 db 58, 142, 11, 11, 143, 11, 142, 11, 59, 2, 2, 2, 2, 3, 3, 3
0085   D240 3A8E0B0B8F0B8E0B3B02020202030303
0086   D250                 db 3, 3, 3, 2, 2, 2, 2, 2, 60, 61, 62, 63, 64, 2, 2, 2
0086   D250 03030302020202023C3D3E3F40020202
0087   D260                 db 2, 3, 3, 3, 3, 2, 2, 65
0087   D260 0203030303020241
0088   D268 80              db 128
0089   D269             
0090   D269             ; maps tails
0091   D269             ;   1,  2,  2,  2,  2,  3,  3,  3,  3,  2,  2,  2,  3,  4,  5,  6,  7,  8,  6,  9,  2,  2,  2,  2,  3,  3,  3,  3,  2,  2,  2, 10,
0092   D269             ;  11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 12, 13, 14, 15, 16, 17, 18, 11,
0093   D269             ;  11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,
0094   D269             ;  11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,
0095   D269             ;  11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,
0096   D269             ;  19,  2,  2,  2,  3,  3,  3,  3,  2,  2,  2,  2,  3,  4,  5,  6, 20,  2,  2,  2,  2,  2,  3,  3,  3, 21,  2,  2,  2,  2,  2, 22,
0097   D269             ;  23,  0,  0,  0,  0,  0,  0,  0, 24, 25, 26, 27, 28, 29, 13, 30, 11,  0,  0,  0,  0,  0,  0,  0, 31, 16, 32, 33, 34, 35, 36, 37,
0098   D269             ;  38,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 39,
0099   D269             ;  40,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 41,
0100   D269             ;  42,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 43,
0101   D269             ;  11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,
0102   D269             ;  11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,
0103   D269             ;  11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,
0104   D269             ;  44,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  2,  2,  2,  2, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,
0105   D269             ;  45,  0,  0,  0,  0,  0,  0,  0,  0, 46, 47, 48, 49, 50, 51, 52, 53,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,
0106   D269             ;  54,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 55,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,
0107   D269             ;  56,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 57,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,
0108   D269             ;  42,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 58,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,
0109   D269             ;  11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,
0110   D269             ;  59,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  2,  2,  2,  2,  2, 60, 61, 62, 63, 64,  2,  2,  2,  2,  3,  3,  3,  3,  2,  2, 65,
0111   D269             
0112   D269             ; tail using
0113   D269             ;    1,  53,  53,  53,  53,  35,  35,  35,  35,  53,  53,  53,  35,   2,   2,   3,   1,   1,   3,   1,  53,  53,  53,  53,  35,  35,  35,  35,  53,  53,  53,   1,
0114   D269             ;   29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,   1,   2,   1,   1,   2,   1,   1,  29,
0115   D269             ;   29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29,
0116   D269             ;   29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29,
0117   D269             ;   29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29,
0118   D269             ;    1,  53,  53,  53,  35,  35,  35,  35,  53,  53,  53,  53,  35,   2,   2,   3,   1,  53,  53,  53,  53,  53,  35,  35,  35,   1,  53,  53,  53,  53,  53,   2,
0119   D269             ;    1, 454, 454, 454, 454, 454, 454, 454,   1,   1,   1,   1,   1,   1,   2,   1,  29, 454, 454, 454, 454, 454, 454, 454,   1,   2,   1,   1,   1,   1,   1,   1,
0120   D269             ;    1, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,   1,
0121   D269             ;    1, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,   1,
0122   D269             ;    2, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,   1,
0123   D269             ;   29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29,
0124   D269             ;   29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29,
0125   D269             ;   29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29,
0126   D269             ;    1,  53,  53,  53,  35,  35,  35,  35,  35,  35,  35,  35,  53,  53,  53,  53,   2, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29,
0127   D269             ;    1, 454, 454, 454, 454, 454, 454, 454, 454,   1,   1,   1,   1,   1,   1,   1,   1, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29,
0128   D269             ;    1, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,   1, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29,
0129   D269             ;    1, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,   1, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29,
0130   D269             ;    2, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,   1, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29,
0131   D269             ;   29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454, 454,  29,
0132   D269             ;    1,  53,  53,  53,  53,  35,  35,  35,  35,  35,  35,  53,  53,  53,  53,  53,   1,   1,   1,   1,   1,  53,  53,  53,  53,  35,  35,  35,  35,  53,  53,   1,
0133   D269             
0001   D269                 ; 3 const int KEY_UP = 1;
0002   D269                 ; 4 const int KEY_DOWN = 2;
0003   D269                 ; 5 const int KEY_LEFT = 4;
0004   D269                 ; 6 const int KEY_RIGHT = 8;
0005   D269                 ; 7 const int KEY_FIRE = 16;
0006   D269                 ; 9 const int secondWeaponBwAddrForPict = 0x4042;
0007   D269                 ; 10 const int secondWeaponClAddrForPict = 0x5842;
0008   D269                 ; 11 const int secondWeaponCount = 9;
0009   D269                 ; 12 const int secondWeaponTextPos = 35 * 256 + 19;
0010   D269                 ; 13 const int secondWeaponTextInactiveColor = 0x41;
0011   D269                 ; 14 const int secondWeaponTextActiveColor = 0x47;
0012   D269                 ; 15 const int itemsPos = 7 * 8 * 256 + 16;
0013   D269                 ; 16 const int itemsCursorPos = 7 * 8 * 256 + 9;
0014   D269                 ; 17 const int itemsCursorColor = 0x43;
0015   D269                 ; 18 const int lutPos = 7 * 8 * 256 + 144;
0016   D269                 ; 20 uint8_t secondWeapon = 4;
0017   D269 04          secondWeapon db 4
0018   D26A                 ; 21 uint8_t selectedItem = 0;
0019   D26A 00          selectedItem db 0
0020   D26B                 ; 23 void invent()
0021   D26B             invent: 
0022   D26B                 ; 24 {
0023   D26B                 ; 25 gBeginDraw();
0024   D26B CD 8A 60        call gBeginDraw
0025   D26E                 ; 27 // Очистка экрана
0026   D26E                 ; 28 hl = 0x4000;
0027   D26E 21 00 40        ld   hl, 16384
0028   D271                 ; 29 *hl = l;
0029   D271 75              ld   (hl), l
0030   D272                 ; 30 ldir(hl, de = 0x4001, bc = [32 * 64 * 2 + 32 * 4 - 1]);
0031   D272 11 01 40        ld   de, 16385
0032   D275 01 7F 10        ld   bc, 4223
0033   D278 ED B0           ldir
0034   D27A                 ; 31 a = 7;
0035   D27A 3E 07           ld   a, 7
0036   D27C                 ; 32 do
0037   D27C             l16000: 
0038   D27C                 ; 33 {
0039   D27C                 ; 34 (hl = [32 * 4]) += de;
0040   D27C 21 80 00        ld   hl, 128
0041   D27F 19              add  hl, de
0042   D280                 ; 35 ex(hl, de);
0043   D280 EB              ex de, hl
0044   D281                 ; 36 ldir(hl = 0x4000, de, bc = [32 * 4]);
0045   D281 21 00 40        ld   hl, 16384
0046   D284 01 80 00        ld   bc, 128
0047   D287 ED B0           ldir
0048   D289                 ; 37 } while(flag_nz --a);
0049   D289 3D              dec  a
0050   D28A C2 7C D2        jp   nz, l16000
0051   D28D             l16001: 
0052   D28D                 ; 39 // Заливаем одним цветом
0053   D28D                 ; 40 hl = 0x5800;
0054   D28D 21 00 58        ld   hl, 22528
0055   D290                 ; 41 *hl = 0x44;
0056   D290 36 44           ld   (hl), 68
0057   D292                 ; 42 ldir(hl, de = 0x5801, bc = [32 * 20 - 1]);
0058   D292 11 01 58        ld   de, 22529
0059   D295 01 7F 02        ld   bc, 639
0060   D298 ED B0           ldir
0061   D29A                 ; 44 // Рисуем
0062   D29A                 ; 45 bc = 0x4000;
0063   D29A 01 00 40        ld   bc, 16384
0064   D29D                 ; 46 de = &inventgraphMap;
0065   D29D 11 90 D1        ld   de, inventgraphMap
0066   D2A0                 ; 47 while()
0067   D2A0             l16002: 
0068   D2A0                 ; 48 {
0069   D2A0                 ; 49 inventBlank2:
0070   D2A0             inventBlank2: 
0071   D2A0                 ; 50 a = *de; de++;
0072   D2A0 1A              ld   a, (de)
0073   D2A1 13              inc  de
0074   D2A2                 ; 51 if (a >= 128)
0075   D2A2 FE 80           cp   128
0076   D2A4                 ; 52 {
0077   D2A4 DA B8 D2        jp   c, l16004
0078   D2A7                 ; 53 if (flag_z) break;
0079   D2A7 CA EF D2        jp   z, l16003
0080   D2AA                 ; 54 a -= 128;
0081   D2AA D6 80           sub  128
0082   D2AC                 ; 55 c = (a += c);
0083   D2AC 81              add  c
0084   D2AD 4F              ld   c, a
0085   D2AE                 ; 56 if (flag_c) b = ((a = b) += 8);
0086   D2AE D2 B5 D2        jp   nc, l16005
0087   D2B1 78              ld   a, b
0088   D2B2 C6 08           add  8
0089   D2B4 47              ld   b, a
0090   D2B5                 ; 57 continue;
0091   D2B5             l16005: 
0092   D2B5 C3 A0 D2        jp l16002
0093   D2B8                 ; 58 }
0094   D2B8                 ; 59 // Вычисление адреса
0095   D2B8                 ; 60 a += a += a;
0096   D2B8             l16004: 
0097   D2B8 87              add  a
0098   D2B9 87              add  a
0099   D2BA                 ; 61 l = (a += [&inventgraphTails >> 1]);
0100   D2BA C6 C0           add  (inventgraphTails) >> (1)
0101   D2BC 6F              ld   l, a
0102   D2BD                 ; 62 h = ((a +@= [&inventgraphTails >> 9]) -= l);
0103   D2BD CE 67           adc  (inventgraphTails) >> (9)
0104   D2BF 95              sub  l
0105   D2C0 67              ld   h, a
0106   D2C1                 ; 63 hl += hl;
0107   D2C1 29              add  hl, hl
0108   D2C2                 ; 64 // Запись
0109   D2C2                 ; 65 *bc = a = *hl; l++; b++; // Тайлы не пересекают 256-байтную страницу
0110   D2C2 7E              ld   a, (hl)
0111   D2C3 02              ld   (bc), a
0112   D2C4 2C              inc  l
0113   D2C5 04              inc  b
0114   D2C6                 ; 66 *bc = a = *hl; l++; b++;
0115   D2C6 7E              ld   a, (hl)
0116   D2C7 02              ld   (bc), a
0117   D2C8 2C              inc  l
0118   D2C9 04              inc  b
0119   D2CA                 ; 67 *bc = a = *hl; l++; b++;
0120   D2CA 7E              ld   a, (hl)
0121   D2CB 02              ld   (bc), a
0122   D2CC 2C              inc  l
0123   D2CD 04              inc  b
0124   D2CE                 ; 68 *bc = a = *hl; l++; b++;
0125   D2CE 7E              ld   a, (hl)
0126   D2CF 02              ld   (bc), a
0127   D2D0 2C              inc  l
0128   D2D1 04              inc  b
0129   D2D2                 ; 69 *bc = a = *hl; l++; b++;
0130   D2D2 7E              ld   a, (hl)
0131   D2D3 02              ld   (bc), a
0132   D2D4 2C              inc  l
0133   D2D5 04              inc  b
0134   D2D6                 ; 70 *bc = a = *hl; l++; b++;
0135   D2D6 7E              ld   a, (hl)
0136   D2D7 02              ld   (bc), a
0137   D2D8 2C              inc  l
0138   D2D9 04              inc  b
0139   D2DA                 ; 71 *bc = a = *hl; l++; b++;
0140   D2DA 7E              ld   a, (hl)
0141   D2DB 02              ld   (bc), a
0142   D2DC 2C              inc  l
0143   D2DD 04              inc  b
0144   D2DE                 ; 72 *bc = a = *hl;
0145   D2DE 7E              ld   a, (hl)
0146   D2DF 02              ld   (bc), a
0147   D2E0                 ; 73 // Следующий адрес
0148   D2E0                 ; 74 b = ((a = b) -= 7);
0149   D2E0 78              ld   a, b
0150   D2E1 D6 07           sub  7
0151   D2E3 47              ld   b, a
0152   D2E4                 ; 75 c++;
0153   D2E4 0C              inc  c
0154   D2E5                 ; 76 if (flag_z) b = ((a = b) += 8);
0155   D2E5 C2 EC D2        jp   nz, l16006
0156   D2E8 78              ld   a, b
0157   D2E9 C6 08           add  8
0158   D2EB 47              ld   b, a
0159   D2EC                 ; 77 }
0160   D2EC             l16006: 
0161   D2EC C3 A0 D2        jp   l16002
0162   D2EF             l16003: 
0163   D2EF                 ; 79 // Пиктограммы второго оружия
0164   D2EF                 ; 80 bc = secondWeaponBwAddrForPict; //0x4042;
0165   D2EF 01 42 40        ld   bc, 16450
0166   D2F2                 ; 81 hl = secondWeaponClAddrForPict; //0x5842;
0167   D2F2 21 42 58        ld   hl, 22594
0168   D2F5                 ; 82 d = 0;
0169   D2F5 16 00           ld   d, 0
0170   D2F7                 ; 83 do
0171   D2F7             l16007: 
0172   D2F7                 ; 84 {
0173   D2F7                 ; 85 push(bc, de)
0174   D2F7                 ; 86 {
0175   D2F7 C5              push bc
0176   D2F8 D5              push de
0177   D2F9                 ; 87 push(hl)
0178   D2F9                 ; 88 {
0179   D2F9 E5              push hl
0180   D2FA                 ; 89 h = 0; l = d;
0181   D2FA 26 00           ld   h, 0
0182   D2FC 6A              ld   l, d
0183   D2FD                 ; 90 hl += hl += hl; de = hl; (hl += hl += hl += hl) += de; hl += (de = &magic_0); ex(hl, de); // *36
0184   D2FD 29              add  hl, hl
0185   D2FE 29              add  hl, hl
0186   D2FF 54              ld   d, h
0187   D300 5D              ld   e, l
0188   D301 29              add  hl, hl
0189   D302 29              add  hl, hl
0190   D303 29              add  hl, hl
0191   D304 19              add  hl, de
0192   D305 11 30 D5        ld   de, magic_0
0193   D308 19              add  hl, de
0194   D309 EB              ex de, hl
0195   D30A                 ; 91 }
0196   D30A E1              pop  hl
0197   D30B                 ; 92 push(hl)
0198   D30B                 ; 93 {
0199   D30B E5              push hl
0200   D30C                 ; 94 drawSprite4(bc, hl, de);
0201   D30C CD 53 CA        call drawSprite4
0202   D30F                 ; 95 }
0203   D30F E1              pop  hl
0204   D310                 ; 96 }
0205   D310 D1              pop  de
0206   D311 C1              pop  bc
0207   D312                 ; 97 l = ((a = l) += 3); c = l;
0208   D312 7D              ld   a, l
0209   D313 C6 03           add  3
0210   D315 6F              ld   l, a
0211   D316 4D              ld   c, l
0212   D317                 ; 98 d++;
0213   D317 14              inc  d
0214   D318                 ; 99 } while((a = d) < secondWeaponCount);
0215   D318 7A              ld   a, d
0216   D319 FE 09           cp   9
0217   D31B DA F7 D2        jp   c, l16007
0218   D31E             l16008: 
0219   D31E                 ; 101 // Кол-во второго оружия
0220   D31E                 ; 102 b = secondWeaponCount;
0221   D31E 06 09           ld   b, 9
0222   D320                 ; 103 hl = secondWeaponTextPos;
0223   D320 21 13 23        ld   hl, 8979
0224   D323                 ; 104 do
0225   D323             l16009: 
0226   D323                 ; 105 {
0227   D323                 ; 106 push(bc, hl)
0228   D323                 ; 107 {
0229   D323 C5              push bc
0230   D324 E5              push hl
0231   D325                 ; 108 gDrawTextEx(hl, de = "\x1F\x1F\x02", a = secondWeaponTextInactiveColor);
0232   D325 11 C8 D4        ld   de, s16000
0233   D328 3E 41           ld   a, 65
0234   D32A CD 69 60        call gDrawTextEx
0235   D32D                 ; 109 }
0236   D32D E1              pop  hl
0237   D32E C1              pop  bc
0238   D32F                 ; 110 l = ((a = l) += 24);
0239   D32F 7D              ld   a, l
0240   D330 C6 18           add  24
0241   D332 6F              ld   l, a
0242   D333                 ; 111 } while(--b);
0243   D333 10 EE           djnz l16009
0244   D335             l16010: 
0245   D335                 ; 113 // Предметы
0246   D335                 ; 114 b = 5;
0247   D335 06 05           ld   b, 5
0248   D337                 ; 115 hl = itemsPos;
0249   D337 21 10 38        ld   hl, 14352
0250   D33A                 ; 116 do
0251   D33A             l16011: 
0252   D33A                 ; 117 {
0253   D33A                 ; 118 ex(hl, de);
0254   D33A EB              ex de, hl
0255   D33B                 ; 119 getItemOfArray16(hl = &itemNames, --(a = b));
0256   D33B 21 EE C2        ld   hl, itemNames
0257   D33E 78              ld   a, b
0258   D33F 3D              dec  a
0259   D340 CD AB C9        call getItemOfArray16
0260   D343                 ; 120 ex(hl, de);
0261   D343 EB              ex de, hl
0262   D344                 ; 121 push(bc, hl)
0263   D344                 ; 122 {
0264   D344 C5              push bc
0265   D345 E5              push hl
0266   D346                 ; 123 gDrawTextEx(hl, de, a = secondWeaponTextActiveColor);
0267   D346 3E 47           ld   a, 71
0268   D348 CD 69 60        call gDrawTextEx
0269   D34B                 ; 124 }
0270   D34B E1              pop  hl
0271   D34C C1              pop  bc
0272   D34D                 ; 125 h = ((a = h) += 10);
0273   D34D 7C              ld   a, h
0274   D34E C6 0A           add  10
0275   D350 67              ld   h, a
0276   D351                 ; 126 } while(--b);
0277   D351 10 E7           djnz l16011
0278   D353             l16012: 
0279   D353                 ; 128 // ЛУТ
0280   D353                 ; 129 b = 9;
0281   D353 06 09           ld   b, 9
0282   D355                 ; 130 hl = lutPos;
0283   D355 21 90 38        ld   hl, 14480
0284   D358                 ; 131 do
0285   D358             l16013: 
0286   D358                 ; 132 {
0287   D358                 ; 133 ex(hl, de);
0288   D358 EB              ex de, hl
0289   D359                 ; 134 getItemOfArray16(hl = &lutNames, --(a = b));
0290   D359 21 FE C2        ld   hl, lutNames
0291   D35C 78              ld   a, b
0292   D35D 3D              dec  a
0293   D35E CD AB C9        call getItemOfArray16
0294   D361                 ; 135 ex(hl, de);
0295   D361 EB              ex de, hl
0296   D362                 ; 136 push(bc, hl)
0297   D362                 ; 137 {
0298   D362 C5              push bc
0299   D363 E5              push hl
0300   D364                 ; 138 gDrawTextEx(hl, de, a = 0x47);
0301   D364 3E 47           ld   a, 71
0302   D366 CD 69 60        call gDrawTextEx
0303   D369                 ; 139 }
0304   D369 E1              pop  hl
0305   D36A C1              pop  bc
0306   D36B                 ; 140 push(bc, hl)
0307   D36B                 ; 141 {
0308   D36B C5              push bc
0309   D36C E5              push hl
0310   D36D                 ; 142 push(hl)
0311   D36D                 ; 143 {
0312   D36D E5              push hl
0313   D36E                 ; 144 gMeasureText(de = "99"); // Вход: de - текст. Выход: de - текст, a - терминатор, c - ширина в пикселях. Портит: b, hl.
0314   D36E 11 CC D4        ld   de, s16001
0315   D371 CD 72 60        call gMeasureText
0316   D374                 ; 145 }
0317   D374 E1              pop  hl
0318   D375                 ; 146 l = ((a = 248) -= c);
0319   D375 3E F8           ld   a, 248
0320   D377 91              sub  c
0321   D378 6F              ld   l, a
0322   D379                 ; 147 gDrawTextEx(hl, de = "99", a = 0x47);
0323   D379 11 CC D4        ld   de, s16001
0324   D37C 3E 47           ld   a, 71
0325   D37E CD 69 60        call gDrawTextEx
0326   D381                 ; 148 }
0327   D381 E1              pop  hl
0328   D382 C1              pop  bc
0329   D383                 ; 149 h = ((a = h) += 10);
0330   D383 7C              ld   a, h
0331   D384 C6 0A           add  10
0332   D386 67              ld   h, a
0333   D387                 ; 150 } while(--b);
0334   D387 10 CF           djnz l16013
0335   D389             l16014: 
0336   D389                 ; 152 // Основное оружие
0337   D389                 ; 153 drawSprite4(hl = 0x59E1, bc = 0x48E1, de = [&magic_0 + 36]);
0338   D389 21 E1 59        ld   hl, 23009
0339   D38C 01 E1 48        ld   bc, 18657
0340   D38F 11 54 D5        ld   de, (magic_0) + (36)
0341   D392 CD 53 CA        call drawSprite4
0342   D395                 ; 154 gDrawTextEx(hl = [15 * 8 * 256 + 28], de = "Обычное оружие", a = 0x47);
0343   D395 21 1C 78        ld   hl, 30748
0344   D398 11 E0 D4        ld   de, s16002
0345   D39B 3E 47           ld   a, 71
0346   D39D CD 69 60        call gDrawTextEx
0347   D3A0                 ; 155 gDrawTextEx(hl = [(15 * 8 + 9) * 256 + 28], de = "\x16\x17\x18\x15\x19\x1A\x1B\x02", a = 0x46);
0348   D3A0 21 1C 81        ld   hl, 33052
0349   D3A3 11 B6 D4        ld   de, s16003
0350   D3A6 3E 46           ld   a, 70
0351   D3A8 CD 69 60        call gDrawTextEx
0352   D3AB                 ; 157 // Защита
0353   D3AB                 ; 158 drawSprite4(hl = 0x5A21, bc = 0x5021, de = [&magic_0 + 36 * 3]);
0354   D3AB 21 21 5A        ld   hl, 23073
0355   D3AE 01 21 50        ld   bc, 20513
0356   D3B1 11 9C D5        ld   de, (magic_0) + (108)
0357   D3B4 CD 53 CA        call drawSprite4
0358   D3B7                 ; 159 gDrawTextEx(hl = [17 * 8 * 256 + 28], de = "Обычная защита", a = 0x47);
0359   D3B7 21 1C 88        ld   hl, 34844
0360   D3BA 11 D1 D4        ld   de, s16004
0361   D3BD 3E 47           ld   a, 71
0362   D3BF CD 69 60        call gDrawTextEx
0363   D3C2                 ; 160 gDrawTextEx(hl = [(17 * 8 + 9) * 256 + 28], de = "\x1A\x1B\x1C\x15\x1D\x1E\x1F\x02", a = 0x46);
0364   D3C2 21 1C 91        ld   hl, 37148
0365   D3C5 11 BF D4        ld   de, s16005
0366   D3C8 3E 46           ld   a, 70
0367   D3CA CD 69 60        call gDrawTextEx
0368   D3CD                 ; 162 // Ключ
0369   D3CD                 ; 163 drawSprite4(hl = 0x5A2E, bc = 0x502E, de = [&magic_0 + 36 * 9]);
0370   D3CD 21 2E 5A        ld   hl, 23086
0371   D3D0 01 2E 50        ld   bc, 20526
0372   D3D3 11 74 D6        ld   de, (magic_0) + (324)
0373   D3D6 CD 53 CA        call drawSprite4
0374   D3D9                 ; 165 drawSecondWeaponCursor(ixh = 0x47);
0375   D3D9 DD 26 47        ld   ixh, 71
0376   D3DC CD 71 D4        call drawSecondWeaponCursor
0377   D3DF                 ; 167 drawItemCursor();
0378   D3DF CD 3A D4        call drawItemCursor
0379   D3E2                 ; 169 gEndDraw();
0380   D3E2 CD 8D 60        call gEndDraw
0381   D3E5                 ; 171 while()
0382   D3E5             l16015: 
0383   D3E5                 ; 172 {
0384   D3E5                 ; 173 hl = &gKeyTrigger;
0385   D3E5 21 B9 60        ld   hl, gKeyTrigger
0386   D3E8                 ; 174 a = *hl;
0387   D3E8 7E              ld   a, (hl)
0388   D3E9                 ; 175 *hl = 0;
0389   D3E9 36 00           ld   (hl), 0
0390   D3EB                 ; 176 if (a & KEY_LEFT)
0391   D3EB CB 57           bit  2, a
0392   D3ED                 ; 177 {
0393   D3ED CA FE D3        jp   z, l16017
0394   D3F0                 ; 178 a = secondWeapon;
0395   D3F0 3A 69 D2        ld   a, (secondWeapon)
0396   D3F3                 ; 179 a-=1;
0397   D3F3 D6 01           sub  1
0398   D3F5                 ; 180 if (flag_c) continue;
0399   D3F5 DA E5 D3        jp   c, l16015
0400   D3F8                 ; 181 setSecondWeapon(a);
0401   D3F8 CD 5C D4        call setSecondWeapon
0402   D3FB                 ; 182 }
0403   D3FB                 ; 183 else if (a & KEY_RIGHT)
0404   D3FB C3 36 D4        jp   l16018
0405   D3FE             l16017: 
0406   D3FE CB 5F           bit  3, a
0407   D400                 ; 184 {
0408   D400 CA 12 D4        jp   z, l16019
0409   D403                 ; 185 a = secondWeapon;
0410   D403 3A 69 D2        ld   a, (secondWeapon)
0411   D406                 ; 186 a++;
0412   D406 3C              inc  a
0413   D407                 ; 187 if (a >= secondWeaponCount) continue;
0414   D407 FE 09           cp   9
0415   D409 D2 E5 D3        jp   nc, l16015
0416   D40C                 ; 188 setSecondWeapon(a);
0417   D40C CD 5C D4        call setSecondWeapon
0418   D40F                 ; 189 }
0419   D40F                 ; 190 else if (a & KEY_UP)
0420   D40F C3 36 D4        jp   l16020
0421   D412             l16019: 
0422   D412 CB 47           bit  0, a
0423   D414                 ; 191 {
0424   D414 CA 25 D4        jp   z, l16021
0425   D417                 ; 192 a = selectedItem;
0426   D417 3A 6A D2        ld   a, (selectedItem)
0427   D41A                 ; 193 a-=1;
0428   D41A D6 01           sub  1
0429   D41C                 ; 194 if (flag_c) continue;
0430   D41C DA E5 D3        jp   c, l16015
0431   D41F                 ; 195 selectItem(a);
0432   D41F CD 50 D4        call selectItem
0433   D422                 ; 196 }
0434   D422                 ; 197 else if (a & KEY_DOWN)
0435   D422 C3 36 D4        jp   l16022
0436   D425             l16021: 
0437   D425 CB 4F           bit  1, a
0438   D427                 ; 198 {
0439   D427 CA 36 D4        jp   z, l16023
0440   D42A                 ; 199 a = selectedItem;
0441   D42A 3A 6A D2        ld   a, (selectedItem)
0442   D42D                 ; 200 a++;
0443   D42D 3C              inc  a
0444   D42E                 ; 201 if (a >= 5) continue; //*(hl = &gPlayerItemsCount)) continue;
0445   D42E FE 05           cp   5
0446   D430 D2 E5 D3        jp   nc, l16015
0447   D433                 ; 202 selectItem(a);
0448   D433 CD 50 D4        call selectItem
0449   D436                 ; 203 }
0450   D436                 ; 204 }
0451   D436             l16023: 
0452   D436             l16022: 
0453   D436             l16020: 
0454   D436             l16018: 
0455   D436 C3 E5 D3        jp   l16015
0456   D439             l16016: 
0457   D439                 ; 205 }
0458   D439 C9              ret
0459   D43A                 ; 207 void drawItemCursor(de)
0460   D43A             drawItemCursor: 
0461   D43A                 ; 208 {
0462   D43A                 ; 209 a = selectedItem;
0463   D43A 3A 6A D2        ld   a, (selectedItem)
0464   D43D                 ; 210 a += a; b = a; (a += a += a) += b; // *10
0465   D43D 87              add  a
0466   D43E 47              ld   b, a
0467   D43F 87              add  a
0468   D440 87              add  a
0469   D441 80              add  b
0470   D442                 ; 211 hl = itemsCursorPos; h = (a += h);
0471   D442 21 09 38        ld   hl, 14345
0472   D445 84              add  h
0473   D446 67              ld   h, a
0474   D447                 ; 212 gDrawTextEx(hl, de = "@", a = itemsCursorColor);
0475   D447 11 CF D4        ld   de, s16006
0476   D44A 3E 43           ld   a, 67
0477   D44C CD 69 60        call gDrawTextEx
0478   D44F                 ; 213 }
0479   D44F C9              ret
0480   D450                 ; 215 void selectItem()
0481   D450             selectItem: 
0482   D450                 ; 216 {
0483   D450                 ; 217 push(a)
0484   D450                 ; 218 {
0485   D450 F5              push af
0486   D451                 ; 219 drawItemCursor();
0487   D451 CD 3A D4        call drawItemCursor
0488   D454                 ; 220 }
0489   D454 F1              pop  af
0490   D455                 ; 221 selectedItem = a;
0491   D455 32 6A D2        ld   (selectedItem), a
0492   D458                 ; 222 drawItemCursor();
0493   D458 CD 3A D4        call drawItemCursor
0494   D45B                 ; 223 }
0495   D45B C9              ret
0496   D45C                 ; 225 void setSecondWeapon(a)
0497   D45C             setSecondWeapon: 
0498   D45C                 ; 226 {
0499   D45C                 ; 227 push(a)
0500   D45C                 ; 228 {
0501   D45C F5              push af
0502   D45D                 ; 229 drawSecondWeaponCursor(ixh = secondWeaponTextInactiveColor);
0503   D45D DD 26 41        ld   ixh, 65
0504   D460 CD 71 D4        call drawSecondWeaponCursor
0505   D463                 ; 230 }
0506   D463 F1              pop  af
0507   D464                 ; 231 secondWeapon = a;
0508   D464 32 69 D2        ld   (secondWeapon), a
0509   D467                 ; 232 drawSecondWeaponCursor(ixh = secondWeaponTextActiveColor);
0510   D467 DD 26 47        ld   ixh, 71
0511   D46A CD 71 D4        call drawSecondWeaponCursor
0512   D46D                 ; 234 return panelDrawSecondWeapon();
0513   D46D C3 0A D5        jp   panelDrawSecondWeapon
0514   D470                 ; 235 }
0515   D470 C9              ret
0516   D471                 ; 237 void drawSecondWeaponCursor(ixh)
0517   D471             drawSecondWeaponCursor: 
0518   D471                 ; 238 {
0519   D471                 ; 239 // Курсор
0520   D471                 ; 240 a = secondWeapon;
0521   D471 3A 69 D2        ld   a, (secondWeapon)
0522   D474                 ; 241 b = a; (a += a) += b;
0523   D474 47              ld   b, a
0524   D475 87              add  a
0525   D476 80              add  b
0526   D477                 ; 242 hl = [secondWeaponBwAddrForPict - 0x21]; l = (a += l);
0527   D477 21 21 40        ld   hl, 16417
0528   D47A 85              add  l
0529   D47B 6F              ld   l, a
0530   D47C                 ; 243 b = [(secondWeaponClAddrForPict - 0x21) >> 8]; c = l;
0531   D47C 06 58           ld   b, 88
0532   D47E 4D              ld   c, l
0533   D47F                 ; 244 de = &magic_10;
0534   D47F 11 98 D6        ld   de, magic_10
0535   D482                 ; 245 drawSpriteXor(bc, hl, de);
0536   D482 CD 6D CA        call drawSpriteXor
0537   D485                 ; 246 drawSpriteXor(bc, hl, de);
0538   D485 CD 6D CA        call drawSpriteXor
0539   D488                 ; 247 drawSpriteXor(bc, hl, de);
0540   D488 CD 6D CA        call drawSpriteXor
0541   D48B                 ; 248 drawSpriteXor(bc, hl, de);
0542   D48B CD 6D CA        call drawSpriteXor
0543   D48E                 ; 249 ixl = 2;
0544   D48E DD 2E 02        ld   ixl, 2
0545   D491                 ; 250 do
0546   D491             l16024: 
0547   D491                 ; 251 {
0548   D491                 ; 252 l = ((a = l) += [0x20 - 4]); c = l;
0549   D491 7D              ld   a, l
0550   D492 C6 1C           add  28
0551   D494 6F              ld   l, a
0552   D495 4D              ld   c, l
0553   D496                 ; 253 drawSpriteXor(bc, hl, de);
0554   D496 CD 6D CA        call drawSpriteXor
0555   D499                 ; 254 l++; l++; c = l;
0556   D499 2C              inc  l
0557   D49A 2C              inc  l
0558   D49B 4D              ld   c, l
0559   D49C                 ; 255 drawSpriteXor(bc, hl, de);
0560   D49C CD 6D CA        call drawSpriteXor
0561   D49F                 ; 256 } while (flag_nz --ixl);
0562   D49F DD 2D           dec  ixl
0563   D4A1 C2 91 D4        jp   nz, l16024
0564   D4A4             l16025: 
0565   D4A4                 ; 257 l = ((a = l) += [0x20 - 4]); c = l;
0566   D4A4 7D              ld   a, l
0567   D4A5 C6 1C           add  28
0568   D4A7 6F              ld   l, a
0569   D4A8 4D              ld   c, l
0570   D4A9                 ; 258 drawSpriteXor(bc, hl, de);
0571   D4A9 CD 6D CA        call drawSpriteXor
0572   D4AC                 ; 259 drawSpriteXor(bc, hl, de);
0573   D4AC CD 6D CA        call drawSpriteXor
0574   D4AF                 ; 260 drawSpriteXor(bc, hl, de);
0575   D4AF CD 6D CA        call drawSpriteXor
0576   D4B2                 ; 261 drawSpriteXor(bc, hl, de);
0577   D4B2 CD 6D CA        call drawSpriteXor
0578   D4B5                 ; 262 }
0579   D4B5 C9              ret
0580   D4B6                 ; strings
0581   D4B6             s16003 db 22,23,24,21,25,26,27,2,0
0581   D4B6 16171815191A1B0200
0582   D4BF             s16005 db 26,27,28,21,29,30,31,2,0
0582   D4BF 1A1B1C151D1E1F0200
0583   D4C8 1F 1F 02 00 s16000 db 31,31,2,0
0584   D4CC 39 39 00    s16001 db "99",0
0585   D4CF 40 00       s16006 db "@",0
0586   D4D1             s16004 db "Обычная защита",0
0586   D4D1 CEE1FBF7EDE0FF20E7E0F9E8F2E000
0587   D4E0             s16002 db "Обычное оружие",0
0587   D4E0 CEE1FBF7EDEEE520EEF0F3E6E8E500
0588   D4EF             
0001   D4EF                 ; 3 const int gPanelX = 0;
0002   D4EF                 ; 4 const int gPanelY = 20;
0003   D4EF                 ; 6 void panelFullRedraw()
0004   D4EF             panelFullRedraw: 
0005   D4EF                 ; 7 {
0006   D4EF                 ; 8 gDrawImage(de = [0x5800 + gPanelX + (gPanelY << 5)], hl = &image_panelgraph);
0007   D4EF 11 80 5A        ld   de, 23168
0008   D4F2 21 F9 CA        ld   hl, image_panelgraph
0009   D4F5 CD 6F 60        call gDrawImage
0010   D4F8                 ; 9 panelDrawSecondWeapon();
0011   D4F8 CD 0A D5        call panelDrawSecondWeapon
0012   D4FB                 ; 10 }
0013   D4FB C9              ret
0014   D4FC                 ; 12 void deMulA36(a) // a должно быть меньше 16
0015   D4FC             deMulA36: 
0016   D4FC                 ; 13 {
0017   D4FC                 ; 14 a += a += a;
0018   D4FC 87              add  a
0019   D4FD 87              add  a
0020   D4FE                 ; 15 c = a;
0021   D4FE 4F              ld   c, a
0022   D4FF                 ; 16 a += a += a;
0023   D4FF 87              add  a
0024   D500 87              add  a
0025   D501                 ; 17 l = a; h = 0; b = h;
0026   D501 6F              ld   l, a
0027   D502 26 00           ld   h, 0
0028   D504 44              ld   b, h
0029   D505                 ; 18 hl += hl += bc += de;
0030   D505 29              add  hl, hl
0031   D506 09              add  hl, bc
0032   D507 19              add  hl, de
0033   D508                 ; 19 ex(hl, de);
0034   D508 EB              ex de, hl
0035   D509                 ; 20 }
0036   D509 C9              ret
0037   D50A                 ; 22 void panelDrawSecondWeapon()
0038   D50A             panelDrawSecondWeapon: 
0039   D50A                 ; 23 {
0040   D50A                 ; 24 deMulA36(a = secondWeapon, de = &magic_0);
0041   D50A 3A 69 D2        ld   a, (secondWeapon)
0042   D50D 11 30 D5        ld   de, magic_0
0043   D510 CD FC D4        call deMulA36
0044   D513                 ; 25 drawSprite4(hl = 0x5AB8, bc = 0x50B8, de);
0045   D513 21 B8 5A        ld   hl, 23224
0046   D516 01 B8 50        ld   bc, 20664
0047   D519 CD 53 CA        call drawSprite4
0048   D51C                 ; 26 return panelDrawSecondWeaponCount();
0049   D51C C3 20 D5        jp   panelDrawSecondWeaponCount
0050   D51F                 ; 27 }
0051   D51F C9              ret
0052   D520                 ; 29 void panelDrawSecondWeaponCount()
0053   D520             panelDrawSecondWeaponCount: 
0054   D520                 ; 30 {
0055   D520                 ; 31 gDrawTextEx(hl = [24 * 8 + 3 + 186 * 256], de = "\x1F\x1F\x02", a = [0x40 + 1 * 8 + 7]);
0056   D520 21 C3 BA        ld   hl, 47811
0057   D523 11 2C D5        ld   de, s21000
0058   D526 3E 4F           ld   a, 79
0059   D528 CD 69 60        call gDrawTextEx
0060   D52B                 ; 32 }
0061   D52B C9              ret
0062   D52C                 ; strings
0063   D52C 1F 1F 02 00 s21000 db 31,31,2,0
0064   D530             
0001   D530             magic_0:  ; 0
0002   D530                 db 001h, 007h, 01Fh, 006h, 001h, 000h, 000h, 003h, 046h
0002   D530 01071F060100000346
0003   D539                 db 080h, 0C0h, 040h, 040h, 080h, 030h, 0F8h, 0E8h, 047h
0003   D539 80C040408030F8E847
0004   D542                 db 000h, 000h, 001h, 007h, 01Fh, 006h, 001h, 000h, 006h
0004   D542 000001071F06010006
0005   D54B                 db 0C8h, 030h, 080h, 0C0h, 040h, 040h, 080h, 000h, 007h
0005   D54B C83080C04040800007
0006   D554             magic_1:  ; 0
0007   D554                 db 000h, 000h, 003h, 007h, 00Fh, 01Fh, 03Ch, 07Fh, 045h
0007   D554 000003070F1F3C7F45
0008   D55D                 db 000h, 000h, 0C0h, 0F0h, 0C0h, 000h, 000h, 080h, 005h
0008   D55D 0000C0F0C000008005
0009   D566                 db 00Fh, 001h, 013h, 01Fh, 00Fh, 00Eh, 008h, 000h, 047h
0009   D566 0F01131F0F0E080047
0010   D56F                 db 0F0h, 0FCh, 0C0h, 0F0h, 0C0h, 000h, 000h, 000h, 007h
0010   D56F F0FCC0F0C000000007
0011   D578             magic_2:  ; 0
0012   D578                 db 000h, 000h, 007h, 00Fh, 01Fh, 01Fh, 019h, 009h, 041h
0012   D578 0000070F1F1F190941
0013   D581                 db 000h, 000h, 0E0h, 0F0h, 0F8h, 0F8h, 098h, 090h, 041h
0013   D581 0000E0F0F8F8989041
0014   D58A                 db 00Fh, 006h, 007h, 004h, 003h, 000h, 000h, 000h, 041h
0014   D58A 0F0607040300000041
0015   D593                 db 0F0h, 060h, 0E0h, 020h, 0C0h, 000h, 000h, 000h, 041h
0015   D593 F060E020C000000041
0016   D59C             magic_3:  ; 0
0017   D59C                 db 003h, 00Ch, 010h, 038h, 04Eh, 04Fh, 087h, 087h, 043h
0017   D59C 030C10384E4F878743
0018   D5A5                 db 0C0h, 030h, 008h, 01Ch, 072h, 0F2h, 0E1h, 0E1h, 043h
0018   D5A5 C030081C72F2E1E143
0019   D5AE                 db 08Fh, 0BFh, 07Fh, 043h, 023h, 011h, 00Dh, 003h, 003h
0019   D5AE 8FBF7F4323110D0303
0020   D5B7                 db 0F1h, 0FDh, 0FEh, 0C2h, 0C4h, 088h, 0B0h, 0C0h, 003h
0020   D5B7 F1FDFEC2C488B0C003
0021   D5C0             magic_4:  ; 0
0022   D5C0                 db 000h, 004h, 012h, 012h, 036h, 036h, 077h, 067h, 042h
0022   D5C0 000412123636776742
0023   D5C9                 db 000h, 080h, 080h, 0C4h, 0C4h, 0E6h, 073h, 07Bh, 046h
0023   D5C9 008080C4C4E6737B46
0024   D5D2                 db 009h, 044h, 026h, 033h, 073h, 063h, 066h, 036h, 056h
0024   D5D2 094426337363663656
0025   D5DB                 db 03Fh, 0BFh, 09Eh, 09Eh, 03Ch, 03Ch, 078h, 0E0h, 056h
0025   D5DB 3FBF9E9E3C3C78E056
0026   D5E4             magic_5:  ; 0
0027   D5E4                 db 000h, 008h, 018h, 030h, 064h, 06Dh, 0C8h, 0DAh, 004h
0027   D5E4 00081830646DC8DA04
0028   D5ED                 db 000h, 010h, 018h, 00Ch, 026h, 0B6h, 013h, 05Bh, 044h
0028   D5ED 0010180C26B6135B44
0029   D5F6                 db 0DAh, 0C8h, 06Dh, 064h, 030h, 018h, 008h, 000h, 044h
0029   D5F6 DAC86D643018080044
0030   D5FF                 db 05Bh, 013h, 0B6h, 026h, 00Ch, 018h, 010h, 000h, 004h
0030   D5FF 5B13B6260C18100004
0031   D608             magic_6:  ; 0
0032   D608                 db 002h, 009h, 029h, 019h, 079h, 005h, 082h, 07Ch, 045h
0032   D608 020929197905827C45
0033   D611                 db 080h, 020h, 028h, 030h, 03Ch, 040h, 082h, 07Ch, 047h
0033   D611 802028303C40827C47
0034   D61A                 db 082h, 005h, 079h, 019h, 029h, 009h, 002h, 000h, 007h
0034   D61A 820579192909020007
0035   D623                 db 082h, 040h, 03Ch, 030h, 028h, 020h, 080h, 000h, 005h
0035   D623 82403C302820800005
0036   D62C             magic_7:  ; 0
0037   D62C                 db 000h, 000h, 010h, 010h, 010h, 030h, 031h, 031h, 042h
0037   D62C 000010101030313142
0038   D635                 db 000h, 000h, 004h, 084h, 084h, 08Ch, 08Ch, 08Ch, 002h
0038   D635 00000484848C8C8C02
0039   D63E                 db 069h, 04Bh, 032h, 001h, 000h, 000h, 000h, 000h, 046h
0039   D63E 694B32010000000046
0040   D647                 db 09Ah, 052h, 04Ch, 080h, 000h, 000h, 000h, 000h, 006h
0040   D647 9A524C800000000006
0041   D650             magic_8:  ; 0
0042   D650                 db 000h, 000h, 020h, 030h, 078h, 07Ch, 0C6h, 0C1h, 043h
0042   D650 00002030787CC6C143
0043   D659                 db 000h, 004h, 00Ch, 01Eh, 036h, 043h, 003h, 003h, 042h
0043   D659 00040C1E3643030342
0044   D662                 db 0C0h, 0C0h, 0C2h, 06Ch, 078h, 030h, 020h, 000h, 002h
0044   D662 C0C0C26C7830200002
0045   D66B                 db 083h, 063h, 03Eh, 01Eh, 00Ch, 004h, 000h, 000h, 003h
0045   D66B 83633E1E0C04000003
0046   D674             magic_9:  ; 0
0047   D674                 db 000h, 010h, 06Ch, 092h, 082h, 06Ch, 038h, 010h, 046h
0047   D674 00106C92826C381046
0048   D67D                 db 000h, 010h, 06Ch, 092h, 082h, 06Ch, 038h, 010h, 046h
0048   D67D 00106C92826C381046
0049   D686                 db 010h, 010h, 050h, 070h, 030h, 070h, 050h, 000h, 046h
0049   D686 101050703070500046
0050   D68F                 db 010h, 010h, 050h, 070h, 030h, 070h, 050h, 000h, 046h
0050   D68F 101050703070500046
0051   D698             magic_10:  ; 0
0052   D698                 db 000h, 000h, 000h, 000h, 000h, 000h, 002h, 000h, 047h
0052   D698 000000000000020047
0053   D6A1                 db 000h, 000h, 000h, 000h, 000h, 000h, 0AAh, 000h, 047h
0053   D6A1 000000000000AA0047
0054   D6AA                 db 000h, 000h, 000h, 000h, 000h, 000h, 0AAh, 000h, 047h
0054   D6AA 000000000000AA0047
0055   D6B3                 db 000h, 000h, 000h, 000h, 000h, 000h, 080h, 040h, 047h
0055   D6B3 000000000000804047
0056   D6BC                 db 002h, 000h, 002h, 000h, 002h, 000h, 002h, 000h, 047h
0056   D6BC 020002000200020047
0057   D6C5                 db 000h, 040h, 000h, 040h, 000h, 040h, 000h, 040h, 047h
0057   D6C5 004000400040004047
0058   D6CE                 db 002h, 000h, 002h, 000h, 002h, 000h, 002h, 000h, 047h
0058   D6CE 020002000200020047
0059   D6D7                 db 000h, 040h, 000h, 040h, 000h, 040h, 000h, 040h, 047h
0059   D6D7 004000400040004047
0060   D6E0                 db 002h, 001h, 000h, 000h, 000h, 000h, 000h, 000h, 047h
0060   D6E0 020100000000000047
0061   D6E9                 db 000h, 055h, 000h, 000h, 000h, 000h, 000h, 000h, 047h
0061   D6E9 005500000000000047
0062   D6F2                 db 000h, 055h, 000h, 000h, 000h, 000h, 000h, 000h, 047h
0062   D6F2 005500000000000047
0063   D6FB                 db 000h, 040h, 000h, 000h, 000h, 000h, 000h, 000h, 047h
0063   D6FB 004000000000000047
0064   D704             
0001   D704                 savebin "dialog/dialog.C", begin, $ - begin ; dialog/dialog.asm dialog/div16.asm dialog/alg.asm dialog/shop.asm dialog/tools.asm dialog/dialogrect.asm dialog/panelgraph.asm dialog/inventgraph.asm dialog/invent.asm dialog/panel.asm dialog/magic.asm
0002   D704             
